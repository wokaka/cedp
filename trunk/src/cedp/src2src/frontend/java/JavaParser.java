// $ANTLR 3.2 Sep 23, 2009 12:02:23 src/cedp/src2src/frontend/java/Java.g 2010-06-11 18:42:05

package cedp.src2src.frontend.java;

import java.io.*;
import antlr.CommonAST;
import antlr.DumpASTVisitor;
import java.util.*;
import cetus.hir.*;
import cetus.hir.java.*;
import org.antlr.runtime.BitSet;
import cetus.base.grammars.PreprocessorInfoChannel;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created
 *          elementValuePair and elementValuePairs rules, then used them in the
 *          annotation rule.  Allows it to recognize annotation references with
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which
 *          has the Identifier portion in it, the parser would fail on constants in
 *          annotation definitions because it expected two identifiers.
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 *
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *  Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *  and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *  --a[i].foo didn't work. Fixed unaryExpression
 *
 *  Version 1.0.6 -- John Ridgway, March 17, 2008
 *      Made "assert" a switchable keyword like "enum".
 *      Fixed compilationUnit to disallow "annotation importDeclaration ...".
 *      Changed "Identifier ('.' Identifier)*" to "qualifiedName" in more
 *          places.
 *      Changed modifier* and/or variableModifier* to classOrInterfaceModifiers,
 *          modifiers or variableModifiers, as appropriate.
 *      Renamed "bound" to "typeBound" to better match language in the JLS.
 *      Added "memberDeclaration" which rewrites to methodDeclaration or
 *      fieldDeclaration and pulled type into memberDeclaration.  So we parse
 *          type and then move on to decide whether we're dealing with a field
 *          or a method.
 *      Modified "constructorDeclaration" to use "constructorBody" instead of
 *          "methodBody".  constructorBody starts with explicitConstructorInvocation,
 *          then goes on to blockStatement*.  Pulling explicitConstructorInvocation
 *          out of expressions allowed me to simplify "primary".
 *      Changed variableDeclarator to simplify it.
 *      Changed type to use classOrInterfaceType, thus simplifying it; of course
 *          I then had to add classOrInterfaceType, but it is used in several
 *          places.
 *      Fixed annotations, old version allowed "@X(y,z)", which is illegal.
 *      Added optional comma to end of "elementValueArrayInitializer"; as per JLS.
 *      Changed annotationTypeElementRest to use normalClassDeclaration and
 *          normalInterfaceDeclaration rather than classDeclaration and
 *          interfaceDeclaration, thus getting rid of a couple of grammar ambiguities.
 *      Split localVariableDeclaration into localVariableDeclarationStatement
 *          (includes the terminating semi-colon) and localVariableDeclaration.
 *          This allowed me to use localVariableDeclaration in "forInit" clauses,
 *           simplifying them.
 *      Changed switchBlockStatementGroup to use multiple labels.  This adds an
 *          ambiguity, but if one uses appropriately greedy parsing it yields the
 *           parse that is closest to the meaning of the switch statement.
 *      Renamed "forVarControl" to "enhancedForControl" -- JLS language.
 *      Added semantic predicates to test for shift operations rather than other
 *          things.  Thus, for instance, the string "< <" will never be treated
 *          as a left-shift operator.
 *      In "creator" we rule out "nonWildcardTypeArguments" on arrayCreation,
 *          which are illegal.
 *      Moved "nonWildcardTypeArguments into innerCreator.
 *      Removed 'super' superSuffix from explicitGenericInvocation, since that
 *          is only used in explicitConstructorInvocation at the beginning of a
 *           constructorBody.  (This is part of the simplification of expressions
 *           mentioned earlier.)
 *      Simplified primary (got rid of those things that are only used in
 *          explicitConstructorInvocation).
 *      Lexer -- removed "Exponent?" from FloatingPointLiteral choice 4, since it
 *          led to an ambiguity.
 *
 *      This grammar successfully parses every .java file in the JDK 1.5 source
 *          tree (excluding those whose file names include '-', which are not
 *          valid Java compilation units).
 *
 *  Known remaining problems:
 *      "Letter" and "JavaIDDigit" are wrong.  The actual specification of
 *      "Letter" should be "a character for which the method
 *      Character.isJavaIdentifierStart(int) returns true."  A "Java
 *      letter-or-digit is a character for which the method
 *      Character.isJavaIdentifierPart(int) returns true."
 */
public class JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Identifier", "ENUM", "FloatingPointLiteral", "CharacterLiteral", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "ASSERT", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'package'", "';'", "'import'", "'static'", "'.'", "'*'", "'public'", "'protected'", "'private'", "'abstract'", "'final'", "'strictfp'", "'class'", "'extends'", "'implements'", "'<'", "','", "'>'", "'&'", "'{'", "'}'", "'interface'", "'void'", "'['", "']'", "'throws'", "'='", "'native'", "'synchronized'", "'transient'", "'volatile'", "'?'", "'super'", "'('", "')'", "'...'", "'this'", "'null'", "'true'", "'false'", "'@'", "'default'", "':'", "'if'", "'else'", "'for'", "'while'", "'do'", "'try'", "'finally'", "'switch'", "'return'", "'throw'", "'break'", "'continue'", "'catch'", "'case'", "'||'", "'&&'", "'|'", "'^'", "'=='", "'!='", "'instanceof'", "'+'", "'-'", "'/'", "'%'", "'++'", "'--'", "'~'", "'!'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'new'"
    };
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int FloatTypeSuffix=16;
    public static final int T__25=25;
    public static final int OctalLiteral=10;
    public static final int EOF=-1;
    public static final int Identifier=4;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__90=90;
    public static final int COMMENT=23;
    public static final int T__99=99;
    public static final int T__98=98;
    public static final int T__97=97;
    public static final int T__96=96;
    public static final int T__95=95;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int LINE_COMMENT=24;
    public static final int IntegerTypeSuffix=14;
    public static final int T__85=85;
    public static final int T__84=84;
    public static final int ASSERT=12;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__89=89;
    public static final int T__88=88;
    public static final int WS=22;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__70=70;
    public static final int FloatingPointLiteral=6;
    public static final int JavaIDDigit=21;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__74=74;
    public static final int Letter=20;
    public static final int EscapeSequence=17;
    public static final int T__73=73;
    public static final int T__79=79;
    public static final int T__78=78;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int CharacterLiteral=7;
    public static final int Exponent=15;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int HexDigit=13;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int HexLiteral=9;
    public static final int T__43=43;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int DecimalLiteral=11;
    public static final int StringLiteral=8;
    public static final int T__30=30;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int T__33=33;
    public static final int ENUM=5;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__36=36;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int UnicodeEscape=18;
    public static final int OctalEscape=19;

    // delegates
    // delegators


        public JavaParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JavaParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[407+1];
             
             
        }
        

    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "src/cedp/src2src/frontend/java/Java.g"; }


    // Copied following options from java grammar.
    int codeGenMakeSwitchThreshold = 2;
    int codeGenBitsetTestThreshold = 3;

    Expression baseEnum = null,curEnum = null;
    JavaLexer curLexer=null;
    boolean isFuncDef = false;
    boolean isExtern = false;
    PreprocessorInfoChannel preprocessorInfoChannel = null;
    SymbolTable symtab = null;
    CompoundStatement curr_cstmt = null;
    boolean hastypedef = false;
    HashMap typetable = null;
    LinkedList currproc = new LinkedList();
    Declaration prev_decl = null;
    boolean old_style_func = false;
    HashMap func_decl_list = new HashMap();

    public List MergeList(List a, List b)
    {
        List ret = new LinkedList();

        for(int i=0; i<a.size(); i++)
            ret.add(a.get(i));

        for(int i=0; i<b.size(); i++)
            ret.add(b.get(i));

        return ret;
    }

    public void getPreprocessorInfoChannel(PreprocessorInfoChannel preprocChannel)
    {
      preprocessorInfoChannel = preprocChannel;
    }

    public void setLexer(JavaLexer lexer)
    {
      curLexer=lexer;
      curLexer.setParser(this);
    }

    public JavaLexer getLexer()
    {
      return curLexer;
    }

    public LinkedList getPragma(int a)
    {
      return
          preprocessorInfoChannel.extractLinesPrecedingTokenNumber(new Integer(a));
    }

    public void putPragma(Token sline, SymbolTable sym)
    {
      LinkedList v  = null;
      v = getPragma(((JavaToken)sline).getTokenNumber());
      Iterator iter = v.iterator();
      Pragma p = null;
      PreAnnotation anote = null;
      while(iter.hasNext()) {
        p = (Pragma)iter.next();
        anote = new PreAnnotation(p.str);
        if (p.type ==Pragma.pragma)
          anote.setPrintMethod(PreAnnotation.print_raw_method);
        else if(p.type ==Pragma.comment)
          anote.setPrintMethod(PreAnnotation.print_raw_method);
        //sym.addStatement(new DeclarationStatement(anote));
        if (sym instanceof CompoundStatement)
          ((CompoundStatement)sym).addStatement(new DeclarationStatement(anote));
        else
          sym.addDeclaration(anote);
      }
    }

    // Suppport C++-style single-line comments?
    public static boolean CPPComments = true;
    public Stack symtabstack = new Stack();
    public Stack typestack = new Stack();

    public void enterSymtab(SymbolTable curr_symtab)
    {
      symtabstack.push(symtab);
      typetable = new HashMap();
      typestack.push(typetable);
      symtab = curr_symtab;
    }

    public void exitSymtab()
    {
      Object o = symtabstack.pop();
      if (o != null) {
        typestack.pop();
        typetable = (HashMap)(typestack.peek());
        symtab = (SymbolTable)o;
      }
    }

    public boolean isTypedefName(String name)
    {
      //System.err.println("Typename "+name);
      int n = typestack.size()-1;
      Object d = null;
      while(n>=0) {
        d = ((HashMap)(typestack.get(n))).get(name);
        if (d != null )
          return true;
        n--;
      }
      if (name.equals("__builtin_va_list"))
        return true;

      //System.err.println("Typename "+name+" not found");
      return false;
    }

    int traceDepth = 0;

    public void reportError(RecognitionException ex)
    {
      try {
        System.err.println("ANTLR Parsing Error: " + "Exception Type: "
            + ex.getClass().getName());
        System.err.println("Source: " + getLexer().lineObject.getSource()
            + " Line:" + ex.getLine() + " Column: " + ex.getColumn()
            + " token name:" + tokenNames[LA(1)]);
        ex.printStackTrace(System.err);
        System.exit(1);
      } catch (TokenStreamException e) {
        System.err.println("ANTLR Parsing Error: "+ex);
        ex.printStackTrace(System.err);
        System.exit(1);
      }
    }

    public void reportError(String s)
    {
      System.err.println("ANTLR Parsing Error from String: " + s);
    }

    public void reportWarning(String s)
    {
      System.err.println("ANTLR Parsing Warning from String: " + s);
    }

    public void match(int t) throws MismatchedTokenException
    {
      boolean debugging = false;
      if ( debugging ) {
        for (int x=0; x<traceDepth; x++)
          System.out.print(" ");
        try {
          System.out.println("Match(" + tokenNames[t] + ") with LA(1)="
              + tokenNames[LA(1)] + ((inputState.guessing>0)?
              " [inputState.guessing " + inputState.guessing + "]":""));
        } catch (TokenStreamException e) {
          System.out.println("Match("+tokenNames[t]+") "
              + ((inputState.guessing>0)?
              " [inputState.guessing "+ inputState.guessing + "]":""));
        }
      }
      try {
        if ( LA(1)!=t ) {
          if ( debugging ) {
            for (int x=0; x<traceDepth; x++)
              System.out.print(" ");
            System.out.println("token mismatch: "+tokenNames[LA(1)]
                + "!=" + tokenNames[t]);
          }
          throw new MismatchedTokenException
              (tokenNames, LT(1), t, false, getFilename());
        } else {
          // mark token as consumed -- fetch next token deferred until LA/LT
          consume();
        }
      } catch (TokenStreamException e) {
      }
    }

    public void traceIn(String rname)
    {
      traceDepth += 1;
      for (int x=0; x<traceDepth; x++)
        System.out.print(" ");
      try {
        System.out.println("> "+rname+"; LA(1)==("+ tokenNames[LT(1).getType()]
            + ") " + LT(1).getText() + " [inputState.guessing "
            + inputState.guessing + "]");
      } catch (TokenStreamException e) {
      }
    }

    public void traceOut(String rname)
    {
      for (int x=0; x<traceDepth; x++)
        System.out.print(" ");
      try {
        System.out.println("< "+rname+"; LA(1)==("+ tokenNames[LT(1).getType()]
            + ") " + LT(1).getText() + " [inputState.guessing "
            + inputState.guessing + "]");
      } catch (TokenStreamException e) {
      }
      traceDepth -= 1;
    }

    boolean dFlag = true;
    Expression prev_expr;



    // $ANTLR start "translationUnit"
    // src/cedp/src2src/frontend/java/Java.g:517:1: translationUnit[TranslationUnit init_tunit] returns [TranslationUnit tunit] : (t1= annotations (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* ) | (t7= packageDeclaration )? (t8= importDeclaration )* (t9= typeDeclaration )* );
    public final TranslationUnit translationUnit(TranslationUnit init_tunit) throws RecognitionException {
        TranslationUnit tunit = null;
        int translationUnit_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;

        Declaration t6 = null;

        Declaration t7 = null;

        Declaration t8 = null;

        Declaration t9 = null;



                if(dFlag) System.out.println("translationUnit");
                /* build a new Translation Unit */
                if (init_tunit == null)
                  tunit = new TranslationUnit(getLexer().originalSource);
                else
                  tunit = init_tunit;
                enterSymtab(tunit);
            
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return tunit; }
            // src/cedp/src2src/frontend/java/Java.g:530:5: (t1= annotations (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* ) | (t7= packageDeclaration )? (t8= importDeclaration )* (t9= typeDeclaration )* )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:530:9: t1= annotations (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* )
                    {
                    pushFollow(FOLLOW_annotations_in_translationUnit119);
                    t1=annotations();

                    state._fsp--;
                    if (state.failed) return tunit;
                    if ( state.backtracking==0 ) {

                                          tunit.addDeclaration(t1);
                                      
                    }
                    // src/cedp/src2src/frontend/java/Java.g:534:9: (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* )
                    int alt4=2;
                    alt4 = dfa4.predict(input);
                    switch (alt4) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:534:13: t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )*
                            {
                            pushFollow(FOLLOW_packageDeclaration_in_translationUnit153);
                            t2=packageDeclaration();

                            state._fsp--;
                            if (state.failed) return tunit;
                            if ( state.backtracking==0 ) {

                                                  tunit.addDeclaration(t2);
                                              
                            }
                            // src/cedp/src2src/frontend/java/Java.g:538:13: (t3= importDeclaration )*
                            loop1:
                            do {
                                int alt1=2;
                                alt1 = dfa1.predict(input);
                                switch (alt1) {
                            	case 1 :
                            	    // src/cedp/src2src/frontend/java/Java.g:538:14: t3= importDeclaration
                            	    {
                            	    pushFollow(FOLLOW_importDeclaration_in_translationUnit188);
                            	    t3=importDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return tunit;
                            	    if ( state.backtracking==0 ) {

                            	                          tunit.addDeclaration(t3);
                            	                      
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop1;
                                }
                            } while (true);

                            // src/cedp/src2src/frontend/java/Java.g:543:13: (t4= typeDeclaration )*
                            loop2:
                            do {
                                int alt2=2;
                                alt2 = dfa2.predict(input);
                                switch (alt2) {
                            	case 1 :
                            	    // src/cedp/src2src/frontend/java/Java.g:543:14: t4= typeDeclaration
                            	    {
                            	    pushFollow(FOLLOW_typeDeclaration_in_translationUnit238);
                            	    t4=typeDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return tunit;
                            	    if ( state.backtracking==0 ) {

                            	                          tunit.addDeclaration(t4);
                            	                      
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop2;
                                }
                            } while (true);


                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:548:13: t5= classOrInterfaceDeclaration (t6= typeDeclaration )*
                            {
                            pushFollow(FOLLOW_classOrInterfaceDeclaration_in_translationUnit287);
                            t5=classOrInterfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return tunit;
                            if ( state.backtracking==0 ) {

                                                  tunit.addDeclaration(t5);
                                              
                            }
                            // src/cedp/src2src/frontend/java/Java.g:552:13: (t6= typeDeclaration )*
                            loop3:
                            do {
                                int alt3=2;
                                alt3 = dfa3.predict(input);
                                switch (alt3) {
                            	case 1 :
                            	    // src/cedp/src2src/frontend/java/Java.g:552:14: t6= typeDeclaration
                            	    {
                            	    pushFollow(FOLLOW_typeDeclaration_in_translationUnit322);
                            	    t6=typeDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return tunit;
                            	    if ( state.backtracking==0 ) {

                            	                              tunit.addDeclaration(t6);
                            	                      
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop3;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:558:9: (t7= packageDeclaration )? (t8= importDeclaration )* (t9= typeDeclaration )*
                    {
                    // src/cedp/src2src/frontend/java/Java.g:558:9: (t7= packageDeclaration )?
                    int alt5=2;
                    alt5 = dfa5.predict(input);
                    switch (alt5) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:558:10: t7= packageDeclaration
                            {
                            pushFollow(FOLLOW_packageDeclaration_in_translationUnit378);
                            t7=packageDeclaration();

                            state._fsp--;
                            if (state.failed) return tunit;
                            if ( state.backtracking==0 ) {

                                                  tunit.addDeclaration(t7);
                                              
                            }

                            }
                            break;

                    }

                    // src/cedp/src2src/frontend/java/Java.g:563:9: (t8= importDeclaration )*
                    loop6:
                    do {
                        int alt6=2;
                        alt6 = dfa6.predict(input);
                        switch (alt6) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:563:10: t8= importDeclaration
                    	    {
                    	    pushFollow(FOLLOW_importDeclaration_in_translationUnit420);
                    	    t8=importDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return tunit;
                    	    if ( state.backtracking==0 ) {

                    	                          tunit.addDeclaration(t8);
                    	                      
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop6;
                        }
                    } while (true);

                    // src/cedp/src2src/frontend/java/Java.g:568:9: (t9= typeDeclaration )*
                    loop7:
                    do {
                        int alt7=2;
                        alt7 = dfa7.predict(input);
                        switch (alt7) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:568:10: t9= typeDeclaration
                    	    {
                    	    pushFollow(FOLLOW_typeDeclaration_in_translationUnit462);
                    	    t9=typeDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return tunit;
                    	    if ( state.backtracking==0 ) {

                    	                          tunit.addDeclaration(t9);
                    	                      
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop7;
                        }
                    } while (true);


                    }
                    break;

            }
            if ( state.backtracking==0 ) {

                      exitSymtab();
                  
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, translationUnit_StartIndex); }
        }
        return tunit;
    }
    // $ANTLR end "translationUnit"


    // $ANTLR start "packageDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:576:1: packageDeclaration returns [Declaration ret] : 'package' t1= qualifiedName ';' ;
    public final Declaration packageDeclaration() throws RecognitionException {
        Declaration ret = null;
        int packageDeclaration_StartIndex = input.index();
        JavaParser.qualifiedName_return t1 = null;


         if(dFlag) System.out.println("packageDeclaration"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:578:5: ( 'package' t1= qualifiedName ';' )
            // src/cedp/src2src/frontend/java/Java.g:578:9: 'package' t1= qualifiedName ';'
            {
            match(input,25,FOLLOW_25_in_packageDeclaration525); if (state.failed) return ret;
            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration529);
            t1=qualifiedName();

            state._fsp--;
            if (state.failed) return ret;
            match(input,26,FOLLOW_26_in_packageDeclaration531); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              ret = new PackageOrImportDeclaration(Specifier.PACKAGE, new NameID((t1!=null?input.toString(t1.start,t1.stop):null)));
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, packageDeclaration_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "packageDeclaration"


    // $ANTLR start "importDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:585:1: importDeclaration returns [Declaration ret] : 'import' ( 'static' )? t1= qualifiedName ( '.' '*' )? ';' ;
    public final Declaration importDeclaration() throws RecognitionException {
        Declaration ret = null;
        int importDeclaration_StartIndex = input.index();
        JavaParser.qualifiedName_return t1 = null;


         if(dFlag) System.out.println("importDeclaration"); int check1=0, check2=0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:587:5: ( 'import' ( 'static' )? t1= qualifiedName ( '.' '*' )? ';' )
            // src/cedp/src2src/frontend/java/Java.g:587:9: 'import' ( 'static' )? t1= qualifiedName ( '.' '*' )? ';'
            {
            match(input,27,FOLLOW_27_in_importDeclaration579); if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:587:18: ( 'static' )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==28) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:587:19: 'static'
                    {
                    match(input,28,FOLLOW_28_in_importDeclaration582); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                      check1 = 1; 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifiedName_in_importDeclaration591);
            t1=qualifiedName();

            state._fsp--;
            if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:587:63: ( '.' '*' )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==29) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:587:64: '.' '*'
                    {
                    match(input,29,FOLLOW_29_in_importDeclaration594); if (state.failed) return ret;
                    match(input,30,FOLLOW_30_in_importDeclaration596); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                      check2 = 1;
                    }

                    }
                    break;

            }

            match(input,26,FOLLOW_26_in_importDeclaration603); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              ret = new PackageOrImportDeclaration(Specifier.IMPORT, new NameID((t1!=null?input.toString(t1.start,t1.stop):null) + ((check2==1)?".*":"")));
                              if(check1==1)
                                  ret.AddSpecifier(Specifier.STATIC);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, importDeclaration_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "importDeclaration"


    // $ANTLR start "typeDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:596:1: typeDeclaration returns [Declaration ret_decl] : (t1= classOrInterfaceDeclaration | ';' );
    public final Declaration typeDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int typeDeclaration_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("typeDeclaration"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:598:5: (t1= classOrInterfaceDeclaration | ';' )
            int alt11=2;
            alt11 = dfa11.predict(input);
            switch (alt11) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:598:9: t1= classOrInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration653);
                    t1=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:602:9: ';'
                    {
                    match(input,26,FOLLOW_26_in_typeDeclaration677); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      //ret_decl = null;
                                      ret_decl = new StringDeclaration(";");
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, typeDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "typeDeclaration"


    // $ANTLR start "classOrInterfaceDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:610:1: classOrInterfaceDeclaration returns [Declaration ret_decl] : t1= classOrInterfaceModifiers (t2= classDeclaration | t3= interfaceDeclaration ) ;
    public final Declaration classOrInterfaceDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int classOrInterfaceDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("classOrInterfaceDeclaration"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:612:5: (t1= classOrInterfaceModifiers (t2= classDeclaration | t3= interfaceDeclaration ) )
            // src/cedp/src2src/frontend/java/Java.g:612:9: t1= classOrInterfaceModifiers (t2= classDeclaration | t3= interfaceDeclaration )
            {
            pushFollow(FOLLOW_classOrInterfaceModifiers_in_classOrInterfaceDeclaration727);
            t1=classOrInterfaceModifiers();

            state._fsp--;
            if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:613:9: (t2= classDeclaration | t3= interfaceDeclaration )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ENUM||LA12_0==37) ) {
                alt12=1;
            }
            else if ( (LA12_0==46||LA12_0==65) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:613:10: t2= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration740);
                    t2=classDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      list.add(t2);
                                      ret_decl = new StringDeclaration(list);
                      //                t2.SetClassSpec(t1);
                      //                ret_decl = (Declaration) t2;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:621:11: t3= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration768);
                    t3=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      list.add(t3);
                                      ret_decl = new StringDeclaration(list);
                      //                t3.SetClassSpec(t1);
                      //                ret_decl = (Declaration) t3;
                                  
                    }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, classOrInterfaceDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "classOrInterfaceDeclaration"


    // $ANTLR start "classOrInterfaceModifiers"
    // src/cedp/src2src/frontend/java/Java.g:633:1: classOrInterfaceModifiers returns [Declaration ret_decl] : (t1= classOrInterfaceModifier )* ;
    public final Declaration classOrInterfaceModifiers() throws RecognitionException {
        Declaration ret_decl = null;
        int classOrInterfaceModifiers_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("classOrInterfaceModifiers");  LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:635:5: ( (t1= classOrInterfaceModifier )* )
            // src/cedp/src2src/frontend/java/Java.g:635:9: (t1= classOrInterfaceModifier )*
            {
            // src/cedp/src2src/frontend/java/Java.g:635:9: (t1= classOrInterfaceModifier )*
            loop13:
            do {
                int alt13=2;
                alt13 = dfa13.predict(input);
                switch (alt13) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:635:10: t1= classOrInterfaceModifier
            	    {
            	    pushFollow(FOLLOW_classOrInterfaceModifier_in_classOrInterfaceModifiers830);
            	    t1=classOrInterfaceModifier();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1); // original
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, classOrInterfaceModifiers_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "classOrInterfaceModifiers"


    // $ANTLR start "classOrInterfaceModifier"
    // src/cedp/src2src/frontend/java/Java.g:646:1: classOrInterfaceModifier returns [Declaration ret_decl] : (t1= annotation | 'public' | 'protected' | 'private' | 'abstract' | 'static' | 'final' | 'strictfp' );
    public final Declaration classOrInterfaceModifier() throws RecognitionException {
        Declaration ret_decl = null;
        int classOrInterfaceModifier_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("classOrInterfaceModifier"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:648:5: (t1= annotation | 'public' | 'protected' | 'private' | 'abstract' | 'static' | 'final' | 'strictfp' )
            int alt14=8;
            switch ( input.LA(1) ) {
            case 65:
                {
                alt14=1;
                }
                break;
            case 31:
                {
                alt14=2;
                }
                break;
            case 32:
                {
                alt14=3;
                }
                break;
            case 33:
                {
                alt14=4;
                }
                break;
            case 34:
                {
                alt14=5;
                }
                break;
            case 28:
                {
                alt14=6;
                }
                break;
            case 35:
                {
                alt14=7;
                }
                break;
            case 36:
                {
                alt14=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }

            switch (alt14) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:648:9: t1= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_classOrInterfaceModifier906);
                    t1=annotation();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                  //    type = t1;
                                      ret_decl = 51;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:653:9: 'public'
                    {
                    match(input,31,FOLLOW_31_in_classOrInterfaceModifier933); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      //type = Specifier.PUBLIC;
                                      ret_decl = new StringDeclaration("public");
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:658:9: 'protected'
                    {
                    match(input,32,FOLLOW_32_in_classOrInterfaceModifier962); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      //type = Specifier.PROTECTED;
                                      ret_decl = new StringDeclaration("protected");
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:663:9: 'private'
                    {
                    match(input,33,FOLLOW_33_in_classOrInterfaceModifier988); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      //type = Specifier.PRIVATE;
                                      ret_decl = new StringDeclaration("private");
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:668:9: 'abstract'
                    {
                    match(input,34,FOLLOW_34_in_classOrInterfaceModifier1016); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      //type = Specifier.ABSTRACT;
                                      ret_decl = new StringDeclaration("abstract");
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:673:9: 'static'
                    {
                    match(input,28,FOLLOW_28_in_classOrInterfaceModifier1043); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      //type = Specifier.STATIC;
                                      ret_decl = new StringDeclaration("static");
                                  
                    }

                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:678:9: 'final'
                    {
                    match(input,35,FOLLOW_35_in_classOrInterfaceModifier1072); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      //type = Specifier.FINAL;
                                      ret_decl = new StringDeclaration("final");
                                  
                    }

                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:683:9: 'strictfp'
                    {
                    match(input,36,FOLLOW_36_in_classOrInterfaceModifier1102); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      //type = Specifier.STRICTFP;
                                      ret_decl = new StringDeclaration("strictfp");
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, classOrInterfaceModifier_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "classOrInterfaceModifier"


    // $ANTLR start "modifiers"
    // src/cedp/src2src/frontend/java/Java.g:691:1: modifiers returns [Declaration ret_decl] : (t1= modifier )* ;
    public final Declaration modifiers() throws RecognitionException {
        Declaration ret_decl = null;
        int modifiers_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("modifiers"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:693:5: ( (t1= modifier )* )
            // src/cedp/src2src/frontend/java/Java.g:693:9: (t1= modifier )*
            {
            // src/cedp/src2src/frontend/java/Java.g:693:9: (t1= modifier )*
            loop15:
            do {
                int alt15=2;
                alt15 = dfa15.predict(input);
                switch (alt15) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:693:10: t1= modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifiers1157);
            	    t1=modifier();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      //list.add(t1);
            	                      ret_decl = t1;
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, modifiers_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "modifiers"


    // $ANTLR start "classDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:702:1: classDeclaration returns [Declaration ret_decl] : (t1= normalClassDeclaration | t2= enumDeclaration );
    public final Declaration classDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int classDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("classDeclaration"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:704:5: (t1= normalClassDeclaration | t2= enumDeclaration )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==37) ) {
                alt16=1;
            }
            else if ( (LA16_0==ENUM) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:704:9: t1= normalClassDeclaration
                    {
                    pushFollow(FOLLOW_normalClassDeclaration_in_classDeclaration1219);
                    t1=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:708:9: t2= enumDeclaration
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_classDeclaration1245);
                    t2=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t2;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, classDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "classDeclaration"


    // $ANTLR start "normalClassDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:715:1: normalClassDeclaration returns [Declaration ret] : 'class' Identifier (t1= typeParameters )? ( 'extends' t2= type )? ( 'implements' t3= typeList )? t4= classBody ;
    public final Declaration normalClassDeclaration() throws RecognitionException {
        Declaration ret = null;
        int normalClassDeclaration_StartIndex = input.index();
        Token Identifier1=null;
        Declaration t1 = null;

        Declaration t2 = null;

        List t3 = null;

        Declaration t4 = null;


         if(dFlag) System.out.println("normalClassDeclaration"); int check1 = 0; LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:717:5: ( 'class' Identifier (t1= typeParameters )? ( 'extends' t2= type )? ( 'implements' t3= typeList )? t4= classBody )
            // src/cedp/src2src/frontend/java/Java.g:717:9: 'class' Identifier (t1= typeParameters )? ( 'extends' t2= type )? ( 'implements' t3= typeList )? t4= classBody
            {
            match(input,37,FOLLOW_37_in_normalClassDeclaration1294); if (state.failed) return ret;
            Identifier1=(Token)match(input,Identifier,FOLLOW_Identifier_in_normalClassDeclaration1296); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("class"));
                              list.add(new StringDeclaration((Identifier1!=null?Identifier1.getText():null)));
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:722:9: (t1= typeParameters )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==40) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:722:10: t1= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalClassDeclaration1324);
                    t1=typeParameters();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                  
                    }

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:727:9: ( 'extends' t2= type )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==38) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:727:10: 'extends' t2= type
                    {
                    match(input,38,FOLLOW_38_in_normalClassDeclaration1360); if (state.failed) return ret;
                    pushFollow(FOLLOW_type_in_normalClassDeclaration1364);
                    t2=type();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      //check1 = 1;
                                      list.add(new StringDeclaration("extends"));
                                      list.add(t2);
                                  
                    }

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:734:9: ( 'implements' t3= typeList )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==39) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:734:10: 'implements' t3= typeList
                    {
                    match(input,39,FOLLOW_39_in_normalClassDeclaration1400); if (state.failed) return ret;
                    pushFollow(FOLLOW_typeList_in_normalClassDeclaration1404);
                    t3=typeList();

                    state._fsp--;
                    if (state.failed) return ret;

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalClassDeclaration1419);
            t4=classBody();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              //list.add(t4);
                              //ret_decl = new StringDeclaration(list);
                              ClassDeclaration cdecl = new ClassDeclaration(ClassDeclaration.CLASS, new NameID((Identifier1!=null?Identifier1.getText():null)));
                              cdecl.SetBodyStatement(new DeclarationStatement(t4));
                              if(t2 != null)
                                  cdecl.addBaseClass(new NameID(t2.toString())); // t2 is ?
                              if(t3 != null){
                                  for(int i=0; i<t3.size(); i++)
                                      cdecl.addBaseInterface(new NameID(t3.get(i).toString())); // t3 is a list of ...
                              }
                              ret = cdecl;
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, normalClassDeclaration_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "normalClassDeclaration"


    // $ANTLR start "typeParameters"
    // src/cedp/src2src/frontend/java/Java.g:751:1: typeParameters returns [Declaration ret_decl] : '<' t1= typeParameter ( ',' t2= typeParameter )* '>' ;
    public final Declaration typeParameters() throws RecognitionException {
        Declaration ret_decl = null;
        int typeParameters_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("typeParameters"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:753:5: ( '<' t1= typeParameter ( ',' t2= typeParameter )* '>' )
            // src/cedp/src2src/frontend/java/Java.g:753:9: '<' t1= typeParameter ( ',' t2= typeParameter )* '>'
            {
            match(input,40,FOLLOW_40_in_typeParameters1466); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_typeParameter_in_typeParameters1470);
            t1=typeParameter();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("<"));
                              list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:758:9: ( ',' t2= typeParameter )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==41) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:758:10: ',' t2= typeParameter
            	    {
            	    match(input,41,FOLLOW_41_in_typeParameters1495); if (state.failed) return ret_decl;
            	    pushFollow(FOLLOW_typeParameter_in_typeParameters1499);
            	    t2=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration(","));
            	                      list.add(t2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            match(input,42,FOLLOW_42_in_typeParameters1526); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration(">"));
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, typeParameters_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "typeParameters"


    // $ANTLR start "typeParameter"
    // src/cedp/src2src/frontend/java/Java.g:770:1: typeParameter returns [Declaration ret_decl] : Identifier ( 'extends' t1= typeBound )? ;
    public final Declaration typeParameter() throws RecognitionException {
        Declaration ret_decl = null;
        int typeParameter_StartIndex = input.index();
        Token Identifier2=null;
        Declaration t1 = null;


         if(dFlag) System.out.println("typeParameter"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:772:5: ( Identifier ( 'extends' t1= typeBound )? )
            // src/cedp/src2src/frontend/java/Java.g:772:9: Identifier ( 'extends' t1= typeBound )?
            {
            Identifier2=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeParameter1573); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              ret_decl = new StringDeclaration((Identifier2!=null?Identifier2.getText():null));
                              list.add(ret_decl);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:777:9: ( 'extends' t1= typeBound )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==38) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:777:10: 'extends' t1= typeBound
                    {
                    match(input,38,FOLLOW_38_in_typeParameter1599); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_typeBound_in_typeParameter1603);
                    t1=typeBound();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("extends"));
                                      list.add(t1);
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, typeParameter_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "typeParameter"


    // $ANTLR start "typeBound"
    // src/cedp/src2src/frontend/java/Java.g:786:1: typeBound returns [Declaration ret_decl] : t1= type ( '&' t2= type )* ;
    public final Declaration typeBound() throws RecognitionException {
        Declaration ret_decl = null;
        int typeBound_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("typeBound"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:788:5: (t1= type ( '&' t2= type )* )
            // src/cedp/src2src/frontend/java/Java.g:788:9: t1= type ( '&' t2= type )*
            {
            pushFollow(FOLLOW_type_in_typeBound1663);
            t1=type();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              ret_decl = t1;
                              list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:793:9: ( '&' t2= type )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==43) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:793:10: '&' t2= type
            	    {
            	    match(input,43,FOLLOW_43_in_typeBound1688); if (state.failed) return ret_decl;
            	    pushFollow(FOLLOW_type_in_typeBound1692);
            	    t2=type();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration("&"));
            	                      list.add(t2);
            	                      ret_decl = new StringDeclaration(list);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, typeBound_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "typeBound"


    // $ANTLR start "enumDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:802:1: enumDeclaration returns [Declaration ret] : t1= ENUM Identifier ( 'implements' t2= typeList )? t3= enumBody ;
    public final Declaration enumDeclaration() throws RecognitionException {
        Declaration ret = null;
        int enumDeclaration_StartIndex = input.index();
        Token t1=null;
        Token Identifier3=null;
        List t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("enumDeclaration"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:804:5: (t1= ENUM Identifier ( 'implements' t2= typeList )? t3= enumBody )
            // src/cedp/src2src/frontend/java/Java.g:804:9: t1= ENUM Identifier ( 'implements' t2= typeList )? t3= enumBody
            {
            t1=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration1752); if (state.failed) return ret;
            Identifier3=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumDeclaration1754); if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:804:28: ( 'implements' t2= typeList )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==39) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:804:29: 'implements' t2= typeList
                    {
                    match(input,39,FOLLOW_39_in_enumDeclaration1757); if (state.failed) return ret;
                    pushFollow(FOLLOW_typeList_in_enumDeclaration1761);
                    t2=typeList();

                    state._fsp--;
                    if (state.failed) return ret;

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration1768);
            t3=enumBody();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              ClassDeclaration cdecl = new ClassDeclaration(ClassDeclaration.ENUM, new NameID((Identifier3!=null?Identifier3.getText():null)));
                              cdecl.SetBodyStatement(new DeclarationStatement(t3));
                              if(t2 != null){
                                  for(int i=0; i<t2.size(); i++)
                                      cdecl.addBaseClass(new NameID(t2.get(i).toString())); // t2 is a list of ...
                              }
                              ret = cdecl;
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, enumDeclaration_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "enumDeclaration"


    // $ANTLR start "enumBody"
    // src/cedp/src2src/frontend/java/Java.g:816:1: enumBody returns [Declaration ret_decl] : '{' (t1= enumConstants )? ( ',' )? (t2= enumBodyDeclarations )? '}' ;
    public final Declaration enumBody() throws RecognitionException {
        Declaration ret_decl = null;
        int enumBody_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("enumBody"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:818:5: ( '{' (t1= enumConstants )? ( ',' )? (t2= enumBodyDeclarations )? '}' )
            // src/cedp/src2src/frontend/java/Java.g:818:9: '{' (t1= enumConstants )? ( ',' )? (t2= enumBodyDeclarations )? '}'
            {
            match(input,44,FOLLOW_44_in_enumBody1815); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("{"));
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:822:9: (t1= enumConstants )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==Identifier||LA24_0==65) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:822:10: t1= enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody1842);
                    t1=enumConstants();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      //for(int i=0; i<t1.size(); i++)
                                      //    list.add(t1.get(i));
                                  
                    }

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:829:9: ( ',' )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==41) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:829:10: ','
                    {
                    match(input,41,FOLLOW_41_in_enumBody1879); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration(","));
                                  
                    }

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:834:9: (t2= enumBodyDeclarations )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==26) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:834:10: t2= enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody1917);
                    t2=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t2);
                                      /* TODO */
                                      //list = new LinkedList();
                                  
                    }

                    }
                    break;

            }

            match(input,45,FOLLOW_45_in_enumBody1952); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("}"));
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, enumBody_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "enumBody"


    // $ANTLR start "enumConstants"
    // src/cedp/src2src/frontend/java/Java.g:848:1: enumConstants returns [Declaration ret_decl] : t1= enumConstant ( ',' t2= enumConstant )* ;
    public final Declaration enumConstants() throws RecognitionException {
        Declaration ret_decl = null;
        int enumConstants_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("enumConstants"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:850:5: (t1= enumConstant ( ',' t2= enumConstant )* )
            // src/cedp/src2src/frontend/java/Java.g:850:9: t1= enumConstant ( ',' t2= enumConstant )*
            {
            pushFollow(FOLLOW_enumConstant_in_enumConstants2001);
            t1=enumConstant();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              ret_decl = t1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:855:9: ( ',' t2= enumConstant )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==41) ) {
                    int LA27_1 = input.LA(2);

                    if ( (LA27_1==Identifier||LA27_1==65) ) {
                        alt27=1;
                    }


                }


                switch (alt27) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:855:10: ',' t2= enumConstant
            	    {
            	    match(input,41,FOLLOW_41_in_enumConstants2026); if (state.failed) return ret_decl;
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants2030);
            	    t2=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration(","));
            	                      list.add(t2);
            	                      ret_decl = new StringDeclaration(list);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, enumConstants_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "enumConstants"


    // $ANTLR start "enumConstant"
    // src/cedp/src2src/frontend/java/Java.g:864:1: enumConstant returns [Declaration ret_decl] : (t1= annotations )? Identifier (t2= arguments )? (t3= classBody )? ;
    public final Declaration enumConstant() throws RecognitionException {
        Declaration ret_decl = null;
        int enumConstant_StartIndex = input.index();
        Token Identifier4=null;
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("enumConstant"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:866:5: ( (t1= annotations )? Identifier (t2= arguments )? (t3= classBody )? )
            // src/cedp/src2src/frontend/java/Java.g:866:9: (t1= annotations )? Identifier (t2= arguments )? (t3= classBody )?
            {
            // src/cedp/src2src/frontend/java/Java.g:866:9: (t1= annotations )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==65) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:866:10: t1= annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant2091);
                    t1=annotations();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                  
                    }

                    }
                    break;

            }

            Identifier4=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstant2118); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:870:25: (t2= arguments )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==58) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:0:0: t2= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant2122);
                    t2=arguments();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:870:39: (t3= classBody )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==44) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:0:0: t3= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant2127);
                    t3=classBody();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration((Identifier4!=null?Identifier4.getText():null)));
                              if(t2 != null)
                                  list.add(t2);
                              if(t3 != null)
                                  list.add(t3);
                              ret_decl = new StringDeclaration(list);
                              //ret_decl = new VariableDeclarator((Identifier4!=null?Identifier4.getText():null));
                              /* TODO */
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, enumConstant_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "enumConstant"


    // $ANTLR start "enumBodyDeclarations"
    // src/cedp/src2src/frontend/java/Java.g:883:1: enumBodyDeclarations returns [Declaration ret_decl] : ';' (t1= classBodyDeclaration )* ;
    public final Declaration enumBodyDeclarations() throws RecognitionException {
        Declaration ret_decl = null;
        int enumBodyDeclarations_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("enumBodyDeclarations"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:885:5: ( ';' (t1= classBodyDeclaration )* )
            // src/cedp/src2src/frontend/java/Java.g:885:9: ';' (t1= classBodyDeclaration )*
            {
            match(input,26,FOLLOW_26_in_enumBodyDeclarations2175); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              ret_decl = new StringDeclaration(";");
                              list.add(ret_decl);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:890:9: (t1= classBodyDeclaration )*
            loop31:
            do {
                int alt31=2;
                alt31 = dfa31.predict(input);
                switch (alt31) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:890:10: t1= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations2203);
            	    t1=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1);
            	                      ret_decl = new StringDeclaration(list);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, enumBodyDeclarations_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "enumBodyDeclarations"


    // $ANTLR start "interfaceDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:898:1: interfaceDeclaration returns [Declaration ret_decl] : (t1= normalInterfaceDeclaration | t2= annotationTypeDeclaration );
    public final Declaration interfaceDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("interfaceDeclaration"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:900:5: (t1= normalInterfaceDeclaration | t2= annotationTypeDeclaration )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==46) ) {
                alt32=1;
            }
            else if ( (LA32_0==65) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:900:9: t1= normalInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration2263);
                    t1=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:904:9: t2= annotationTypeDeclaration
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration2289);
                    t2=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t2;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, interfaceDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceDeclaration"


    // $ANTLR start "normalInterfaceDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:910:1: normalInterfaceDeclaration returns [Declaration ret_decl] : 'interface' Identifier (t1= typeParameters )? ( 'extends' t2= typeList )? t3= interfaceBody ;
    public final Declaration normalInterfaceDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int normalInterfaceDeclaration_StartIndex = input.index();
        Token Identifier5=null;
        Declaration t1 = null;

        List t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("normalInterfaceDeclaration"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:912:5: ( 'interface' Identifier (t1= typeParameters )? ( 'extends' t2= typeList )? t3= interfaceBody )
            // src/cedp/src2src/frontend/java/Java.g:912:9: 'interface' Identifier (t1= typeParameters )? ( 'extends' t2= typeList )? t3= interfaceBody
            {
            match(input,46,FOLLOW_46_in_normalInterfaceDeclaration2336); if (state.failed) return ret_decl;
            Identifier5=(Token)match(input,Identifier,FOLLOW_Identifier_in_normalInterfaceDeclaration2338); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:912:34: (t1= typeParameters )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==40) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:0:0: t1= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration2342);
                    t1=typeParameters();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:912:51: ( 'extends' t2= typeList )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==38) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:912:52: 'extends' t2= typeList
                    {
                    match(input,38,FOLLOW_38_in_normalInterfaceDeclaration2346); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration2350);
                    t2=typeList();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration2356);
            t3=interfaceBody();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("interface"));
                              list.add(new StringDeclaration((Identifier5!=null?Identifier5.getText():null)));
                              if(t1 != null)
                                  list.add(t1);
                              if(t2 != null){
                                  list.add(new StringDeclaration("extends"));
                                  list.add(t2);
                              }
                              list.add(t3);
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, normalInterfaceDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "normalInterfaceDeclaration"


    // $ANTLR start "typeList"
    // src/cedp/src2src/frontend/java/Java.g:927:1: typeList returns [List ret] : t1= type ( ',' t2= type )* ;
    public final List typeList() throws RecognitionException {
        List ret = null;
        int typeList_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("typeList"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:929:5: (t1= type ( ',' t2= type )* )
            // src/cedp/src2src/frontend/java/Java.g:929:9: t1= type ( ',' t2= type )*
            {
            pushFollow(FOLLOW_type_in_typeList2404);
            t1=type();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:933:9: ( ',' t2= type )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==41) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:933:10: ',' t2= type
            	    {
            	    match(input,41,FOLLOW_41_in_typeList2429); if (state.failed) return ret;
            	    pushFollow(FOLLOW_type_in_typeList2433);
            	    t2=type();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      //list.add(new StringDeclaration(","));
            	                      list.add(t2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, typeList_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "typeList"


    // $ANTLR start "classBody"
    // src/cedp/src2src/frontend/java/Java.g:941:1: classBody returns [Declaration ret] : '{' (t1= classBodyDeclaration )* '}' ;
    public final Declaration classBody() throws RecognitionException {
        Declaration ret = null;
        int classBody_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("classBody"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:943:5: ( '{' (t1= classBodyDeclaration )* '}' )
            // src/cedp/src2src/frontend/java/Java.g:943:9: '{' (t1= classBodyDeclaration )* '}'
            {
            match(input,44,FOLLOW_44_in_classBody2491); if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:943:13: (t1= classBodyDeclaration )*
            loop36:
            do {
                int alt36=2;
                alt36 = dfa36.predict(input);
                switch (alt36) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:943:15: t1= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody2497);
            	    t1=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                          list.add(t1);
            	                          //if(t1 != null)
            	                          //    ret_stat.addDeclaration((Declaration)t1);
            	                      
            	    }

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);

            match(input,45,FOLLOW_45_in_classBody2529); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                                  list.addFirst(new StringDeclaration("{"));
                                  list.addLast(new StringDeclaration("}"));
                                  ret = new StringDeclaration(list);
                              
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, classBody_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "classBody"


    // $ANTLR start "interfaceBody"
    // src/cedp/src2src/frontend/java/Java.g:957:1: interfaceBody returns [Declaration ret_decl] : '{' (t1= interfaceBodyDeclaration )* '}' ;
    public final Declaration interfaceBody() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceBody_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("interfaceBody"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:959:5: ( '{' (t1= interfaceBodyDeclaration )* '}' )
            // src/cedp/src2src/frontend/java/Java.g:959:9: '{' (t1= interfaceBodyDeclaration )* '}'
            {
            match(input,44,FOLLOW_44_in_interfaceBody2580); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:959:13: (t1= interfaceBodyDeclaration )*
            loop37:
            do {
                int alt37=2;
                alt37 = dfa37.predict(input);
                switch (alt37) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:959:14: t1= interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody2585);
            	    t1=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                          list.add(t1);
            	                      
            	    }

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);

            match(input,45,FOLLOW_45_in_interfaceBody2616); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                                  list.addFirst(new StringDeclaration("{"));
                                  list.addLast(new StringDeclaration("}"));
                                  ret_decl = new StringDeclaration(list);
                              
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, interfaceBody_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceBody"


    // $ANTLR start "classBodyDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:971:1: classBodyDeclaration returns [Declaration ret_decl] : ( ';' | ( 'static' )? t1= block | t3= modifiers t4= memberDecl );
    public final Declaration classBodyDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int classBodyDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t3 = null;

        Declaration t4 = null;


         if(dFlag) System.out.println("classBodyDeclaration"); int check; LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:973:5: ( ';' | ( 'static' )? t1= block | t3= modifiers t4= memberDecl )
            int alt39=3;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:973:9: ';'
                    {
                    match(input,26,FOLLOW_26_in_classBodyDeclaration2667); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration(";");
                                      //ret_decl = null;
                                      //ret_decl = new NullStatement();
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:979:9: ( 'static' )? t1= block
                    {
                    if ( state.backtracking==0 ) {
                      check=0;
                    }
                    // src/cedp/src2src/frontend/java/Java.g:979:20: ( 'static' )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==28) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:979:21: 'static'
                            {
                            match(input,28,FOLLOW_28_in_classBodyDeclaration2694); if (state.failed) return ret_decl;
                            if ( state.backtracking==0 ) {
                              check=1;
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration2702);
                    t1=block();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      if(check == 1){
                                          list.add(new StringDeclaration("static"));
                                          list.add(t1);
                                          ret_decl = new StringDeclaration(list);
                                          //ret_decl = t1;  /* Need to handle 'static' */
                                      }
                                      else
                                          ret_decl = t1;
                                          //ret_decl = t2;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:991:9: t3= modifiers t4= memberDecl
                    {
                    pushFollow(FOLLOW_modifiers_in_classBodyDeclaration2728);
                    t3=modifiers();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_memberDecl_in_classBodyDeclaration2732);
                    t4=memberDecl();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t3);
                                      list.add(t4);
                                      ret_decl = new StringDeclaration(list);
                                      //ret_decl = t4;
                                      /* TODO t3? */
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, classBodyDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "classBodyDeclaration"


    // $ANTLR start "memberDecl"
    // src/cedp/src2src/frontend/java/Java.g:1001:1: memberDecl returns [Declaration ret_decl] : (t1= genericMethodOrConstructorDecl | t2= memberDeclaration | 'void' Identifier t3= voidMethodDeclaratorRest | Identifier t4= constructorDeclaratorRest | t5= interfaceDeclaration | t6= classDeclaration );
    public final Declaration memberDecl() throws RecognitionException {
        Declaration ret_decl = null;
        int memberDecl_StartIndex = input.index();
        Token Identifier6=null;
        Token Identifier7=null;
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;

        Declaration t6 = null;


         if(dFlag) System.out.println("memberDecl"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1003:5: (t1= genericMethodOrConstructorDecl | t2= memberDeclaration | 'void' Identifier t3= voidMethodDeclaratorRest | Identifier t4= constructorDeclaratorRest | t5= interfaceDeclaration | t6= classDeclaration )
            int alt40=6;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1003:9: t1= genericMethodOrConstructorDecl
                    {
                    pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_memberDecl2781);
                    t1=genericMethodOrConstructorDecl();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1007:9: t2= memberDeclaration
                    {
                    pushFollow(FOLLOW_memberDeclaration_in_memberDecl2807);
                    t2=memberDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t2;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:1011:9: 'void' Identifier t3= voidMethodDeclaratorRest
                    {
                    match(input,47,FOLLOW_47_in_memberDecl2831); if (state.failed) return ret_decl;
                    Identifier6=(Token)match(input,Identifier,FOLLOW_Identifier_in_memberDecl2833); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_voidMethodDeclaratorRest_in_memberDecl2837);
                    t3=voidMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("void"));
                                      list.add(new StringDeclaration((Identifier6!=null?Identifier6.getText():null)));
                                      list.add(t3);
                                      ret_decl = new StringDeclaration(list);

                                      //List l1 = new LinkedList();
                                      //li.add(Specifier.VOID);
                                      //ProcedureDeclarator pdecl = new ProcedureDeclarator(l1, new NameID((Identifier6!=null?Identifier6.getText():null)), (List)t3.get(0));
                                      //ret_decl = new Procedure(Specifier.VOID, pdecl, (t3.size()>1)?t3.get(1):null);
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:1023:9: Identifier t4= constructorDeclaratorRest
                    {
                    Identifier7=(Token)match(input,Identifier,FOLLOW_Identifier_in_memberDecl2861); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_memberDecl2865);
                    t4=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration((Identifier7!=null?Identifier7.getText():null)));
                                      list.add(t4);
                                      ret_decl = new StringDeclaration(list);
                                     // ProcedureDeclarator pdecl = new ProcedureDeclarator(new NameID((Identifier7!=null?Identifier7.getText():null)), (List)t4.get("param"));
                                     // ret_decl = new Procedure(pdecl, (CompoundStatement)t4.get("body"));
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:1031:9: t5= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl2891);
                    t5=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t5;
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:1035:9: t6= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_memberDecl2917);
                    t6=classDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t6;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, memberDecl_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "memberDecl"


    // $ANTLR start "memberDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:1041:1: memberDeclaration returns [Declaration ret] : t1= type (t2= methodDeclaration | t3= fieldDeclaration ) ;
    public final Declaration memberDeclaration() throws RecognitionException {
        Declaration ret = null;
        int memberDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        VariableDeclaration t3 = null;


         if(dFlag) System.out.println("memberDeclaration"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1043:5: (t1= type (t2= methodDeclaration | t3= fieldDeclaration ) )
            // src/cedp/src2src/frontend/java/Java.g:1043:9: t1= type (t2= methodDeclaration | t3= fieldDeclaration )
            {
            pushFollow(FOLLOW_type_in_memberDeclaration2966);
            t1=type();

            state._fsp--;
            if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:1043:17: (t2= methodDeclaration | t3= fieldDeclaration )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==Identifier) ) {
                int LA41_1 = input.LA(2);

                if ( (LA41_1==26||LA41_1==41||LA41_1==48||LA41_1==51) ) {
                    alt41=2;
                }
                else if ( (LA41_1==58) ) {
                    alt41=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ret;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1043:18: t2= methodDeclaration
                    {
                    pushFollow(FOLLOW_methodDeclaration_in_memberDeclaration2971);
                    t2=methodDeclaration();

                    state._fsp--;
                    if (state.failed) return ret;

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1043:41: t3= fieldDeclaration
                    {
                    pushFollow(FOLLOW_fieldDeclaration_in_memberDeclaration2977);
                    t3=fieldDeclaration();

                    state._fsp--;
                    if (state.failed) return ret;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                              if(t2 != null){
                                  list.add(t1);
                                  if(t2 != null)
                                      list.add(t2);
                                  ret = new StringDeclaration(list);
                              }
                              else if (t3 != null){
                                  list.add(new NameID(t1.toString()));
                                  List l = t3.getSpecifiers();
                                  if(l != null){
                                      for(int i=0; i<l.size(); i++)
                                          list.add(l.get(i));
                                  }

                                  VariableDeclaration vdecl = new VariableDeclaration(list, (Declarator)t3.getDeclarator(0));
                                  for(int i=1; i<t3.getNumDeclarators(); i++)
                                      vdecl.addDeclarator((Declarator)t3.getDeclarator(i));
                                  ret = vdecl;
                              }

                              //if(t2.containsKey("body")){
                              //    ProcedureDeclarator pdec = new ProcedureDeclarator((IDExpression)t2.get("id"), (List)t2.get("param"));
                              //    ret_decl = new Procedure(t1, pdec, (CompoundStatement)t2.get("body"));
                              //}
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, memberDeclaration_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "memberDeclaration"


    // $ANTLR start "genericMethodOrConstructorDecl"
    // src/cedp/src2src/frontend/java/Java.g:1072:1: genericMethodOrConstructorDecl returns [Declaration ret_decl] : t1= typeParameters t2= genericMethodOrConstructorRest ;
    public final Declaration genericMethodOrConstructorDecl() throws RecognitionException {
        Declaration ret_decl = null;
        int genericMethodOrConstructorDecl_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("genericMethodOrConstructorDecl"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1074:5: (t1= typeParameters t2= genericMethodOrConstructorRest )
            // src/cedp/src2src/frontend/java/Java.g:1074:9: t1= typeParameters t2= genericMethodOrConstructorRest
            {
            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl3028);
            t1=typeParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl3032);
            t2=genericMethodOrConstructorRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(t2);
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, genericMethodOrConstructorDecl_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "genericMethodOrConstructorDecl"


    // $ANTLR start "genericMethodOrConstructorRest"
    // src/cedp/src2src/frontend/java/Java.g:1082:1: genericMethodOrConstructorRest returns [Declaration ret_decl] : ( (t1= type | 'void' ) t2= Identifier t3= methodDeclaratorRest | t4= Identifier t5= constructorDeclaratorRest );
    public final Declaration genericMethodOrConstructorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int genericMethodOrConstructorRest_StartIndex = input.index();
        Token t2=null;
        Token t4=null;
        Declaration t1 = null;

        Declaration t3 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("genericMethodOrConstructorRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1084:5: ( (t1= type | 'void' ) t2= Identifier t3= methodDeclaratorRest | t4= Identifier t5= constructorDeclaratorRest )
            int alt43=2;
            alt43 = dfa43.predict(input);
            switch (alt43) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1084:9: (t1= type | 'void' ) t2= Identifier t3= methodDeclaratorRest
                    {
                    // src/cedp/src2src/frontend/java/Java.g:1084:9: (t1= type | 'void' )
                    int alt42=2;
                    alt42 = dfa42.predict(input);
                    switch (alt42) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1084:10: t1= type
                            {
                            pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest3082);
                            t1=type();

                            state._fsp--;
                            if (state.failed) return ret_decl;

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:1084:20: 'void'
                            {
                            match(input,47,FOLLOW_47_in_genericMethodOrConstructorRest3086); if (state.failed) return ret_decl;

                            }
                            break;

                    }

                    t2=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest3091); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest3095);
                    t3=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      if(t1 != null)
                                          list.add(t1);
                                      else
                                          list.add(new StringDeclaration("void"));
                                      list.add(new StringDeclaration((t2!=null?t2.getText():null)));
                                      list.add(t3);
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1094:9: t4= Identifier t5= constructorDeclaratorRest
                    {
                    t4=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest3121); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest3125);
                    t5=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration((t4!=null?t4.getText():null)));
                                      list.add(t5);
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, genericMethodOrConstructorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "genericMethodOrConstructorRest"


    // $ANTLR start "methodDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:1102:1: methodDeclaration returns [Declaration ret_decl] : Identifier t1= methodDeclaratorRest ;
    public final Declaration methodDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int methodDeclaration_StartIndex = input.index();
        Token Identifier8=null;
        Declaration t1 = null;


         if(dFlag) System.out.println("methodDeclaration"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1104:5: ( Identifier t1= methodDeclaratorRest )
            // src/cedp/src2src/frontend/java/Java.g:1104:9: Identifier t1= methodDeclaratorRest
            {
            Identifier8=(Token)match(input,Identifier,FOLLOW_Identifier_in_methodDeclaration3172); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration3176);
            t1=methodDeclaratorRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              //hash = t1;
                              //hash.put("id", new NameID((Identifier8!=null?Identifier8.getText():null)));
                              list.add(new StringDeclaration((Identifier8!=null?Identifier8.getText():null)));
                              list.add(t1);
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, methodDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "methodDeclaration"


    // $ANTLR start "fieldDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:1114:1: fieldDeclaration returns [VariableDeclaration ret] : t1= variableDeclarators ';' ;
    public final VariableDeclaration fieldDeclaration() throws RecognitionException {
        VariableDeclaration ret = null;
        int fieldDeclaration_StartIndex = input.index();
        List t1 = null;


         if(dFlag) System.out.println("fieldDeclaration"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1116:5: (t1= variableDeclarators ';' )
            // src/cedp/src2src/frontend/java/Java.g:1116:9: t1= variableDeclarators ';'
            {
            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration3225);
            t1=variableDeclarators();

            state._fsp--;
            if (state.failed) return ret;
            match(input,26,FOLLOW_26_in_fieldDeclaration3227); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              if(t1 != null && t1.size() > 0){
                                  ret = new VariableDeclaration((Declarator)t1.get(0));
                                  for(int i=1; i<t1.size(); i++)
                                      ret.addDeclarator((Declarator)t1.get(i));
                              }
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, fieldDeclaration_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "fieldDeclaration"


    // $ANTLR start "interfaceBodyDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:1126:1: interfaceBodyDeclaration returns [Declaration ret_decl] : (t1= modifiers t2= interfaceMemberDecl | ';' );
    public final Declaration interfaceBodyDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceBodyDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("interfaceBodyDeclaration"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1128:5: (t1= modifiers t2= interfaceMemberDecl | ';' )
            int alt44=2;
            alt44 = dfa44.predict(input);
            switch (alt44) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1128:9: t1= modifiers t2= interfaceMemberDecl
                    {
                    pushFollow(FOLLOW_modifiers_in_interfaceBodyDeclaration3276);
                    t1=modifiers();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration3280);
                    t2=interfaceMemberDecl();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      list.add(t2);
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1134:9: ';'
                    {
                    match(input,26,FOLLOW_26_in_interfaceBodyDeclaration3304); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration(";");
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, interfaceBodyDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceBodyDeclaration"


    // $ANTLR start "interfaceMemberDecl"
    // src/cedp/src2src/frontend/java/Java.g:1140:1: interfaceMemberDecl returns [Declaration ret_decl] : (t1= interfaceMethodOrFieldDecl | t2= interfaceGenericMethodDecl | 'void' Identifier t3= voidInterfaceMethodDeclaratorRest | t4= interfaceDeclaration | t5= classDeclaration );
    public final Declaration interfaceMemberDecl() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceMemberDecl_StartIndex = input.index();
        Token Identifier9=null;
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("interfaceMemberDecl"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1142:5: (t1= interfaceMethodOrFieldDecl | t2= interfaceGenericMethodDecl | 'void' Identifier t3= voidInterfaceMethodDeclaratorRest | t4= interfaceDeclaration | t5= classDeclaration )
            int alt45=5;
            alt45 = dfa45.predict(input);
            switch (alt45) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1142:9: t1= interfaceMethodOrFieldDecl
                    {
                    pushFollow(FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl3353);
                    t1=interfaceMethodOrFieldDecl();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1146:9: t2= interfaceGenericMethodDecl
                    {
                    pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl3379);
                    t2=interfaceGenericMethodDecl();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t2;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:1150:9: 'void' Identifier t3= voidInterfaceMethodDeclaratorRest
                    {
                    match(input,47,FOLLOW_47_in_interfaceMemberDecl3403); if (state.failed) return ret_decl;
                    Identifier9=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceMemberDecl3405); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl3409);
                    t3=voidInterfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("void"));
                                      list.add(new StringDeclaration((Identifier9!=null?Identifier9.getText():null)));
                                      list.add(t3);
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:1157:9: t4= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_interfaceMemberDecl3435);
                    t4=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t4;
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:1161:9: t5= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_interfaceMemberDecl3461);
                    t5=classDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t5;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, interfaceMemberDecl_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceMemberDecl"


    // $ANTLR start "interfaceMethodOrFieldDecl"
    // src/cedp/src2src/frontend/java/Java.g:1167:1: interfaceMethodOrFieldDecl returns [Declaration ret_decl] : t1= type Identifier t2= interfaceMethodOrFieldRest ;
    public final Declaration interfaceMethodOrFieldDecl() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceMethodOrFieldDecl_StartIndex = input.index();
        Token Identifier10=null;
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("interfaceMethodOrFieldDecl"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1169:5: (t1= type Identifier t2= interfaceMethodOrFieldRest )
            // src/cedp/src2src/frontend/java/Java.g:1169:9: t1= type Identifier t2= interfaceMethodOrFieldRest
            {
            pushFollow(FOLLOW_type_in_interfaceMethodOrFieldDecl3510);
            t1=type();

            state._fsp--;
            if (state.failed) return ret_decl;
            Identifier10=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceMethodOrFieldDecl3512); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl3516);
            t2=interfaceMethodOrFieldRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(new StringDeclaration((Identifier10!=null?Identifier10.getText():null)));
                              list.add(t3);
                              ret_decl = new StringDeclaration(list);
                              //new Declarator()
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, interfaceMethodOrFieldDecl_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceMethodOrFieldDecl"


    // $ANTLR start "interfaceMethodOrFieldRest"
    // src/cedp/src2src/frontend/java/Java.g:1179:1: interfaceMethodOrFieldRest returns [Declaration ret_decl] : (t1= constantDeclaratorsRest ';' | t2= interfaceMethodDeclaratorRest );
    public final Declaration interfaceMethodOrFieldRest() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceMethodOrFieldRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("interfaceMethodOrFieldRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1181:5: (t1= constantDeclaratorsRest ';' | t2= interfaceMethodDeclaratorRest )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==48||LA46_0==51) ) {
                alt46=1;
            }
            else if ( (LA46_0==58) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1181:9: t1= constantDeclaratorsRest ';'
                    {
                    pushFollow(FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest3565);
                    t1=constantDeclaratorsRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    match(input,26,FOLLOW_26_in_interfaceMethodOrFieldRest3567); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      list.add(new StringDeclaration(";"));
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1187:9: t2= interfaceMethodDeclaratorRest
                    {
                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest3593);
                    t2=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t2;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, interfaceMethodOrFieldRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceMethodOrFieldRest"


    // $ANTLR start "methodDeclaratorRest"
    // src/cedp/src2src/frontend/java/Java.g:1193:1: methodDeclaratorRest returns [Declaration ret_decl] : t1= formalParameters ( '[' ']' )* ( 'throws' t2= qualifiedNameList )? (t3= methodBody | ';' ) ;
    public final Declaration methodDeclaratorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int methodDeclaratorRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("methodDeclaratorRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1195:5: (t1= formalParameters ( '[' ']' )* ( 'throws' t2= qualifiedNameList )? (t3= methodBody | ';' ) )
            // src/cedp/src2src/frontend/java/Java.g:1195:9: t1= formalParameters ( '[' ']' )* ( 'throws' t2= qualifiedNameList )? (t3= methodBody | ';' )
            {
            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest3642);
            t1=formalParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:1199:9: ( '[' ']' )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==48) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1199:10: '[' ']'
            	    {
            	    match(input,48,FOLLOW_48_in_methodDeclaratorRest3667); if (state.failed) return ret_decl;
            	    match(input,49,FOLLOW_49_in_methodDeclaratorRest3669); if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration("[]"));
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);

            // src/cedp/src2src/frontend/java/Java.g:1204:9: ( 'throws' t2= qualifiedNameList )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==50) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1204:10: 'throws' t2= qualifiedNameList
                    {
                    match(input,50,FOLLOW_50_in_methodDeclaratorRest3705); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_qualifiedNameList_in_methodDeclaratorRest3709);
                    t2=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("throws"));
                                      list.add(t2);
                      //                hash.put("throw", ExceptionSpecifier = new ExceptionSpecification(t2));
                                  
                    }

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:1211:9: (t3= methodBody | ';' )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==44) ) {
                alt49=1;
            }
            else if ( (LA49_0==26) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1211:13: t3= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_methodDeclaratorRest3750);
                    t3=methodBody();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t3);
                      //                hash.put("body", t3);
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1217:13: ';'
                    {
                    match(input,26,FOLLOW_26_in_methodDeclaratorRest3778); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration(";"));
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, methodDeclaratorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "methodDeclaratorRest"


    // $ANTLR start "voidMethodDeclaratorRest"
    // src/cedp/src2src/frontend/java/Java.g:1225:1: voidMethodDeclaratorRest returns [Declaration ret_decl] : t1= formalParameters ( 'throws' t2= qualifiedNameList )? (t3= methodBody | ';' ) ;
    public final Declaration voidMethodDeclaratorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int voidMethodDeclaratorRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("voidMethodDeclaratorRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1227:5: (t1= formalParameters ( 'throws' t2= qualifiedNameList )? (t3= methodBody | ';' ) )
            // src/cedp/src2src/frontend/java/Java.g:1227:9: t1= formalParameters ( 'throws' t2= qualifiedNameList )? (t3= methodBody | ';' )
            {
            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest3837);
            t1=formalParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
              //                hash.put("param", t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:1232:9: ( 'throws' t2= qualifiedNameList )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==50) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1232:10: 'throws' t2= qualifiedNameList
                    {
                    match(input,50,FOLLOW_50_in_voidMethodDeclaratorRest3862); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest3866);
                    t2=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("throws"));
                                      list.add(t2);
                                      //hash.put("throw", ExceptionSpecifier = new ExceptionSpecification(t2));
                                  
                    }

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:1239:9: (t3= methodBody | ';' )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==44) ) {
                alt51=1;
            }
            else if ( (LA51_0==26) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1239:13: t3= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_voidMethodDeclaratorRest3907);
                    t3=methodBody();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t3);
                                      ret_decl = new StringDeclaration(list);
                      //                hash.put("body", t3);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1245:13: ';'
                    {
                    match(input,26,FOLLOW_26_in_voidMethodDeclaratorRest3935); if (state.failed) return ret_decl;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, voidMethodDeclaratorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "voidMethodDeclaratorRest"


    // $ANTLR start "interfaceMethodDeclaratorRest"
    // src/cedp/src2src/frontend/java/Java.g:1249:1: interfaceMethodDeclaratorRest returns [Declaration ret_decl] : t1= formalParameters ( '[' ']' )* ( 'throws' t2= qualifiedNameList )? ';' ;
    public final Declaration interfaceMethodDeclaratorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceMethodDeclaratorRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("interfaceMethodDeclaratorRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1251:5: (t1= formalParameters ( '[' ']' )* ( 'throws' t2= qualifiedNameList )? ';' )
            // src/cedp/src2src/frontend/java/Java.g:1251:9: t1= formalParameters ( '[' ']' )* ( 'throws' t2= qualifiedNameList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest3980);
            t1=formalParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              //hash.put("param", t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:1256:9: ( '[' ']' )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==48) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1256:10: '[' ']'
            	    {
            	    match(input,48,FOLLOW_48_in_interfaceMethodDeclaratorRest4005); if (state.failed) return ret_decl;
            	    match(input,49,FOLLOW_49_in_interfaceMethodDeclaratorRest4007); if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration("[]"));
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);

            // src/cedp/src2src/frontend/java/Java.g:1261:9: ( 'throws' t2= qualifiedNameList )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==50) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1261:10: 'throws' t2= qualifiedNameList
                    {
                    match(input,50,FOLLOW_50_in_interfaceMethodDeclaratorRest4043); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest4047);
                    t2=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("throws"));
                                      list.add(t2);
                                      //hash.put("throw", ExceptionSpecifier = new ExceptionSpecification(t2));
                                  
                    }

                    }
                    break;

            }

            match(input,26,FOLLOW_26_in_interfaceMethodDeclaratorRest4074); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration(";"));
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, interfaceMethodDeclaratorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceMethodDeclaratorRest"


    // $ANTLR start "interfaceGenericMethodDecl"
    // src/cedp/src2src/frontend/java/Java.g:1275:1: interfaceGenericMethodDecl returns [Declaration ret_decl] : t1= typeParameters (t2= type | 'void' ) Identifier t3= interfaceMethodDeclaratorRest ;
    public final Declaration interfaceGenericMethodDecl() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceGenericMethodDecl_StartIndex = input.index();
        Token Identifier11=null;
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("interfaceGenericMethodDecl"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1277:5: (t1= typeParameters (t2= type | 'void' ) Identifier t3= interfaceMethodDeclaratorRest )
            // src/cedp/src2src/frontend/java/Java.g:1277:9: t1= typeParameters (t2= type | 'void' ) Identifier t3= interfaceMethodDeclaratorRest
            {
            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl4124);
            t1=typeParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1277:27: (t2= type | 'void' )
            int alt54=2;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1277:28: t2= type
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl4129);
                    t2=type();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1277:38: 'void'
                    {
                    match(input,47,FOLLOW_47_in_interfaceGenericMethodDecl4133); if (state.failed) return ret_decl;

                    }
                    break;

            }

            Identifier11=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl4136); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl4140);
            t3=interfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              if(t2 != null)
                                  list.add(t2);
                              else
                                  list.add(new StringDeclaration("void"));
                              list.add(new StringDeclaration((Identifier11!=null?Identifier11.getText():null)));
                              list.add(t3);
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, interfaceGenericMethodDecl_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceGenericMethodDecl"


    // $ANTLR start "voidInterfaceMethodDeclaratorRest"
    // src/cedp/src2src/frontend/java/Java.g:1290:1: voidInterfaceMethodDeclaratorRest returns [Declaration ret_decl] : t1= formalParameters ( 'throws' t2= qualifiedNameList )? ';' ;
    public final Declaration voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int voidInterfaceMethodDeclaratorRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("voidInterfaceMethodDeclaratorRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1292:5: (t1= formalParameters ( 'throws' t2= qualifiedNameList )? ';' )
            // src/cedp/src2src/frontend/java/Java.g:1292:9: t1= formalParameters ( 'throws' t2= qualifiedNameList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest4189);
            t1=formalParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1292:29: ( 'throws' t2= qualifiedNameList )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==50) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1292:30: 'throws' t2= qualifiedNameList
                    {
                    match(input,50,FOLLOW_50_in_voidInterfaceMethodDeclaratorRest4192); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest4196);
                    t2=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            match(input,26,FOLLOW_26_in_voidInterfaceMethodDeclaratorRest4200); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              if(t2 != null)
                                  list.add(t2);
                              else
                                  list.add(new StringDeclaration("throws"));
                              list.add(new StringDeclaration(";"));
                              ret_decl = new StringDeclaration(list);
                              //hash.put("param", t1);
                              //hash.put("throw", ExceptionSpecifier = new ExceptionSpecification(t2));
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, voidInterfaceMethodDeclaratorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "voidInterfaceMethodDeclaratorRest"


    // $ANTLR start "constructorDeclaratorRest"
    // src/cedp/src2src/frontend/java/Java.g:1306:1: constructorDeclaratorRest returns [Declaration ret_decl] : t1= formalParameters ( 'throws' t2= qualifiedNameList )? t3= constructorBody ;
    public final Declaration constructorDeclaratorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int constructorDeclaratorRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("constructorDeclaratorRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1308:5: (t1= formalParameters ( 'throws' t2= qualifiedNameList )? t3= constructorBody )
            // src/cedp/src2src/frontend/java/Java.g:1308:9: t1= formalParameters ( 'throws' t2= qualifiedNameList )? t3= constructorBody
            {
            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest4249);
            t1=formalParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1308:29: ( 'throws' t2= qualifiedNameList )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==50) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1308:30: 'throws' t2= qualifiedNameList
                    {
                    match(input,50,FOLLOW_50_in_constructorDeclaratorRest4252); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_qualifiedNameList_in_constructorDeclaratorRest4256);
                    t2=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            pushFollow(FOLLOW_constructorBody_in_constructorDeclaratorRest4262);
            t3=constructorBody();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              if(t2 != null)
                                  list.add(t2);
                              else
                                  list.add(new StringDeclaration("throws"));
                              list.add(new StringDeclaration(";"));
                              ret_decl = new StringDeclaration(list);

                              //hash.put("param", t1);
                              //hash.put("throw", t2);
                              //if(t3 != null)
                              //    hash.put("body", t3);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, constructorDeclaratorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "constructorDeclaratorRest"


    // $ANTLR start "constantDeclarator"
    // src/cedp/src2src/frontend/java/Java.g:1325:1: constantDeclarator returns [Declaration ret_decl] : Identifier t1= constantDeclaratorRest ;
    public final Declaration constantDeclarator() throws RecognitionException {
        Declaration ret_decl = null;
        int constantDeclarator_StartIndex = input.index();
        Token Identifier12=null;
        Declaration t1 = null;


         if(dFlag) System.out.println("constantDeclarator"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1327:5: ( Identifier t1= constantDeclaratorRest )
            // src/cedp/src2src/frontend/java/Java.g:1327:9: Identifier t1= constantDeclaratorRest
            {
            Identifier12=(Token)match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator4309); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclarator4313);
            t1=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration((Identifier12!=null?Identifier12.getText():null)));
                              list.add(t1);
                              ret_decl = new StringDeclaration(list);
                              //ret_decl = new VariableDeclarator(new NameID((Identifier12!=null?Identifier12.getText():null)));
                              //ret_decl.setInitializer(t1);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, constantDeclarator_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "constantDeclarator"


    // $ANTLR start "variableDeclarators"
    // src/cedp/src2src/frontend/java/Java.g:1337:1: variableDeclarators returns [List ret] : t1= variableDeclarator ( ',' t2= variableDeclarator )* ;
    public final List variableDeclarators() throws RecognitionException {
        List ret = null;
        int variableDeclarators_StartIndex = input.index();
        VariableDeclarator t1 = null;

        VariableDeclarator t2 = null;


         if(dFlag) System.out.println("variableDeclarators"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1339:5: (t1= variableDeclarator ( ',' t2= variableDeclarator )* )
            // src/cedp/src2src/frontend/java/Java.g:1339:9: t1= variableDeclarator ( ',' t2= variableDeclarator )*
            {
            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators4361);
            t1=variableDeclarator();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               list.add(t1); 
            }
            // src/cedp/src2src/frontend/java/Java.g:1340:9: ( ',' t2= variableDeclarator )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==41) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1340:10: ',' t2= variableDeclarator
            	    {
            	    match(input,41,FOLLOW_41_in_variableDeclarators4374); if (state.failed) return ret;
            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators4378);
            	    t2=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       list.add(t2); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, variableDeclarators_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "variableDeclarators"


    // $ANTLR start "variableDeclarator"
    // src/cedp/src2src/frontend/java/Java.g:1344:1: variableDeclarator returns [VariableDeclarator ret] : t1= variableDeclaratorId ( '=' t2= variableInitializer )? ;
    public final VariableDeclarator variableDeclarator() throws RecognitionException {
        VariableDeclarator ret = null;
        int variableDeclarator_StartIndex = input.index();
        NameID t1 = null;

        Initializer t2 = null;


         if(dFlag) System.out.println("variableDeclarator"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1346:5: (t1= variableDeclaratorId ( '=' t2= variableInitializer )? )
            // src/cedp/src2src/frontend/java/Java.g:1346:9: t1= variableDeclaratorId ( '=' t2= variableInitializer )?
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_variableDeclarator4419);
            t1=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:1346:33: ( '=' t2= variableInitializer )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==51) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1346:34: '=' t2= variableInitializer
                    {
                    match(input,51,FOLLOW_51_in_variableDeclarator4422); if (state.failed) return ret;
                    pushFollow(FOLLOW_variableInitializer_in_variableDeclarator4426);
                    t2=variableInitializer();

                    state._fsp--;
                    if (state.failed) return ret;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                              ret = new VariableDeclarator(t1);
                              if(t2 != null)
                                  ret.setInitializer(t2);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, variableDeclarator_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "variableDeclarator"


    // $ANTLR start "constantDeclaratorsRest"
    // src/cedp/src2src/frontend/java/Java.g:1355:1: constantDeclaratorsRest returns [Declaration ret_decl] : t1= constantDeclaratorRest ( ',' t2= constantDeclarator )* ;
    public final Declaration constantDeclaratorsRest() throws RecognitionException {
        Declaration ret_decl = null;
        int constantDeclaratorsRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("constantDeclaratorsRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1357:5: (t1= constantDeclaratorRest ( ',' t2= constantDeclarator )* )
            // src/cedp/src2src/frontend/java/Java.g:1357:9: t1= constantDeclaratorRest ( ',' t2= constantDeclarator )*
            {
            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest4480);
            t1=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1357:35: ( ',' t2= constantDeclarator )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==41) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1357:36: ',' t2= constantDeclarator
            	    {
            	    match(input,41,FOLLOW_41_in_constantDeclaratorsRest4483); if (state.failed) return ret_decl;
            	    pushFollow(FOLLOW_constantDeclarator_in_constantDeclaratorsRest4487);
            	    t2=constantDeclarator();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration(","));
            	                      list.add(t2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                              list.addFirst(t1);
                              ret_decl = new StringDeclaration(list);
                              //list.add(new Initializer(t1));
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, constantDeclaratorsRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "constantDeclaratorsRest"


    // $ANTLR start "constantDeclaratorRest"
    // src/cedp/src2src/frontend/java/Java.g:1371:1: constantDeclaratorRest returns [Declaration ret_decl] : ( '[' ']' )* '=' t1= variableInitializer ;
    public final Declaration constantDeclaratorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int constantDeclaratorRest_StartIndex = input.index();
        Initializer t1 = null;


         if(dFlag) System.out.println("constantDeclaratorRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1373:5: ( ( '[' ']' )* '=' t1= variableInitializer )
            // src/cedp/src2src/frontend/java/Java.g:1373:9: ( '[' ']' )* '=' t1= variableInitializer
            {
            // src/cedp/src2src/frontend/java/Java.g:1373:9: ( '[' ']' )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==48) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1373:10: '[' ']'
            	    {
            	    match(input,48,FOLLOW_48_in_constantDeclaratorRest4562); if (state.failed) return ret_decl;
            	    match(input,49,FOLLOW_49_in_constantDeclaratorRest4564); if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration("[]"));
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            match(input,51,FOLLOW_51_in_constantDeclaratorRest4591); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_variableInitializer_in_constantDeclaratorRest4595);
            t1=variableInitializer();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("="));
                              list.add(t1);
                              ret_decl = new StringDeclaration(list);
                              //ret_init = new Initializer(t1);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, constantDeclaratorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "constantDeclaratorRest"


    // $ANTLR start "variableDeclaratorId"
    // src/cedp/src2src/frontend/java/Java.g:1387:1: variableDeclaratorId returns [NameID ret] : Identifier ( '[' ']' )* ;
    public final NameID variableDeclaratorId() throws RecognitionException {
        NameID ret = null;
        int variableDeclaratorId_StartIndex = input.index();
        Token Identifier13=null;

         if(dFlag) System.out.println("variableDeclaratorId"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1389:5: ( Identifier ( '[' ']' )* )
            // src/cedp/src2src/frontend/java/Java.g:1389:9: Identifier ( '[' ']' )*
            {
            Identifier13=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaratorId4643); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              ret = new NameID((Identifier13!=null?Identifier13.getText():null));
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:1393:9: ( '[' ']' )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==48) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1393:10: '[' ']'
            	    {
            	    match(input,48,FOLLOW_48_in_variableDeclaratorId4668); if (state.failed) return ret;
            	    match(input,49,FOLLOW_49_in_variableDeclaratorId4670); if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      ret.AddNullPointer();
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, variableDeclaratorId_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "variableDeclaratorId"


    // $ANTLR start "variableInitializer"
    // src/cedp/src2src/frontend/java/Java.g:1401:1: variableInitializer returns [Initializer ret] : (t1= arrayInitializer | t2= expression );
    public final Initializer variableInitializer() throws RecognitionException {
        Initializer ret = null;
        int variableInitializer_StartIndex = input.index();
        Declaration t1 = null;

        Expression t2 = null;


         if(dFlag) System.out.println("variableInitializer"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1403:5: (t1= arrayInitializer | t2= expression )
            int alt62=2;
            alt62 = dfa62.predict(input);
            switch (alt62) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1403:9: t1= arrayInitializer
                    {
                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer4732);
                    t1=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1407:9: t2= expression
                    {
                    pushFollow(FOLLOW_expression_in_variableInitializer4758);
                    t2=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      if(t2 != null)
                                          ret = new Initializer(t2);
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, variableInitializer_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "variableInitializer"


    // $ANTLR start "arrayInitializer"
    // src/cedp/src2src/frontend/java/Java.g:1415:1: arrayInitializer returns [Declaration ret_decl] : '{' (t1= variableInitializer ( ',' t2= variableInitializer )* ( ',' )? )? '}' ;
    public final Declaration arrayInitializer() throws RecognitionException {
        Declaration ret_decl = null;
        int arrayInitializer_StartIndex = input.index();
        Initializer t1 = null;

        Initializer t2 = null;


         if(dFlag) System.out.println("arrayInitializer"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1417:5: ( '{' (t1= variableInitializer ( ',' t2= variableInitializer )* ( ',' )? )? '}' )
            // src/cedp/src2src/frontend/java/Java.g:1417:9: '{' (t1= variableInitializer ( ',' t2= variableInitializer )* ( ',' )? )? '}'
            {
            match(input,44,FOLLOW_44_in_arrayInitializer4807); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1417:13: (t1= variableInitializer ( ',' t2= variableInitializer )* ( ',' )? )?
            int alt65=2;
            alt65 = dfa65.predict(input);
            switch (alt65) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1417:14: t1= variableInitializer ( ',' t2= variableInitializer )* ( ',' )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer4812);
                    t1=variableInitializer();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    // src/cedp/src2src/frontend/java/Java.g:1418:10: ( ',' t2= variableInitializer )*
                    loop63:
                    do {
                        int alt63=2;
                        alt63 = dfa63.predict(input);
                        switch (alt63) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:1418:11: ',' t2= variableInitializer
                    	    {
                    	    match(input,41,FOLLOW_41_in_arrayInitializer4824); if (state.failed) return ret_decl;
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer4828);
                    	    t2=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return ret_decl;
                    	    if ( state.backtracking==0 ) {

                    	                          list.add(new StringDeclaration(","));
                    	                          list.add(t2);
                    	                          //List tlist = variableInitializer.getChildren();
                    	                          //for(int i=0; i<tlist.size(); i++)
                    	                          //list.add(tlist.get(i));
                    	                      
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop63;
                        }
                    } while (true);

                    // src/cedp/src2src/frontend/java/Java.g:1426:12: ( ',' )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==41) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1426:13: ','
                            {
                            match(input,41,FOLLOW_41_in_arrayInitializer4860); if (state.failed) return ret_decl;
                            if ( state.backtracking==0 ) {

                                                  list.add(new StringDeclaration(","));
                                              
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            match(input,45,FOLLOW_45_in_arrayInitializer4894); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                                  if(t1 != null)
                                      list.addFirst(t1);
                                  list.addFirst(new StringDeclaration("{"));
                                  list.addLast(new StringDeclaration("}"));
                                  ret_decl = new StringDeclaration(list);

                                  //List tlist = variableInitializer.getChildren();
                                  //for(int i=0; i<tlist.size(); i++)
                                  //    list.add(tlist.get(i));
                                  //init = new Initializer(list);
                              
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, arrayInitializer_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "arrayInitializer"


    // $ANTLR start "modifier"
    // src/cedp/src2src/frontend/java/Java.g:1445:1: modifier returns [Declaration ret_decl] : (t1= annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );
    public final Declaration modifier() throws RecognitionException {
        Declaration ret_decl = null;
        int modifier_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("modifier"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1447:5: (t1= annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )
            int alt66=12;
            alt66 = dfa66.predict(input);
            switch (alt66) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1447:9: t1= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_modifier4947);
                    t1=annotation();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t1;
                                      //type = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1452:9: 'public'
                    {
                    match(input,31,FOLLOW_31_in_modifier4971); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.PUBLIC;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:1457:9: 'protected'
                    {
                    match(input,32,FOLLOW_32_in_modifier4995); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.PROTECTED;
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:1462:9: 'private'
                    {
                    match(input,33,FOLLOW_33_in_modifier5019); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.PRIVATE;
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:1467:9: 'static'
                    {
                    match(input,28,FOLLOW_28_in_modifier5043); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.STATIC;
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:1472:9: 'abstract'
                    {
                    match(input,34,FOLLOW_34_in_modifier5067); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.ABSTRACT;
                                  
                    }

                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:1477:9: 'final'
                    {
                    match(input,35,FOLLOW_35_in_modifier5091); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.FINAL;
                                  
                    }

                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:1482:9: 'native'
                    {
                    match(input,52,FOLLOW_52_in_modifier5115); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.NATIVE;
                                  
                    }

                    }
                    break;
                case 9 :
                    // src/cedp/src2src/frontend/java/Java.g:1487:9: 'synchronized'
                    {
                    match(input,53,FOLLOW_53_in_modifier5139); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.SYNCHRONIZED;
                                  
                    }

                    }
                    break;
                case 10 :
                    // src/cedp/src2src/frontend/java/Java.g:1492:9: 'transient'
                    {
                    match(input,54,FOLLOW_54_in_modifier5163); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.TRANSIENT;
                                  
                    }

                    }
                    break;
                case 11 :
                    // src/cedp/src2src/frontend/java/Java.g:1497:9: 'volatile'
                    {
                    match(input,55,FOLLOW_55_in_modifier5187); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.VOLATILE;
                                  
                    }

                    }
                    break;
                case 12 :
                    // src/cedp/src2src/frontend/java/Java.g:1502:9: 'strictfp'
                    {
                    match(input,36,FOLLOW_36_in_modifier5211); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.STRICTFP;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, modifier_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "modifier"


    // $ANTLR start "packageOrTypeName"
    // src/cedp/src2src/frontend/java/Java.g:1509:1: packageOrTypeName : t1= qualifiedName ;
    public final void packageOrTypeName() throws RecognitionException {
        int packageOrTypeName_StartIndex = input.index();
        JavaParser.qualifiedName_return t1 = null;


         if(dFlag) System.out.println("packageOrTypeName"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return ; }
            // src/cedp/src2src/frontend/java/Java.g:1511:5: (t1= qualifiedName )
            // src/cedp/src2src/frontend/java/Java.g:1511:9: t1= qualifiedName
            {
            pushFollow(FOLLOW_qualifiedName_in_packageOrTypeName5257);
            t1=qualifiedName();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, packageOrTypeName_StartIndex); }
        }
        return ;
    }
    // $ANTLR end "packageOrTypeName"


    // $ANTLR start "enumConstantName"
    // src/cedp/src2src/frontend/java/Java.g:1516:1: enumConstantName returns [Declaration ret_decl] : t1= Identifier ;
    public final Declaration enumConstantName() throws RecognitionException {
        Declaration ret_decl = null;
        int enumConstantName_StartIndex = input.index();
        Token t1=null;

         if(dFlag) System.out.println("enumConstantName"); Identifier id_temp = null; LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1518:5: (t1= Identifier )
            // src/cedp/src2src/frontend/java/Java.g:1518:9: t1= Identifier
            {
            t1=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstantName5295); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {
               
                              ret_decl = new StringDeclaration((t1!=null?t1.getText():null));
                              //id = new Identifier(id_temp);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, enumConstantName_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "enumConstantName"


    // $ANTLR start "typeName"
    // src/cedp/src2src/frontend/java/Java.g:1525:1: typeName : qualifiedName ;
    public final void typeName() throws RecognitionException {
        int typeName_StartIndex = input.index();
         if(dFlag) System.out.println("typeName"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return ; }
            // src/cedp/src2src/frontend/java/Java.g:1527:5: ( qualifiedName )
            // src/cedp/src2src/frontend/java/Java.g:1527:9: qualifiedName
            {
            pushFollow(FOLLOW_qualifiedName_in_typeName5339);
            qualifiedName();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, typeName_StartIndex); }
        }
        return ;
    }
    // $ANTLR end "typeName"


    // $ANTLR start "type"
    // src/cedp/src2src/frontend/java/Java.g:1530:1: type returns [Declaration ret] : (t1= classOrInterfaceType ( '[' ']' )* | t2= primitiveType ( '[' ']' )* );
    public final Declaration type() throws RecognitionException {
        Declaration ret = null;
        int type_StartIndex = input.index();
        Declaration t1 = null;

        Specifier t2 = null;


         if(dFlag) System.out.println("type"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1533:5: (t1= classOrInterfaceType ( '[' ']' )* | t2= primitiveType ( '[' ']' )* )
            int alt69=2;
            alt69 = dfa69.predict(input);
            switch (alt69) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1533:7: t1= classOrInterfaceType ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_classOrInterfaceType_in_type5381);
                    t1=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                  list.add(t1);
                                  //if(t1 != null)
                                  //    types.add(t1);
                              
                    }
                    // src/cedp/src2src/frontend/java/Java.g:1539:7: ( '[' ']' )*
                    loop67:
                    do {
                        int alt67=2;
                        alt67 = dfa67.predict(input);
                        switch (alt67) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:1539:8: '[' ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_type5400); if (state.failed) return ret;
                    	    match(input,49,FOLLOW_49_in_type5402); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("[]"));
                    	                      //types.add(new ArraySpecifier());
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1545:7: t2= primitiveType ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type5435);
                    t2=primitiveType();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t2);
                                      //types.add(t2); /* TODO ('[' ']')* */
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:1550:8: ( '[' ']' )*
                    loop68:
                    do {
                        int alt68=2;
                        alt68 = dfa68.predict(input);
                        switch (alt68) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:1550:9: '[' ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_type5459); if (state.failed) return ret;
                    	    match(input,49,FOLLOW_49_in_type5461); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("[]"));
                    	      //                types.add(new ArraySpecifier());
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop68;
                        }
                    } while (true);


                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, type_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "type"


    // $ANTLR start "classOrInterfaceType"
    // src/cedp/src2src/frontend/java/Java.g:1558:1: classOrInterfaceType returns [Declaration ret] : t1= Identifier (t2= typeArguments )? ( '.' t3= Identifier (t4= typeArguments )? )* ;
    public final Declaration classOrInterfaceType() throws RecognitionException {
        Declaration ret = null;
        int classOrInterfaceType_StartIndex = input.index();
        Token t1=null;
        Token t3=null;
        Declaration t2 = null;

        Declaration t4 = null;


         if(dFlag) System.out.println("classOrInterfaceType"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1561:5: (t1= Identifier (t2= typeArguments )? ( '.' t3= Identifier (t4= typeArguments )? )* )
            // src/cedp/src2src/frontend/java/Java.g:1561:7: t1= Identifier (t2= typeArguments )? ( '.' t3= Identifier (t4= typeArguments )? )*
            {
            t1=(Token)match(input,Identifier,FOLLOW_Identifier_in_classOrInterfaceType5527); if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:1561:21: (t2= typeArguments )?
            int alt70=2;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1561:22: t2= typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType5532);
                    t2=typeArguments();

                    state._fsp--;
                    if (state.failed) return ret;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                          list.add(new StringDeclaration((t1!=null?t1.getText():null)));
                          if(t2 != null)
                              list.add(t2);
                      
            }
            // src/cedp/src2src/frontend/java/Java.g:1567:7: ( '.' t3= Identifier (t4= typeArguments )? )*
            loop72:
            do {
                int alt72=2;
                alt72 = dfa72.predict(input);
                switch (alt72) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1567:8: '.' t3= Identifier (t4= typeArguments )?
            	    {
            	    match(input,29,FOLLOW_29_in_classOrInterfaceType5553); if (state.failed) return ret;
            	    t3=(Token)match(input,Identifier,FOLLOW_Identifier_in_classOrInterfaceType5557); if (state.failed) return ret;
            	    // src/cedp/src2src/frontend/java/Java.g:1567:28: (t4= typeArguments )?
            	    int alt71=2;
            	    alt71 = dfa71.predict(input);
            	    switch (alt71) {
            	        case 1 :
            	            // src/cedp/src2src/frontend/java/Java.g:0:0: t4= typeArguments
            	            {
            	            pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType5561);
            	            t4=typeArguments();

            	            state._fsp--;
            	            if (state.failed) return ret;

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {

            	                  list.add(new StringDeclaration("."));
            	                  list.add(new StringDeclaration((t3!=null?t3.getText():null)));
            	                  if(t4 != null)
            	                      list.add(t4);
            	                  //ret_expr = new AccessExpression(ret_expr, AccessOperator.MEMBER_ACCESS, new NameID((t3!=null?t3.getText():null)));
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, classOrInterfaceType_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "classOrInterfaceType"


    // $ANTLR start "variableModifier"
    // src/cedp/src2src/frontend/java/Java.g:1595:1: variableModifier returns [Declaration ret] : ( 'final' | t1= annotation );
    public final Declaration variableModifier() throws RecognitionException {
        Declaration ret = null;
        int variableModifier_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("variableModifier"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1597:5: ( 'final' | t1= annotation )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==35) ) {
                alt73=1;
            }
            else if ( (LA73_0==65) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1597:9: 'final'
                    {
                    match(input,35,FOLLOW_35_in_variableModifier5619); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = new StringDeclaration("final");
                                      //anno = Specifier.final;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1602:9: t1= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_variableModifier5645);
                    t1=annotation();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t1;
                                      //anno = t1;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, variableModifier_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "variableModifier"


    // $ANTLR start "typeArguments"
    // src/cedp/src2src/frontend/java/Java.g:1609:1: typeArguments returns [Declaration ret] : '<' t1= typeArgument ( ',' t2= typeArgument )* '>' ;
    public final Declaration typeArguments() throws RecognitionException {
        Declaration ret = null;
        int typeArguments_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("typeArguments"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1611:5: ( '<' t1= typeArgument ( ',' t2= typeArgument )* '>' )
            // src/cedp/src2src/frontend/java/Java.g:1611:9: '<' t1= typeArgument ( ',' t2= typeArgument )* '>'
            {
            match(input,40,FOLLOW_40_in_typeArguments5692); if (state.failed) return ret;
            pushFollow(FOLLOW_typeArgument_in_typeArguments5696);
            t1=typeArgument();

            state._fsp--;
            if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:1612:9: ( ',' t2= typeArgument )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==41) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1612:10: ',' t2= typeArgument
            	    {
            	    match(input,41,FOLLOW_41_in_typeArguments5707); if (state.failed) return ret;
            	    pushFollow(FOLLOW_typeArgument_in_typeArguments5711);
            	    t2=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration(","));
            	                      list.add(t2);
            	                      //list.add(t2);
            	                      //ret_expr = new TypeParamExpression(list);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);

            match(input,42,FOLLOW_42_in_typeArguments5738); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.addFirst(t1);
                              list.addFirst(new StringDeclaration("<"));
                              list.addLast(new StringDeclaration(">"));
                              ret = new StringDeclaration(list);
                              //list.add(t1);
                              //ret_expr = new TypeParamExpression(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, typeArguments_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "typeArguments"


    // $ANTLR start "typeArgument"
    // src/cedp/src2src/frontend/java/Java.g:1631:1: typeArgument returns [Declaration ret_decl] : (t1= type | '?' ( ( 'extends' | 'super' ) t2= type )? );
    public final Declaration typeArgument() throws RecognitionException {
        Declaration ret_decl = null;
        int typeArgument_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("typeArgument"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1634:5: (t1= type | '?' ( ( 'extends' | 'super' ) t2= type )? )
            int alt77=2;
            alt77 = dfa77.predict(input);
            switch (alt77) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1634:9: t1= type
                    {
                    pushFollow(FOLLOW_type_in_typeArgument5798);
                    t1=type();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      //LinkedList list = new LinkedList();
                                      //for(int i=0; i<t1.size(); i++)
                                      //    list.add(new StringExpression(t1.get(i).toString()));
                                      //ret_expr = new StringExpression(list);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1642:9: '?' ( ( 'extends' | 'super' ) t2= type )?
                    {
                    match(input,56,FOLLOW_56_in_typeArgument5822); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                          list.add(new StringDeclaration("?"));
                                      
                    }
                    // src/cedp/src2src/frontend/java/Java.g:1646:9: ( ( 'extends' | 'super' ) t2= type )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==38||LA76_0==57) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1646:10: ( 'extends' | 'super' ) t2= type
                            {
                            // src/cedp/src2src/frontend/java/Java.g:1646:10: ( 'extends' | 'super' )
                            int alt75=2;
                            int LA75_0 = input.LA(1);

                            if ( (LA75_0==38) ) {
                                alt75=1;
                            }
                            else if ( (LA75_0==57) ) {
                                alt75=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 75, 0, input);

                                throw nvae;
                            }
                            switch (alt75) {
                                case 1 :
                                    // src/cedp/src2src/frontend/java/Java.g:1646:11: 'extends'
                                    {
                                    match(input,38,FOLLOW_38_in_typeArgument5852); if (state.failed) return ret_decl;
                                    if ( state.backtracking==0 ) {

                                                          list.add(new StringDeclaration("extends"));
                                                          //ret_expr.addExpression(new StringDeclaration("?"));
                                                          //ret_expr.addExpression(new StringDeclaration("extends"));
                                                      
                                    }

                                    }
                                    break;
                                case 2 :
                                    // src/cedp/src2src/frontend/java/Java.g:1652:15: 'super'
                                    {
                                    match(input,57,FOLLOW_57_in_typeArgument5886); if (state.failed) return ret_decl;
                                    if ( state.backtracking==0 ) {

                                                          list.add(new StringDeclaration("super"));
                                                          //ret_expr.addExpression(new StringDeclaration("?"));
                                                          //ret_expr.addExpression(new StringDeclaration("super"));
                                                      
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_type_in_typeArgument5922);
                            t2=type();

                            state._fsp--;
                            if (state.failed) return ret_decl;
                            if ( state.backtracking==0 ) {

                                                  list.add(t2);
                                                  //LinkedList list = new LinkedList();
                                                  //for(int i=0; i<t2.size(); i++)
                                                  //    ret_expr.addExpression(new StringDeclaration(t2.get(i).toString()));
                                              
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret_decl = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, typeArgument_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "typeArgument"


    // $ANTLR start "qualifiedNameList"
    // src/cedp/src2src/frontend/java/Java.g:1668:1: qualifiedNameList returns [Declaration ret] : t1= qualifiedName ( ',' t2= qualifiedName )* ;
    public final Declaration qualifiedNameList() throws RecognitionException {
        Declaration ret = null;
        int qualifiedNameList_StartIndex = input.index();
        JavaParser.qualifiedName_return t1 = null;

        JavaParser.qualifiedName_return t2 = null;


         if(dFlag) System.out.println("qualifiedNameList"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1671:5: (t1= qualifiedName ( ',' t2= qualifiedName )* )
            // src/cedp/src2src/frontend/java/Java.g:1671:9: t1= qualifiedName ( ',' t2= qualifiedName )*
            {
            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList5995);
            t1=qualifiedName();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration((t1!=null?input.toString(t1.start,t1.stop):null)));
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:1675:9: ( ',' t2= qualifiedName )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==41) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1675:10: ',' t2= qualifiedName
            	    {
            	    match(input,41,FOLLOW_41_in_qualifiedNameList6020); if (state.failed) return ret;
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList6024);
            	    t2=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration(","));
            	                      list.add(new StringDeclaration((t2!=null?input.toString(t2.start,t2.stop):null)));
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, qualifiedNameList_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "qualifiedNameList"


    // $ANTLR start "formalParameters"
    // src/cedp/src2src/frontend/java/Java.g:1683:1: formalParameters returns [Declaration ret_decl] : '(' (t1= formalParameterDecls )? ')' ;
    public final Declaration formalParameters() throws RecognitionException {
        Declaration ret_decl = null;
        int formalParameters_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("formalParameters"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1686:5: ( '(' (t1= formalParameterDecls )? ')' )
            // src/cedp/src2src/frontend/java/Java.g:1686:9: '(' (t1= formalParameterDecls )? ')'
            {
            match(input,58,FOLLOW_58_in_formalParameters6091); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1686:13: (t1= formalParameterDecls )?
            int alt79=2;
            alt79 = dfa79.predict(input);
            switch (alt79) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1686:14: t1= formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters6096);
                    t1=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                          list.add(t1);
                                          //list = t1;
                                      
                    }

                    }
                    break;

            }

            match(input,59,FOLLOW_59_in_formalParameters6139); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.addFirst(new StringDeclaration("("));
                              list.addLast(new StringDeclaration(")"));
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret_decl = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, formalParameters_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "formalParameters"


    // $ANTLR start "formalParameterDecls"
    // src/cedp/src2src/frontend/java/Java.g:1699:1: formalParameterDecls returns [Declaration ret_decl] : t1= variableModifiers t2= type t3= formalParameterDeclsRest ;
    public final Declaration formalParameterDecls() throws RecognitionException {
        Declaration ret_decl = null;
        int formalParameterDecls_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("formalParameterDecls"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1702:5: (t1= variableModifiers t2= type t3= formalParameterDeclsRest )
            // src/cedp/src2src/frontend/java/Java.g:1702:9: t1= variableModifiers t2= type t3= formalParameterDeclsRest
            {
            pushFollow(FOLLOW_variableModifiers_in_formalParameterDecls6197);
            t1=variableModifiers();

            state._fsp--;
            if (state.failed) return ret_decl;
            pushFollow(FOLLOW_type_in_formalParameterDecls6201);
            t2=type();

            state._fsp--;
            if (state.failed) return ret_decl;
            pushFollow(FOLLOW_formalParameterDeclsRest_in_formalParameterDecls6205);
            t3=formalParameterDeclsRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(t2);
                              list.add(t3);
                              //List tlist = new LinkedList();
                              //VariableDeclarator var_decl = new VariableDeclarator((IDExpression)t3.get(0));
                              //VariableDeclaration vdec = new VariableDeclaration(MergeList(t1, t2), var_decl);
                              //tlist.add(vdec);
                              //t3.remove(0);
                              //list = MergeList(tlist, t3);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret_decl = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, formalParameterDecls_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "formalParameterDecls"


    // $ANTLR start "formalParameterDeclsRest"
    // src/cedp/src2src/frontend/java/Java.g:1716:1: formalParameterDeclsRest returns [Declaration ret_decl] : (t1= variableDeclaratorId ( ',' t2= formalParameterDecls )? | '...' t3= variableDeclaratorId );
    public final Declaration formalParameterDeclsRest() throws RecognitionException {
        Declaration ret_decl = null;
        int formalParameterDeclsRest_StartIndex = input.index();
        NameID t1 = null;

        Declaration t2 = null;

        NameID t3 = null;


         if(dFlag) System.out.println("formalParameterDeclsRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1719:5: (t1= variableDeclaratorId ( ',' t2= formalParameterDecls )? | '...' t3= variableDeclaratorId )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==Identifier) ) {
                alt81=1;
            }
            else if ( (LA81_0==60) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1719:9: t1= variableDeclaratorId ( ',' t2= formalParameterDecls )?
                    {
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest6263);
                    t1=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:1723:9: ( ',' t2= formalParameterDecls )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==41) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1723:10: ',' t2= formalParameterDecls
                            {
                            match(input,41,FOLLOW_41_in_formalParameterDeclsRest6288); if (state.failed) return ret_decl;
                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDeclsRest6292);
                            t2=formalParameterDecls();

                            state._fsp--;
                            if (state.failed) return ret_decl;
                            if ( state.backtracking==0 ) {

                                              list.add(new StringDeclaration(","));
                                              list.add(t2);
                                              //for(int i=0; i<t2.size(); i++)
                                              //    list.add(t2.get(i));
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1731:9: '...' t3= variableDeclaratorId
                    {
                    match(input,60,FOLLOW_60_in_formalParameterDeclsRest6327); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest6331);
                    t3=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("..."));
                                      list.add(t3);
                                      //System.err.println("Supported ... argument\n");
                                      //System.exit(-1);
                                      /* TODO SUPPORT! */
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret_decl = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, formalParameterDeclsRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "formalParameterDeclsRest"


    // $ANTLR start "methodBody"
    // src/cedp/src2src/frontend/java/Java.g:1741:1: methodBody returns [Declaration ret_decl] : t1= block ;
    public final Declaration methodBody() throws RecognitionException {
        Declaration ret_decl = null;
        int methodBody_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("methodBody"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1743:5: (t1= block )
            // src/cedp/src2src/frontend/java/Java.g:1743:9: t1= block
            {
            pushFollow(FOLLOW_block_in_methodBody6380);
            t1=block();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              ret_decl = t1;
                              //stat = t1;
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, methodBody_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "methodBody"


    // $ANTLR start "constructorBody"
    // src/cedp/src2src/frontend/java/Java.g:1750:1: constructorBody returns [Declaration ret] : '{' (t1= explicitConstructorInvocation )? (t2= blockStatement )* '}' ;
    public final Declaration constructorBody() throws RecognitionException {
        Declaration ret = null;
        int constructorBody_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("constructorBody"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1753:5: ( '{' (t1= explicitConstructorInvocation )? (t2= blockStatement )* '}' )
            // src/cedp/src2src/frontend/java/Java.g:1753:9: '{' (t1= explicitConstructorInvocation )? (t2= blockStatement )* '}'
            {
            match(input,44,FOLLOW_44_in_constructorBody6436); if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:1753:13: (t1= explicitConstructorInvocation )?
            int alt82=2;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1753:14: t1= explicitConstructorInvocation
                    {
                    pushFollow(FOLLOW_explicitConstructorInvocation_in_constructorBody6441);
                    t1=explicitConstructorInvocation();

                    state._fsp--;
                    if (state.failed) return ret;

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:1754:9: (t2= blockStatement )*
            loop83:
            do {
                int alt83=2;
                alt83 = dfa83.predict(input);
                switch (alt83) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1754:10: t2= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_constructorBody6456);
            	    t2=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t2);
            	                     //ret_stat.addStatement(t2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            match(input,45,FOLLOW_45_in_constructorBody6483); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              if(t1 != null)
                                  list.addFirst(t1);
                              list.addFirst(new StringDeclaration("{"));
                              list.addLast(new StringDeclaration("}"));
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, constructorBody_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "constructorBody"


    // $ANTLR start "explicitConstructorInvocation"
    // src/cedp/src2src/frontend/java/Java.g:1768:1: explicitConstructorInvocation returns [Declaration ret] : ( (t1= nonWildcardTypeArguments )? ( 'this' | 'super' ) t2= arguments ';' | t3= primary '.' (t4= nonWildcardTypeArguments )? 'super' t5= arguments ';' );
    public final Declaration explicitConstructorInvocation() throws RecognitionException {
        Declaration ret = null;
        int explicitConstructorInvocation_StartIndex = input.index();
        JavaParser.nonWildcardTypeArguments_return t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        JavaParser.nonWildcardTypeArguments_return t4 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("explicitConstructorInvocation"); LinkedList list = new LinkedList(); int c1, c2; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1771:5: ( (t1= nonWildcardTypeArguments )? ( 'this' | 'super' ) t2= arguments ';' | t3= primary '.' (t4= nonWildcardTypeArguments )? 'super' t5= arguments ';' )
            int alt87=2;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1771:9: (t1= nonWildcardTypeArguments )? ( 'this' | 'super' ) t2= arguments ';'
                    {
                    // src/cedp/src2src/frontend/java/Java.g:1771:9: (t1= nonWildcardTypeArguments )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==40) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1771:10: t1= nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation6541);
                            t1=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    // src/cedp/src2src/frontend/java/Java.g:1771:40: ( 'this' | 'super' )
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==61) ) {
                        alt85=1;
                    }
                    else if ( (LA85_0==57) ) {
                        alt85=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 85, 0, input);

                        throw nvae;
                    }
                    switch (alt85) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1771:41: 'this'
                            {
                            match(input,61,FOLLOW_61_in_explicitConstructorInvocation6546); if (state.failed) return ret;
                            if ( state.backtracking==0 ) {
                              c1=1;
                            }

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:1771:58: 'super'
                            {
                            match(input,57,FOLLOW_57_in_explicitConstructorInvocation6552); if (state.failed) return ret;
                            if ( state.backtracking==0 ) {
                              c1=2;
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation6559);
                    t2=arguments();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,26,FOLLOW_26_in_explicitConstructorInvocation6561); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      if(c1==1)
                                          list.add(new StringDeclaration("this"));
                                      if(c1==2)
                                          list.add(new StringDeclaration("super"));
                                      list.add(t2);
                                      list.add(new StringDeclaration(";"));

                                      /*
                                      if(c1==1)
                                          list.add(new OperatorID("this"));
                                      if(c1==2)
                                          list.add(new OperatorID("super"));
                                      for(int i=0; i<t2.size(); i++)
                                          list.add(t2.get(i));
                                      */
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1790:9: t3= primary '.' (t4= nonWildcardTypeArguments )? 'super' t5= arguments ';'
                    {
                    pushFollow(FOLLOW_primary_in_explicitConstructorInvocation6587);
                    t3=primary();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,29,FOLLOW_29_in_explicitConstructorInvocation6589); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:1790:24: (t4= nonWildcardTypeArguments )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==40) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1790:25: t4= nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation6594);
                            t4=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    match(input,57,FOLLOW_57_in_explicitConstructorInvocation6598); if (state.failed) return ret;
                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation6602);
                    t5=arguments();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,26,FOLLOW_26_in_explicitConstructorInvocation6604); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t3);
                                      list.add(new StringDeclaration("."));
                                      if(t4 != null)
                                          list.add(t4);
                                      list.add(new StringDeclaration("super"));
                                      list.add(t5);
                                      list.add(new StringDeclaration(";"));
                                      //list.add(t3);
                                      //list.add(new OperatorID("super"));
                                      //for(int i=0; i<t5.size(); i++)
                                      //    list.add(t5.get(i));
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, explicitConstructorInvocation_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "explicitConstructorInvocation"

    public static class qualifiedName_return extends ParserRuleReturnScope {
    };

    // $ANTLR start "qualifiedName"
    // src/cedp/src2src/frontend/java/Java.g:1806:1: qualifiedName : Identifier ( '.' Identifier )* ;
    public final JavaParser.qualifiedName_return qualifiedName() throws RecognitionException {
        JavaParser.qualifiedName_return retval = new JavaParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
         if(dFlag) System.out.println("qualifiedName"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // src/cedp/src2src/frontend/java/Java.g:1808:5: ( Identifier ( '.' Identifier )* )
            // src/cedp/src2src/frontend/java/Java.g:1808:9: Identifier ( '.' Identifier )*
            {
            match(input,Identifier,FOLLOW_Identifier_in_qualifiedName6648); if (state.failed) return retval;
            // src/cedp/src2src/frontend/java/Java.g:1808:20: ( '.' Identifier )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==29) ) {
                    int LA88_2 = input.LA(2);

                    if ( (LA88_2==Identifier) ) {
                        alt88=1;
                    }


                }


                switch (alt88) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1808:21: '.' Identifier
            	    {
            	    match(input,29,FOLLOW_29_in_qualifiedName6651); if (state.failed) return retval;
            	    match(input,Identifier,FOLLOW_Identifier_in_qualifiedName6653); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class literal_return extends ParserRuleReturnScope {
        public Declaration ret;
    };

    // $ANTLR start "literal"
    // src/cedp/src2src/frontend/java/Java.g:1811:1: literal returns [Declaration ret] : (t1= integerLiteral | t2= FloatingPointLiteral | t3= CharacterLiteral | t4= StringLiteral | t5= booleanLiteral | 'null' );
    public final JavaParser.literal_return literal() throws RecognitionException {
        JavaParser.literal_return retval = new JavaParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Token t2=null;
        Token t3=null;
        Token t4=null;
        Declaration t1 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("literal"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // src/cedp/src2src/frontend/java/Java.g:1813:5: (t1= integerLiteral | t2= FloatingPointLiteral | t3= CharacterLiteral | t4= StringLiteral | t5= booleanLiteral | 'null' )
            int alt89=6;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1813:9: t1= integerLiteral
                    {
                    pushFollow(FOLLOW_integerLiteral_in_literal6690);
                    t1=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       
                                      retval.ret = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1817:9: t2= FloatingPointLiteral
                    {
                    t2=(Token)match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal6716); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       
                                      retval.ret = new StringDeclaration((t2!=null?t2.getText():null));
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:1821:9: t3= CharacterLiteral
                    {
                    t3=(Token)match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal6742); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       
                                      retval.ret = new StringDeclaration((t3!=null?t3.getText():null));
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:1825:9: t4= StringLiteral
                    {
                    t4=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal6768); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       
                                      retval.ret = new StringDeclaration((t4!=null?t4.getText():null));
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:1829:9: t5= booleanLiteral
                    {
                    pushFollow(FOLLOW_booleanLiteral_in_literal6794);
                    t5=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       
                                      retval.ret = t5;
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:1833:9: 'null'
                    {
                    match(input,62,FOLLOW_62_in_literal6818); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       
                                      retval.ret = new StringDeclaration("null");
                                  
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"


    // $ANTLR start "integerLiteral"
    // src/cedp/src2src/frontend/java/Java.g:1839:1: integerLiteral returns [Declaration ret] : (t1= HexLiteral | t2= OctalLiteral | t3= DecimalLiteral );
    public final Declaration integerLiteral() throws RecognitionException {
        Declaration ret = null;
        int integerLiteral_StartIndex = input.index();
        Token t1=null;
        Token t2=null;
        Token t3=null;

         if(dFlag) System.out.println("integerLiteral"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1841:5: (t1= HexLiteral | t2= OctalLiteral | t3= DecimalLiteral )
            int alt90=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
                {
                alt90=1;
                }
                break;
            case OctalLiteral:
                {
                alt90=2;
                }
                break;
            case DecimalLiteral:
                {
                alt90=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1841:8: t1= HexLiteral
                    {
                    t1=(Token)match(input,HexLiteral,FOLLOW_HexLiteral_in_integerLiteral6866); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      //System.out.println("Hex " + (t1!=null?t1.getText():null));
                                      //ret_lit = new IntegerLiteral((t1!=null?t1.getText():null));
                                      ret = new StringDeclaration((t1!=null?t1.getText():null));
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1847:9: t2= OctalLiteral
                    {
                    t2=(Token)match(input,OctalLiteral,FOLLOW_OctalLiteral_in_integerLiteral6892); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      //System.out.println("Oct " + (t2!=null?t2.getText():null));
                                      //ret_lit = new IntegerLiteral((t2!=null?t2.getText():null));
                                      ret = new StringDeclaration((t2!=null?t2.getText():null));
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:1853:9: t3= DecimalLiteral
                    {
                    t3=(Token)match(input,DecimalLiteral,FOLLOW_DecimalLiteral_in_integerLiteral6918); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      //System.out.println("Deci " + (t3!=null?t3.getText():null));
                                      //ret_lit = new IntegerLiteral((t3!=null?t3.getText():null));
                                      //if(ret_lit == null) System.out.println("*");
                                      ret = new StringDeclaration((t3!=null?t3.getText():null));
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, integerLiteral_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "integerLiteral"


    // $ANTLR start "booleanLiteral"
    // src/cedp/src2src/frontend/java/Java.g:1862:1: booleanLiteral returns [Declaration ret] : ( 'true' | 'false' );
    public final Declaration booleanLiteral() throws RecognitionException {
        Declaration ret = null;
        int booleanLiteral_StartIndex = input.index();
         if(dFlag) System.out.println("booleanLiteral"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1864:5: ( 'true' | 'false' )
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==63) ) {
                alt91=1;
            }
            else if ( (LA91_0==64) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }
            switch (alt91) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1864:9: 'true'
                    {
                    match(input,63,FOLLOW_63_in_booleanLiteral6965); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = new StringDeclaration("true");
                                      //ret_lit = new BooleanLiteral(true);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1869:9: 'false'
                    {
                    match(input,64,FOLLOW_64_in_booleanLiteral6989); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("false");
                                      //ret_lit = new BooleanLiteral(false);
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, booleanLiteral_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "booleanLiteral"


    // $ANTLR start "annotations"
    // src/cedp/src2src/frontend/java/Java.g:1878:1: annotations returns [Declaration ret] : (t1= annotation )+ ;
    public final Declaration annotations() throws RecognitionException {
        Declaration ret = null;
        int annotations_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("annotations"); list = new LinkedList(); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1881:5: ( (t1= annotation )+ )
            // src/cedp/src2src/frontend/java/Java.g:1881:9: (t1= annotation )+
            {
            // src/cedp/src2src/frontend/java/Java.g:1881:9: (t1= annotation )+
            int cnt92=0;
            loop92:
            do {
                int alt92=2;
                alt92 = dfa92.predict(input);
                switch (alt92) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1881:10: t1= annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations7050);
            	    t1=annotation();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1);
            	                      //ret_decl.annotate(t1);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt92 >= 1 ) break loop92;
            	    if (state.backtracking>0) {state.failed=true; return ret;}
                        EarlyExitException eee =
                            new EarlyExitException(92, input);
                        throw eee;
                }
                cnt92++;
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, annotations_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotations"


    // $ANTLR start "annotation"
    // src/cedp/src2src/frontend/java/Java.g:1890:1: annotation returns [Declaration ret] : '@' t1= annotationName ( '(' (t2= elementValuePairs | t3= elementValue )? ')' )? ;
    public final Declaration annotation() throws RecognitionException {
        Declaration ret = null;
        int annotation_StartIndex = input.index();
        JavaParser.annotationName_return t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("annotation"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1893:5: ( '@' t1= annotationName ( '(' (t2= elementValuePairs | t3= elementValue )? ')' )? )
            // src/cedp/src2src/frontend/java/Java.g:1893:9: '@' t1= annotationName ( '(' (t2= elementValuePairs | t3= elementValue )? ')' )?
            {
            match(input,65,FOLLOW_65_in_annotation7119); if (state.failed) return ret;
            pushFollow(FOLLOW_annotationName_in_annotation7123);
            t1=annotationName();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("@"));
                              list.add(new StringDeclaration((t1!=null?input.toString(t1.start,t1.stop):null)));
                              //ret_anno = new JavaAnnotation(new NameID((t1!=null?input.toString(t1.start,t1.stop):null)));
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:1899:9: ( '(' (t2= elementValuePairs | t3= elementValue )? ')' )?
            int alt94=2;
            alt94 = dfa94.predict(input);
            switch (alt94) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1899:11: '(' (t2= elementValuePairs | t3= elementValue )? ')'
                    {
                    match(input,58,FOLLOW_58_in_annotation7149); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                          list.add(new StringDeclaration("("));
                                       
                    }
                    // src/cedp/src2src/frontend/java/Java.g:1903:12: (t2= elementValuePairs | t3= elementValue )?
                    int alt93=3;
                    alt93 = dfa93.predict(input);
                    switch (alt93) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1903:14: t2= elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation7185);
                            t2=elementValuePairs();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                                      list.add(t2);
                                                      //ret.anno.SetParenthesis();
                                                      //ret_anno.SetExpression(t2);
                                                  
                            }

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:1909:14: t3= elementValue
                            {
                            pushFollow(FOLLOW_elementValue_in_annotation7224);
                            t3=elementValue();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                                      list.add(t3);
                                                      //ret.anno.SetParenthesis();
                                                      //ret_anno.SetExpression(t3);
                                                  
                            }

                            }
                            break;

                    }

                    match(input,59,FOLLOW_59_in_annotation7262); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                          list.add(new StringDeclaration(")"));
                                      
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, annotation_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotation"

    public static class annotationName_return extends ParserRuleReturnScope {
    };

    // $ANTLR start "annotationName"
    // src/cedp/src2src/frontend/java/Java.g:1923:1: annotationName : Identifier ( '.' Identifier )* ;
    public final JavaParser.annotationName_return annotationName() throws RecognitionException {
        JavaParser.annotationName_return retval = new JavaParser.annotationName_return();
        retval.start = input.LT(1);
        int annotationName_StartIndex = input.index();
         if(dFlag) System.out.println("annotationName"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // src/cedp/src2src/frontend/java/Java.g:1925:5: ( Identifier ( '.' Identifier )* )
            // src/cedp/src2src/frontend/java/Java.g:1925:7: Identifier ( '.' Identifier )*
            {
            match(input,Identifier,FOLLOW_Identifier_in_annotationName7319); if (state.failed) return retval;
            // src/cedp/src2src/frontend/java/Java.g:1925:18: ( '.' Identifier )*
            loop95:
            do {
                int alt95=2;
                alt95 = dfa95.predict(input);
                switch (alt95) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1925:19: '.' Identifier
            	    {
            	    match(input,29,FOLLOW_29_in_annotationName7322); if (state.failed) return retval;
            	    match(input,Identifier,FOLLOW_Identifier_in_annotationName7324); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, annotationName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationName"


    // $ANTLR start "elementValuePairs"
    // src/cedp/src2src/frontend/java/Java.g:1929:1: elementValuePairs returns [Declaration ret] : t1= elementValuePair ( ',' t2= elementValuePair )* ;
    public final Declaration elementValuePairs() throws RecognitionException {
        Declaration ret = null;
        int elementValuePairs_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("elementValuePairs"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1932:5: (t1= elementValuePair ( ',' t2= elementValuePair )* )
            // src/cedp/src2src/frontend/java/Java.g:1932:9: t1= elementValuePair ( ',' t2= elementValuePair )*
            {
            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs7372);
            t1=elementValuePair();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              //ret_expr = t1;
                              //list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:1938:9: ( ',' t2= elementValuePair )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==41) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1938:10: ',' t2= elementValuePair
            	    {
            	    match(input,41,FOLLOW_41_in_elementValuePairs7397); if (state.failed) return ret;
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs7401);
            	    t2=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration(","));
            	                      list.add(t2);
            	                      //list.add(t2);
            	                      //ret_expr = new CommaExpression(list);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, elementValuePairs_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "elementValuePairs"


    // $ANTLR start "elementValuePair"
    // src/cedp/src2src/frontend/java/Java.g:1949:1: elementValuePair returns [Declaration ret] : t1= Identifier '=' t2= elementValue ;
    public final Declaration elementValuePair() throws RecognitionException {
        Declaration ret = null;
        int elementValuePair_StartIndex = input.index();
        Token t1=null;
        Declaration t2 = null;


         if(dFlag) System.out.println("elementValuePair"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1952:5: (t1= Identifier '=' t2= elementValue )
            // src/cedp/src2src/frontend/java/Java.g:1952:9: t1= Identifier '=' t2= elementValue
            {
            t1=(Token)match(input,Identifier,FOLLOW_Identifier_in_elementValuePair7472); if (state.failed) return ret;
            match(input,51,FOLLOW_51_in_elementValuePair7474); if (state.failed) return ret;
            pushFollow(FOLLOW_elementValue_in_elementValuePair7478);
            t2=elementValue();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add((t1!=null?t1.getText():null));
                              list.add(new StringDeclaration("="));
                              list.add(t2);
                              ret = new StringDeclaration(list);
                              //ret_expr = new AssignmentExpression(new NameID((t1!=null?t1.getText():null)), AssignmentOperator.NORMAL, t1);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, elementValuePair_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "elementValuePair"


    // $ANTLR start "elementValue"
    // src/cedp/src2src/frontend/java/Java.g:1963:1: elementValue returns [Declaration ret] : (t1= conditionalExpression | t2= annotation | t3= elementValueArrayInitializer );
    public final Declaration elementValue() throws RecognitionException {
        Declaration ret = null;
        int elementValue_StartIndex = input.index();
        Expression t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("elementValue"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1966:5: (t1= conditionalExpression | t2= annotation | t3= elementValueArrayInitializer )
            int alt97=3;
            alt97 = dfa97.predict(input);
            switch (alt97) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1966:9: t1= conditionalExpression
                    {
                    pushFollow(FOLLOW_conditionalExpression_in_elementValue7538);
                    t1=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1970:9: t2= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_elementValue7564);
                    t2=annotation();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t2;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:1974:9: t3= elementValueArrayInitializer
                    {
                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue7590);
                    t3=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t2;
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, elementValue_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "elementValue"


    // $ANTLR start "elementValueArrayInitializer"
    // src/cedp/src2src/frontend/java/Java.g:1981:1: elementValueArrayInitializer returns [Declaration ret_decl] : '{' (t1= elementValue ( ',' t2= elementValue )* )? ( ',' )? '}' ;
    public final Declaration elementValueArrayInitializer() throws RecognitionException {
        Declaration ret_decl = null;
        int elementValueArrayInitializer_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("elementValueArrayInitializer"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1984:5: ( '{' (t1= elementValue ( ',' t2= elementValue )* )? ( ',' )? '}' )
            // src/cedp/src2src/frontend/java/Java.g:1984:9: '{' (t1= elementValue ( ',' t2= elementValue )* )? ( ',' )? '}'
            {
            match(input,44,FOLLOW_44_in_elementValueArrayInitializer7648); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1984:13: (t1= elementValue ( ',' t2= elementValue )* )?
            int alt99=2;
            alt99 = dfa99.predict(input);
            switch (alt99) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1984:14: t1= elementValue ( ',' t2= elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer7653);
                    t1=elementValue();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("{"));
                                      list.add(t1);
                                      //ret_expr = new Initializer(list);
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:1990:9: ( ',' t2= elementValue )*
                    loop98:
                    do {
                        int alt98=2;
                        alt98 = dfa98.predict(input);
                        switch (alt98) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:1990:10: ',' t2= elementValue
                    	    {
                    	    match(input,41,FOLLOW_41_in_elementValueArrayInitializer7678); if (state.failed) return ret_decl;
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer7682);
                    	    t2=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return ret_decl;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration(","));
                    	                      list.add(t2);
                    	                      //ret_expr = new Initializer(list);
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop98;
                        }
                    } while (true);


                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:1996:14: ( ',' )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==41) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1996:15: ','
                    {
                    match(input,41,FOLLOW_41_in_elementValueArrayInitializer7712); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration(","));
                                      //ret_expr.SetLastComma();
                                  
                    }

                    }
                    break;

            }

            match(input,45,FOLLOW_45_in_elementValueArrayInitializer7739); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("}"));
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, elementValueArrayInitializer_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "elementValueArrayInitializer"


    // $ANTLR start "annotationTypeDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:2007:1: annotationTypeDeclaration returns [Declaration ret] : '@' 'interface' t1= Identifier t2= annotationTypeBody ;
    public final Declaration annotationTypeDeclaration() throws RecognitionException {
        Declaration ret = null;
        int annotationTypeDeclaration_StartIndex = input.index();
        Token t1=null;
        Declaration t2 = null;


         if(dFlag) System.out.println("annotationTypeDeclaration"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2010:5: ( '@' 'interface' t1= Identifier t2= annotationTypeBody )
            // src/cedp/src2src/frontend/java/Java.g:2010:9: '@' 'interface' t1= Identifier t2= annotationTypeBody
            {
            match(input,65,FOLLOW_65_in_annotationTypeDeclaration7794); if (state.failed) return ret;
            match(input,46,FOLLOW_46_in_annotationTypeDeclaration7796); if (state.failed) return ret;
            t1=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationTypeDeclaration7800); if (state.failed) return ret;
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration7804);
            t2=annotationTypeBody();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("@"));
                              list.add(new StringDeclaration("interface"));
                              list.add((t1!=null?t1.getText():null));
                              list.add(t2);
                              //JavaAnnotation anno = new JavaAnnotation(new NameID((t1!=null?t1.getText():null)), t1);
                              //anno.SetType("Interface");
                              //ret_decl.annotate(anno);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, annotationTypeDeclaration_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotationTypeDeclaration"


    // $ANTLR start "annotationTypeBody"
    // src/cedp/src2src/frontend/java/Java.g:2022:1: annotationTypeBody returns [Declaration ret_decl] : '{' (t1= annotationTypeElementDeclaration )* '}' ;
    public final Declaration annotationTypeBody() throws RecognitionException {
        Declaration ret_decl = null;
        int annotationTypeBody_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("annotationTypeBody"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:2025:5: ( '{' (t1= annotationTypeElementDeclaration )* '}' )
            // src/cedp/src2src/frontend/java/Java.g:2025:9: '{' (t1= annotationTypeElementDeclaration )* '}'
            {
            match(input,44,FOLLOW_44_in_annotationTypeBody7860); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("{"));
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2029:9: (t1= annotationTypeElementDeclaration )*
            loop101:
            do {
                int alt101=2;
                alt101 = dfa101.predict(input);
                switch (alt101) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2029:10: t1= annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody7888);
            	    t1=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            match(input,45,FOLLOW_45_in_annotationTypeBody7915); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("}"));
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, annotationTypeBody_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "annotationTypeBody"


    // $ANTLR start "annotationTypeElementDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:2039:1: annotationTypeElementDeclaration returns [Declaration ret] : t1= modifiers t2= annotationTypeElementRest ;
    public final Declaration annotationTypeElementDeclaration() throws RecognitionException {
        Declaration ret = null;
        int annotationTypeElementDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declarator t2 = null;


         if(dFlag) System.out.println("annotationTypeElementDeclaration"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2041:5: (t1= modifiers t2= annotationTypeElementRest )
            // src/cedp/src2src/frontend/java/Java.g:2041:9: t1= modifiers t2= annotationTypeElementRest
            {
            pushFollow(FOLLOW_modifiers_in_annotationTypeElementDeclaration7963);
            t1=modifiers();

            state._fsp--;
            if (state.failed) return ret;
            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration7967);
            t2=annotationTypeElementRest();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(t2);
                              ret = new StringDeclaration(list);
                              //ret_decl = new VariableDeclaration(t1, t2);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, annotationTypeElementDeclaration_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotationTypeElementDeclaration"


    // $ANTLR start "annotationTypeElementRest"
    // src/cedp/src2src/frontend/java/Java.g:2050:1: annotationTypeElementRest returns [Declarator ret] : (t1= type t2= annotationMethodOrConstantRest ';' | t3= normalClassDeclaration ( ';' )? | t4= normalInterfaceDeclaration ( ';' )? | t5= enumDeclaration ( ';' )? | t6= annotationTypeDeclaration ( ';' )? );
    public final Declarator annotationTypeElementRest() throws RecognitionException {
        Declarator ret = null;
        int annotationTypeElementRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;

        Declaration t6 = null;


         if(dFlag) System.out.println("annotationTypeElementRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2052:5: (t1= type t2= annotationMethodOrConstantRest ';' | t3= normalClassDeclaration ( ';' )? | t4= normalInterfaceDeclaration ( ';' )? | t5= enumDeclaration ( ';' )? | t6= annotationTypeDeclaration ( ';' )? )
            int alt106=5;
            alt106 = dfa106.predict(input);
            switch (alt106) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2052:9: t1= type t2= annotationMethodOrConstantRest ';'
                    {
                    pushFollow(FOLLOW_type_in_annotationTypeElementRest8015);
                    t1=type();

                    state._fsp--;
                    if (state.failed) return ret;
                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest8019);
                    t2=annotationMethodOrConstantRest();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,26,FOLLOW_26_in_annotationTypeElementRest8021); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      list.add(t2);
                                      list.add(new StringDeclaration(";"));
                                      ret = new StringDeclaration(list);
                                      //ret_decl = new VariableDeclarator(t1, t2);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2060:9: t3= normalClassDeclaration ( ';' )?
                    {
                    pushFollow(FOLLOW_normalClassDeclaration_in_annotationTypeElementRest8047);
                    t3=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2060:35: ( ';' )?
                    int alt102=2;
                    alt102 = dfa102.predict(input);
                    switch (alt102) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: ';'
                            {
                            match(input,26,FOLLOW_26_in_annotationTypeElementRest8049); if (state.failed) return ret;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                      list.add(t3);
                                      list.add(new StringDeclaration(";"));
                                      ret = new StringDeclaration(list);
                                      //ret_decl = t3;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2067:9: t4= normalInterfaceDeclaration ( ';' )?
                    {
                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementRest8076);
                    t4=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2067:39: ( ';' )?
                    int alt103=2;
                    alt103 = dfa103.predict(input);
                    switch (alt103) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: ';'
                            {
                            match(input,26,FOLLOW_26_in_annotationTypeElementRest8078); if (state.failed) return ret;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                      list.add(t4);
                                      list.add(new StringDeclaration(";"));
                                      ret = new StringDeclaration(list);
                                      //ret_decl = t4;
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:2074:9: t5= enumDeclaration ( ';' )?
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementRest8105);
                    t5=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2074:28: ( ';' )?
                    int alt104=2;
                    alt104 = dfa104.predict(input);
                    switch (alt104) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: ';'
                            {
                            match(input,26,FOLLOW_26_in_annotationTypeElementRest8107); if (state.failed) return ret;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                      list.add(t5);
                                      list.add(new StringDeclaration(";"));
                                      ret = new StringDeclaration(list);
                                      //ret_decl = t5;
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:2081:9: t6= annotationTypeDeclaration ( ';' )?
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest8134);
                    t6=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2081:38: ( ';' )?
                    int alt105=2;
                    alt105 = dfa105.predict(input);
                    switch (alt105) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: ';'
                            {
                            match(input,26,FOLLOW_26_in_annotationTypeElementRest8136); if (state.failed) return ret;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                      list.add(t6);
                                      list.add(new StringDeclaration(";"));
                                      ret = new StringDeclaration(list);
                                      //ret_decl = t6;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, annotationTypeElementRest_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotationTypeElementRest"


    // $ANTLR start "annotationMethodOrConstantRest"
    // src/cedp/src2src/frontend/java/Java.g:2090:1: annotationMethodOrConstantRest returns [Declaration ret] : (t1= annotationMethodRest | t2= annotationConstantRest );
    public final Declaration annotationMethodOrConstantRest() throws RecognitionException {
        Declaration ret = null;
        int annotationMethodOrConstantRest_StartIndex = input.index();
        Declaration t1 = null;

        ret t2 = null;


         if(dFlag) System.out.println("annotationMethodOrConstantRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2092:5: (t1= annotationMethodRest | t2= annotationConstantRest )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==Identifier) ) {
                int LA107_1 = input.LA(2);

                if ( (LA107_1==58) ) {
                    alt107=1;
                }
                else if ( (LA107_1==26||LA107_1==41||LA107_1==48||LA107_1==51) ) {
                    alt107=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ret;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2092:9: t1= annotationMethodRest
                    {
                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest8186);
                    t1=annotationMethodRest();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2096:9: t2= annotationConstantRest
                    {
                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest8212);
                    t2=annotationConstantRest();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t2;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, annotationMethodOrConstantRest_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotationMethodOrConstantRest"


    // $ANTLR start "annotationMethodRest"
    // src/cedp/src2src/frontend/java/Java.g:2102:1: annotationMethodRest returns [Declaration ret] : t1= Identifier '(' ')' (t2= defaultValue )? ;
    public final Declaration annotationMethodRest() throws RecognitionException {
        Declaration ret = null;
        int annotationMethodRest_StartIndex = input.index();
        Token t1=null;
        Declaration t2 = null;


         if(dFlag) System.out.println("annotationMethodRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2104:5: (t1= Identifier '(' ')' (t2= defaultValue )? )
            // src/cedp/src2src/frontend/java/Java.g:2104:9: t1= Identifier '(' ')' (t2= defaultValue )?
            {
            t1=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationMethodRest8261); if (state.failed) return ret;
            match(input,58,FOLLOW_58_in_annotationMethodRest8263); if (state.failed) return ret;
            match(input,59,FOLLOW_59_in_annotationMethodRest8265); if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:2104:33: (t2= defaultValue )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==66) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:0:0: t2= defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest8269);
                    t2=defaultValue();

                    state._fsp--;
                    if (state.failed) return ret;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration((t1!=null?t1.getText():null)));
                              list.add(new StringDeclaration("()"));
                              if(t2 != null)
                                  list.add(t2);
                              ret = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, annotationMethodRest_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotationMethodRest"


    // $ANTLR start "annotationConstantRest"
    // src/cedp/src2src/frontend/java/Java.g:2114:1: annotationConstantRest returns [ret list] : t1= variableDeclarators ;
    public final ret annotationConstantRest() throws RecognitionException {
        ret list = null;
        int annotationConstantRest_StartIndex = input.index();
        List t1 = null;


         if(dFlag) System.out.println("annotationConstantRest"); LinkedList list = new LinkedList();  
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return list; }
            // src/cedp/src2src/frontend/java/Java.g:2116:5: (t1= variableDeclarators )
            // src/cedp/src2src/frontend/java/Java.g:2116:9: t1= variableDeclarators
            {
            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest8318);
            t1=variableDeclarators();

            state._fsp--;
            if (state.failed) return list;
            if ( state.backtracking==0 ) {
               ret = t1; 
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, annotationConstantRest_StartIndex); }
        }
        return list;
    }
    // $ANTLR end "annotationConstantRest"


    // $ANTLR start "defaultValue"
    // src/cedp/src2src/frontend/java/Java.g:2119:1: defaultValue returns [Declaration ret] : 'default' t1= elementValue ;
    public final Declaration defaultValue() throws RecognitionException {
        Declaration ret = null;
        int defaultValue_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("defaultValue"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2121:5: ( 'default' t1= elementValue )
            // src/cedp/src2src/frontend/java/Java.g:2121:9: 'default' t1= elementValue
            {
            match(input,66,FOLLOW_66_in_defaultValue8353); if (state.failed) return ret;
            pushFollow(FOLLOW_elementValue_in_defaultValue8357);
            t1=elementValue();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("default"));
                              list.add(t1);
                              ret = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, defaultValue_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "defaultValue"


    // $ANTLR start "block"
    // src/cedp/src2src/frontend/java/Java.g:2131:1: block returns [Declaration ret] : '{' (t1= blockStatement )* '}' ;
    public final Declaration block() throws RecognitionException {
        Declaration ret = null;
        int block_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("block"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2138:5: ( '{' (t1= blockStatement )* '}' )
            // src/cedp/src2src/frontend/java/Java.g:2138:9: '{' (t1= blockStatement )* '}'
            {
            match(input,44,FOLLOW_44_in_block8415); if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:2138:13: (t1= blockStatement )*
            loop109:
            do {
                int alt109=2;
                alt109 = dfa109.predict(input);
                switch (alt109) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2138:14: t1= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block8420);
            	    t1=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1);
            	                      //cstat.addStatement(t1);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);

            match(input,45,FOLLOW_45_in_block8447); if (state.failed) return ret;

            }

            if ( state.backtracking==0 ) {

                      list.addFirst(new StringDeclaration("{"));
                      list.addLast(new StringDeclaration("}"));
                      ret = new StringDeclaration(list);
                  
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, block_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "block"


    // $ANTLR start "blockStatement"
    // src/cedp/src2src/frontend/java/Java.g:2146:1: blockStatement returns [Declaration ret] : (t1= localVariableDeclarationStatement | t2= classOrInterfaceDeclaration | t3= statement );
    public final Declaration blockStatement() throws RecognitionException {
        Declaration ret = null;
        int blockStatement_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("blockStatement"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2148:5: (t1= localVariableDeclarationStatement | t2= classOrInterfaceDeclaration | t3= statement )
            int alt110=3;
            alt110 = dfa110.predict(input);
            switch (alt110) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2148:9: t1= localVariableDeclarationStatement
                    {
                    pushFollow(FOLLOW_localVariableDeclarationStatement_in_blockStatement8482);
                    t1=localVariableDeclarationStatement();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      ret = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2152:9: t2= classOrInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement8508);
                    t2=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      ret = t2;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2156:9: t3= statement
                    {
                    pushFollow(FOLLOW_statement_in_blockStatement8534);
                    t3=statement();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      ret = t3;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, blockStatement_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "blockStatement"


    // $ANTLR start "localVariableDeclarationStatement"
    // src/cedp/src2src/frontend/java/Java.g:2162:1: localVariableDeclarationStatement returns [Declaration ret] : t1= localVariableDeclaration ';' ;
    public final Declaration localVariableDeclarationStatement() throws RecognitionException {
        Declaration ret = null;
        int localVariableDeclarationStatement_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("localVariableDeclarationStatement"); LinkedList list = new LinkedList();  
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2165:5: (t1= localVariableDeclaration ';' )
            // src/cedp/src2src/frontend/java/Java.g:2165:10: t1= localVariableDeclaration ';'
            {
            pushFollow(FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement8593);
            t1=localVariableDeclaration();

            state._fsp--;
            if (state.failed) return ret;
            match(input,26,FOLLOW_26_in_localVariableDeclarationStatement8595); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(new StringDeclaration(";"));
                              //stat = new DeclarationStatement(t1);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, localVariableDeclarationStatement_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "localVariableDeclarationStatement"


    // $ANTLR start "localVariableDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:2174:1: localVariableDeclaration returns [Declaration ret] : t1= variableModifiers t2= type t3= variableDeclarators ;
    public final Declaration localVariableDeclaration() throws RecognitionException {
        Declaration ret = null;
        int localVariableDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        List t3 = null;


         if(dFlag) System.out.println("localVariableDeclaration"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2177:5: (t1= variableModifiers t2= type t3= variableDeclarators )
            // src/cedp/src2src/frontend/java/Java.g:2177:9: t1= variableModifiers t2= type t3= variableDeclarators
            {
            pushFollow(FOLLOW_variableModifiers_in_localVariableDeclaration8655);
            t1=variableModifiers();

            state._fsp--;
            if (state.failed) return ret;
            pushFollow(FOLLOW_type_in_localVariableDeclaration8659);
            t2=type();

            state._fsp--;
            if (state.failed) return ret;
            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration8663);
            t3=variableDeclarators();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              //VariableDeclaration vdecl = new VariableDeclaration(
                              if(t1 != null)
                                  list.add(t1);
                              if(t2 != null)
                                  list.add(t2);
                              if(t3 != null)
                                  list.add(t3);
                              //vdecl = new VariableDeclaration(MergeList(t1, t2), t3.get(0));
                              //for(int i=1; i<t3.size(); i++)
                              //    vdecl.addDeclarator(t3.get(i));
                              ret = vdecl;
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, localVariableDeclaration_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "localVariableDeclaration"


    // $ANTLR start "variableModifiers"
    // src/cedp/src2src/frontend/java/Java.g:2193:1: variableModifiers returns [Declaration ret] : (t1= variableModifier )* ;
    public final Declaration variableModifiers() throws RecognitionException {
        Declaration ret = null;
        int variableModifiers_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("variableModifiers"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2196:5: ( (t1= variableModifier )* )
            // src/cedp/src2src/frontend/java/Java.g:2196:9: (t1= variableModifier )*
            {
            // src/cedp/src2src/frontend/java/Java.g:2196:9: (t1= variableModifier )*
            loop111:
            do {
                int alt111=2;
                alt111 = dfa111.predict(input);
                switch (alt111) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2196:10: t1= variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_variableModifiers8722);
            	    t1=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1);
            	                      ret = t1;
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               if(list.size() > 1) ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, variableModifiers_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "variableModifiers"


    // $ANTLR start "statement"
    // src/cedp/src2src/frontend/java/Java.g:2204:1: statement returns [Declaration ret] : (t1= block | t2= ASSERT t3= expression ( ':' t4= expression )? ';' | 'if' t5= parExpression t6= statement ( options {k=1; } : 'else' t8= statement )? | 'for' '(' t9= forControl ')' t10= statement | 'while' t11= parExpression t12= statement | 'do' t13= statement 'while' t14= parExpression ';' | 'try' t15= block (t16= catches 'finally' t17= block | t18= catches | 'finally' t19= block ) | 'switch' t20= parExpression '{' t21= switchBlockStatementGroups '}' | 'synchronized' t22= parExpression t22_1= block | 'return' (t23= expression )? ';' | 'throw' t24= expression ';' | 'break' (t25= Identifier )? ';' | 'continue' (t26= Identifier )? ';' | ';' | t28= statementExpression ';' | t29= Identifier ':' t30= statement );
    public final Declaration statement() throws RecognitionException {
        Declaration ret = null;
        int statement_StartIndex = input.index();
        Token t2=null;
        Token t25=null;
        Token t26=null;
        Token t29=null;
        Declaration t1 = null;

        Expression t3 = null;

        Expression t4 = null;

        JavaParser.parExpression_return t5 = null;

        Declaration t6 = null;

        Declaration t8 = null;

        Declaration t9 = null;

        Declaration t10 = null;

        JavaParser.parExpression_return t11 = null;

        Declaration t12 = null;

        Declaration t13 = null;

        JavaParser.parExpression_return t14 = null;

        Declaration t15 = null;

        Declaration t16 = null;

        Declaration t17 = null;

        Declaration t18 = null;

        Declaration t19 = null;

        JavaParser.parExpression_return t20 = null;

        Declaration t21 = null;

        JavaParser.parExpression_return t22 = null;

        Declaration t22_1 = null;

        Expression t23 = null;

        Expression t24 = null;

        Declaration t28 = null;

        Declaration t30 = null;


         if(dFlag) System.out.println("statement"); int check1 = 0; LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2207:5: (t1= block | t2= ASSERT t3= expression ( ':' t4= expression )? ';' | 'if' t5= parExpression t6= statement ( options {k=1; } : 'else' t8= statement )? | 'for' '(' t9= forControl ')' t10= statement | 'while' t11= parExpression t12= statement | 'do' t13= statement 'while' t14= parExpression ';' | 'try' t15= block (t16= catches 'finally' t17= block | t18= catches | 'finally' t19= block ) | 'switch' t20= parExpression '{' t21= switchBlockStatementGroups '}' | 'synchronized' t22= parExpression t22_1= block | 'return' (t23= expression )? ';' | 'throw' t24= expression ';' | 'break' (t25= Identifier )? ';' | 'continue' (t26= Identifier )? ';' | ';' | t28= statementExpression ';' | t29= Identifier ':' t30= statement )
            int alt118=16;
            alt118 = dfa118.predict(input);
            switch (alt118) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2207:7: t1= block
                    {
                    pushFollow(FOLLOW_block_in_statement8789);
                    t1=block();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      //ret_stat = (Statement) t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2212:9: t2= ASSERT t3= expression ( ':' t4= expression )? ';'
                    {
                    t2=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_statement8815); if (state.failed) return ret;
                    pushFollow(FOLLOW_expression_in_statement8819);
                    t3=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2212:33: ( ':' t4= expression )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==67) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:2212:34: ':' t4= expression
                            {
                            match(input,67,FOLLOW_67_in_statement8822); if (state.failed) return ret;
                            pushFollow(FOLLOW_expression_in_statement8826);
                            t4=expression();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    match(input,26,FOLLOW_26_in_statement8830); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                        
                                      list.add(t2);
                                      list.add(t3);
                                      if(t4 != null){
                                          list.add(new StringDeclaration(":"));
                                          list.add(t4);
                                      }
                                      list.add(new StringDeclaration(";"));
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2222:9: 'if' t5= parExpression t6= statement ( options {k=1; } : 'else' t8= statement )?
                    {
                    match(input,68,FOLLOW_68_in_statement8854); if (state.failed) return ret;
                    pushFollow(FOLLOW_parExpression_in_statement8858);
                    t5=parExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    pushFollow(FOLLOW_statement_in_statement8862);
                    t6=statement();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("if"));
                                      list.add(t5.ret);
                                      list.add(t6);
                                      //ret_stat = (Statement) new IfStatement(tok2, stat1);
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:2229:9: ( options {k=1; } : 'else' t8= statement )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==69) ) {
                        int LA113_1 = input.LA(2);

                        if ( (synpred150_Java()) ) {
                            alt113=1;
                        }
                    }
                    switch (alt113) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:2229:25: 'else' t8= statement
                            {
                            match(input,69,FOLLOW_69_in_statement8894); if (state.failed) return ret;
                            pushFollow(FOLLOW_statement_in_statement8898);
                            t8=statement();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(t8);
                                              //ret_stat = (Statement) new IfStatement(tok2, stat1, stat2);
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:2235:9: 'for' '(' t9= forControl ')' t10= statement
                    {
                    match(input,70,FOLLOW_70_in_statement8933); if (state.failed) return ret;
                    match(input,58,FOLLOW_58_in_statement8935); if (state.failed) return ret;
                    pushFollow(FOLLOW_forControl_in_statement8939);
                    t9=forControl();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,59,FOLLOW_59_in_statement8941); if (state.failed) return ret;
                    pushFollow(FOLLOW_statement_in_statement8945);
                    t10=statement();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("for"));
                                      if(t9 != null){
                                          list.add(new StringDeclaration("{"));
                                          list.add(t9);
                                          list.add(new StringDeclaration("}"));
                                      }
                                      list.add(t10);
                                      //forControl.setBody(stat2);
                                      //ret_stat = (Statement)tok3;
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:2247:9: 'while' t11= parExpression t12= statement
                    {
                    match(input,71,FOLLOW_71_in_statement8969); if (state.failed) return ret;
                    pushFollow(FOLLOW_parExpression_in_statement8973);
                    t11=parExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    pushFollow(FOLLOW_statement_in_statement8977);
                    t12=statement();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("while"));
                                      list.add(t11.ret);
                                      list.add(t12);
                                      //ret_stat = (Statement) new WhileLoop(tok4, stat3);
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:2254:9: 'do' t13= statement 'while' t14= parExpression ';'
                    {
                    match(input,72,FOLLOW_72_in_statement9001); if (state.failed) return ret;
                    pushFollow(FOLLOW_statement_in_statement9005);
                    t13=statement();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,71,FOLLOW_71_in_statement9007); if (state.failed) return ret;
                    pushFollow(FOLLOW_parExpression_in_statement9011);
                    t14=parExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,26,FOLLOW_26_in_statement9013); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("do"));
                                      list.add(t13);
                                      list.add(new StringDeclaration("while"));
                                      list.add(t14.ret);
                                      //ret_stat = (Statement) new DoLoop(stat4, tok5);
                                  
                    }

                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:2262:9: 'try' t15= block (t16= catches 'finally' t17= block | t18= catches | 'finally' t19= block )
                    {
                    match(input,73,FOLLOW_73_in_statement9037); if (state.failed) return ret;
                    pushFollow(FOLLOW_block_in_statement9041);
                    t15=block();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("try"));
                                      list.add(t15);
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:2267:9: (t16= catches 'finally' t17= block | t18= catches | 'finally' t19= block )
                    int alt114=3;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==80) ) {
                        int LA114_1 = input.LA(2);

                        if ( (LA114_1==58) ) {
                            int LA114_3 = input.LA(3);

                            if ( (synpred155_Java()) ) {
                                alt114=1;
                            }
                            else if ( (synpred156_Java()) ) {
                                alt114=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ret;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 114, 3, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ret;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 114, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA114_0==74) ) {
                        alt114=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 114, 0, input);

                        throw nvae;
                    }
                    switch (alt114) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:2267:11: t16= catches 'finally' t17= block
                            {
                            pushFollow(FOLLOW_catches_in_statement9069);
                            t16=catches();

                            state._fsp--;
                            if (state.failed) return ret;
                            match(input,74,FOLLOW_74_in_statement9071); if (state.failed) return ret;
                            pushFollow(FOLLOW_block_in_statement9075);
                            t17=block();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(t16);
                                              list.add(t17);
                                          
                            }

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:2272:11: t18= catches
                            {
                            pushFollow(FOLLOW_catches_in_statement9103);
                            t18=catches();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(t18);
                                          
                            }

                            }
                            break;
                        case 3 :
                            // src/cedp/src2src/frontend/java/Java.g:2276:11: 'finally' t19= block
                            {
                            match(input,74,FOLLOW_74_in_statement9129); if (state.failed) return ret;
                            pushFollow(FOLLOW_block_in_statement9135);
                            t19=block();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(new StringDeclaration("finally"));
                                              list.add(t19);
                                              //CompoundStatement cstat = new CompoundStatement();
                                              //cstat.addStatement(t1);
                                              //ret_stat = cstat;
                                              /* TODO  t2, t3, catches */
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:2286:9: 'switch' t20= parExpression '{' t21= switchBlockStatementGroups '}'
                    {
                    match(input,75,FOLLOW_75_in_statement9169); if (state.failed) return ret;
                    pushFollow(FOLLOW_parExpression_in_statement9173);
                    t20=parExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,44,FOLLOW_44_in_statement9175); if (state.failed) return ret;
                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement9179);
                    t21=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,45,FOLLOW_45_in_statement9181); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      list.add(new StringDeclaration("switch"));
                                      list.add(t20.ret);
                                      list.add(new StringDeclaration("{"));
                                      list.add(t21);
                                      list.add(new StringDeclaration("}"));
                                      //ret_stat = (Statement) new SwitchStatement(tok6, tok7);
                                  
                    }

                    }
                    break;
                case 9 :
                    // src/cedp/src2src/frontend/java/Java.g:2295:9: 'synchronized' t22= parExpression t22_1= block
                    {
                    match(input,53,FOLLOW_53_in_statement9205); if (state.failed) return ret;
                    pushFollow(FOLLOW_parExpression_in_statement9209);
                    t22=parExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    pushFollow(FOLLOW_block_in_statement9213);
                    t22_1=block();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("synchronized"));
                                      list.add(t22.ret);
                                      list.add(t22_1);
                                  
                    }

                    }
                    break;
                case 10 :
                    // src/cedp/src2src/frontend/java/Java.g:2301:9: 'return' (t23= expression )? ';'
                    {
                    if ( state.backtracking==0 ) {
                       check1 = 0; 
                    }
                    match(input,76,FOLLOW_76_in_statement9238); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2301:33: (t23= expression )?
                    int alt115=2;
                    alt115 = dfa115.predict(input);
                    switch (alt115) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:2301:34: t23= expression
                            {
                            pushFollow(FOLLOW_expression_in_statement9243);
                            t23=expression();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {
                               check1 = 1; 
                            }

                            }
                            break;

                    }

                    match(input,26,FOLLOW_26_in_statement9249); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("return"));
                                      list.add(t23);
                                      list.add(new StringDeclaration(";"));
                                      //if(check1 == 0 || tok8 == null)
                                      //    ret_stat = (Statement) new ReturnStatement();
                                      //else
                                      //    ret_stat = (Statement) new ReturnStatement(tok8);
                                  
                    }

                    }
                    break;
                case 11 :
                    // src/cedp/src2src/frontend/java/Java.g:2311:9: 'throw' t24= expression ';'
                    {
                    match(input,77,FOLLOW_77_in_statement9273); if (state.failed) return ret;
                    pushFollow(FOLLOW_expression_in_statement9277);
                    t24=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,26,FOLLOW_26_in_statement9279); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("throw"));
                                      list.add(t24);
                                      list.add(new StringDeclaration(";"));
                                      //ret_stat = (Statement) new Statement();
                                      //ret_stat.addChild(0, new ThrowExpression(tok9));
                                  
                    }

                    }
                    break;
                case 12 :
                    // src/cedp/src2src/frontend/java/Java.g:2319:9: 'break' (t25= Identifier )? ';'
                    {
                    match(input,78,FOLLOW_78_in_statement9303); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2319:20: (t25= Identifier )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==Identifier) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: t25= Identifier
                            {
                            t25=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement9307); if (state.failed) return ret;

                            }
                            break;

                    }

                    match(input,26,FOLLOW_26_in_statement9310); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      list.add(new StringDeclaration("break"));
                                      if(t25 != null)
                                          list.add((t25!=null?t25.getText():null));
                                      list.add(new StringDeclaration(";"));
                                      //ret_stat = (Statement) new BreakStatement(); /* TODO Identifier support */
                                  
                    }

                    }
                    break;
                case 13 :
                    // src/cedp/src2src/frontend/java/Java.g:2327:9: 'continue' (t26= Identifier )? ';'
                    {
                    match(input,79,FOLLOW_79_in_statement9334); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2327:23: (t26= Identifier )?
                    int alt117=2;
                    int LA117_0 = input.LA(1);

                    if ( (LA117_0==Identifier) ) {
                        alt117=1;
                    }
                    switch (alt117) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: t26= Identifier
                            {
                            t26=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement9338); if (state.failed) return ret;

                            }
                            break;

                    }

                    match(input,26,FOLLOW_26_in_statement9341); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      list.add(new StringDeclaration("continue"));
                                      if(t26 != null)
                                          list.add((t26!=null?t26.getText():null));
                                      list.add(new StringDeclaration(";"));
                                      //ret_stat = (Statement) new ContinueStatement(); /* TODO Identifier support */
                                  
                    }

                    }
                    break;
                case 14 :
                    // src/cedp/src2src/frontend/java/Java.g:2335:9: ';'
                    {
                    match(input,26,FOLLOW_26_in_statement9365); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      list.add(new StringDeclaration(";"));
                                      //ret_stat = new NullStatement();
                                  
                    }

                    }
                    break;
                case 15 :
                    // src/cedp/src2src/frontend/java/Java.g:2340:9: t28= statementExpression ';'
                    {
                    pushFollow(FOLLOW_statementExpression_in_statement9391);
                    t28=statementExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,26,FOLLOW_26_in_statement9393); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t28);
                                      list.add(new StringDeclaration(";"));
                                      //ret_stat = (Statement) new Statement();
                                      //ret_stat.addChild(0, tok10);
                                  
                    }

                    }
                    break;
                case 16 :
                    // src/cedp/src2src/frontend/java/Java.g:2347:9: t29= Identifier ':' t30= statement
                    {
                    t29=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement9419); if (state.failed) return ret;
                    match(input,67,FOLLOW_67_in_statement9421); if (state.failed) return ret;
                    pushFollow(FOLLOW_statement_in_statement9425);
                    t30=statement();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t29);
                                      list.add(new StringDeclaration(":"));
                                      list.add(t30);
                                      //Label label = new Label(new NameID((t11!=null?input.toString(t11.start,t11.stop):null)));
                                      //ret_stat = label;
                                      //ret_stat.addChild(0, t12);
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, statement_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "statement"


    // $ANTLR start "catches"
    // src/cedp/src2src/frontend/java/Java.g:2358:1: catches returns [Declaration ret] : t1= catchClause (t2= catchClause )* ;
    public final Declaration catches() throws RecognitionException {
        Declaration ret = null;
        int catches_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("catches"); LinkedList list = new LinkedList();  
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2361:5: (t1= catchClause (t2= catchClause )* )
            // src/cedp/src2src/frontend/java/Java.g:2361:9: t1= catchClause (t2= catchClause )*
            {
            pushFollow(FOLLOW_catchClause_in_catches9483);
            t1=catchClause();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2365:9: (t2= catchClause )*
            loop119:
            do {
                int alt119=2;
                alt119 = dfa119.predict(input);
                switch (alt119) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2365:10: t2= catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches9511);
            	    t2=catchClause();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, catches_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "catches"


    // $ANTLR start "catchClause"
    // src/cedp/src2src/frontend/java/Java.g:2372:1: catchClause returns [Declaration ret] : 'catch' '(' t1= formalParameter ')' t2= block ;
    public final Declaration catchClause() throws RecognitionException {
        Declaration ret = null;
        int catchClause_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("catchClause"); LinkedList list = new LinkedList();  
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2375:5: ( 'catch' '(' t1= formalParameter ')' t2= block )
            // src/cedp/src2src/frontend/java/Java.g:2375:9: 'catch' '(' t1= formalParameter ')' t2= block
            {
            match(input,80,FOLLOW_80_in_catchClause9578); if (state.failed) return ret;
            match(input,58,FOLLOW_58_in_catchClause9580); if (state.failed) return ret;
            pushFollow(FOLLOW_formalParameter_in_catchClause9584);
            t1=formalParameter();

            state._fsp--;
            if (state.failed) return ret;
            match(input,59,FOLLOW_59_in_catchClause9586); if (state.failed) return ret;
            pushFollow(FOLLOW_block_in_catchClause9590);
            t2=block();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("catch"));
                              list.add(new StringDeclaration("("));
                              list.add(t1);
                              list.add(new StringDeclaration(")"));
                              list.add(t2);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, catchClause_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "catchClause"


    // $ANTLR start "formalParameter"
    // src/cedp/src2src/frontend/java/Java.g:2385:1: formalParameter returns [Declaration ret] : t1= variableModifiers t2= type t3= variableDeclaratorId ;
    public final Declaration formalParameter() throws RecognitionException {
        Declaration ret = null;
        int formalParameter_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        NameID t3 = null;


         if(dFlag) System.out.println("formalParameter"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2388:5: (t1= variableModifiers t2= type t3= variableDeclaratorId )
            // src/cedp/src2src/frontend/java/Java.g:2388:9: t1= variableModifiers t2= type t3= variableDeclaratorId
            {
            pushFollow(FOLLOW_variableModifiers_in_formalParameter9648);
            t1=variableModifiers();

            state._fsp--;
            if (state.failed) return ret;
            pushFollow(FOLLOW_type_in_formalParameter9652);
            t2=type();

            state._fsp--;
            if (state.failed) return ret;
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter9656);
            t3=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(t2);
                              list.add(t3);
                              //ret_decl = new VariableDeclarator(MergeList(t1,t2), t3);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, formalParameter_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "formalParameter"


    // $ANTLR start "switchBlockStatementGroups"
    // src/cedp/src2src/frontend/java/Java.g:2398:1: switchBlockStatementGroups returns [Declaration ret] : (t1= switchBlockStatementGroup )* ;
    public final Declaration switchBlockStatementGroups() throws RecognitionException {
        Declaration ret = null;
        int switchBlockStatementGroups_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("switchBlockStatementGroups"); cstat = new CompoundStatement(); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2401:5: ( (t1= switchBlockStatementGroup )* )
            // src/cedp/src2src/frontend/java/Java.g:2401:9: (t1= switchBlockStatementGroup )*
            {
            // src/cedp/src2src/frontend/java/Java.g:2401:9: (t1= switchBlockStatementGroup )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==66||LA120_0==81) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2401:10: t1= switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups9717);
            	    t1=switchBlockStatementGroup();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       
            	                      list.add(t1);
            	                      //cstat.addStatement(t1);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, switchBlockStatementGroups_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "switchBlockStatementGroups"


    // $ANTLR start "switchBlockStatementGroup"
    // src/cedp/src2src/frontend/java/Java.g:2413:1: switchBlockStatementGroup returns [Declaration ret] : (t1= switchLabel )+ (t2= blockStatement )* ;
    public final Declaration switchBlockStatementGroup() throws RecognitionException {
        Declaration ret = null;
        int switchBlockStatementGroup_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("switchBlockStatementGroup"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2416:5: ( (t1= switchLabel )+ (t2= blockStatement )* )
            // src/cedp/src2src/frontend/java/Java.g:2416:9: (t1= switchLabel )+ (t2= blockStatement )*
            {
            // src/cedp/src2src/frontend/java/Java.g:2416:9: (t1= switchLabel )+
            int cnt121=0;
            loop121:
            do {
                int alt121=2;
                alt121 = dfa121.predict(input);
                switch (alt121) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2416:10: t1= switchLabel
            	    {
            	    pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup9788);
            	    t1=switchLabel();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt121 >= 1 ) break loop121;
            	    if (state.backtracking>0) {state.failed=true; return ret;}
                        EarlyExitException eee =
                            new EarlyExitException(121, input);
                        throw eee;
                }
                cnt121++;
            } while (true);

            // src/cedp/src2src/frontend/java/Java.g:2421:9: (t2= blockStatement )*
            loop122:
            do {
                int alt122=2;
                alt122 = dfa122.predict(input);
                switch (alt122) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2421:10: t2= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup9827);
            	    t2=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, switchBlockStatementGroup_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "switchBlockStatementGroup"


    // $ANTLR start "switchLabel"
    // src/cedp/src2src/frontend/java/Java.g:2429:1: switchLabel returns [Declaration ret] : ( 'case' t1= constantExpression ':' | 'case' t2= enumConstantName ':' | 'default' ':' );
    public final Declaration switchLabel() throws RecognitionException {
        Declaration ret = null;
        int switchLabel_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("switchLabel"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2432:5: ( 'case' t1= constantExpression ':' | 'case' t2= enumConstantName ':' | 'default' ':' )
            int alt123=3;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2432:9: 'case' t1= constantExpression ':'
                    {
                    match(input,81,FOLLOW_81_in_switchLabel9896); if (state.failed) return ret;
                    pushFollow(FOLLOW_constantExpression_in_switchLabel9900);
                    t1=constantExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,67,FOLLOW_67_in_switchLabel9902); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("case"));
                                      list.add(t1);
                                      list.add(new StringDeclaration(":"));
                                      //ret_case = new Case(constantExpression);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2439:9: 'case' t2= enumConstantName ':'
                    {
                    match(input,81,FOLLOW_81_in_switchLabel9926); if (state.failed) return ret;
                    pushFollow(FOLLOW_enumConstantName_in_switchLabel9930);
                    t2=enumConstantName();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,67,FOLLOW_67_in_switchLabel9932); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      list.add(new StringDeclaration("case"));
                                      list.add(t2);
                                      list.add(new StringDeclaration(":"));
                                      //ret_case = new Case(constantExpression);
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2446:9: 'default' ':'
                    {
                    match(input,66,FOLLOW_66_in_switchLabel9956); if (state.failed) return ret;
                    match(input,67,FOLLOW_67_in_switchLabel9958); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      list.add(new StringDeclaration("default"));
                                      list.add(new StringDeclaration(":"));
                                      //ret_case = new Default();
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, switchLabel_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "switchLabel"


    // $ANTLR start "forControl"
    // src/cedp/src2src/frontend/java/Java.g:2455:1: forControl returns [Declaration ret] options {k=3; } : (t1= enhancedForControl | (t2= forInit )? ';' (t3= expression )? ';' (t4= forUpdate )? );
    public final Declaration forControl() throws RecognitionException {
        Declaration ret = null;
        int forControl_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Expression t3 = null;

        Declaration t4 = null;


         if(dFlag) System.out.println("forControl"); Statement stat=null; Expression expr1=null, expr2=null; LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2458:5: (t1= enhancedForControl | (t2= forInit )? ';' (t3= expression )? ';' (t4= forUpdate )? )
            int alt127=2;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2458:9: t1= enhancedForControl
                    {
                    pushFollow(FOLLOW_enhancedForControl_in_forControl10021);
                    t1=enhancedForControl();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t1;
                                      //forloop = enhancedForControl;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2463:9: (t2= forInit )? ';' (t3= expression )? ';' (t4= forUpdate )?
                    {
                    // src/cedp/src2src/frontend/java/Java.g:2463:11: (t2= forInit )?
                    int alt124=2;
                    alt124 = dfa124.predict(input);
                    switch (alt124) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: t2= forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl10047);
                            t2=forInit();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    match(input,26,FOLLOW_26_in_forControl10050); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2463:27: (t3= expression )?
                    int alt125=2;
                    alt125 = dfa125.predict(input);
                    switch (alt125) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: t3= expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl10054);
                            t3=expression();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    match(input,26,FOLLOW_26_in_forControl10057); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2463:46: (t4= forUpdate )?
                    int alt126=2;
                    alt126 = dfa126.predict(input);
                    switch (alt126) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: t4= forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl10061);
                            t4=forUpdate();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       
                                      if(t2 != null)
                                          list.add(t2);
                                      list.add(new StringDeclaration(";"));
                                      if(t3 != null)
                                          list.add(t3);
                                      list.add(new StringDeclaration(";"));
                                      if(t4 != null)
                                          list.add(t4);
                                      ret = new StringDeclaration(list);
                                      //forloop = new ForLoop(stat, expr1, expr2, null);
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, forControl_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "forControl"


    // $ANTLR start "forInit"
    // src/cedp/src2src/frontend/java/Java.g:2478:1: forInit returns [Declaration ret] : (t1= localVariableDeclaration | t2= expressionList );
    public final Declaration forInit() throws RecognitionException {
        Declaration ret = null;
        int forInit_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("forInit"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2480:5: (t1= localVariableDeclaration | t2= expressionList )
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2480:9: t1= localVariableDeclaration
                    {
                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit10111);
                    t1=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t1;
                                      //stat = TODO;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2485:9: t2= expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forInit10137);
                    t2=expressionList();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t2;
                                      //stat = TODO;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, forInit_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "forInit"


    // $ANTLR start "enhancedForControl"
    // src/cedp/src2src/frontend/java/Java.g:2493:1: enhancedForControl returns [Declaration ret] : t1= variableModifiers t2= type t3= Identifier ':' t4= expression ;
    public final Declaration enhancedForControl() throws RecognitionException {
        Declaration ret = null;
        int enhancedForControl_StartIndex = input.index();
        Token t3=null;
        Declaration t1 = null;

        Declaration t2 = null;

        Expression t4 = null;


         if(dFlag) System.out.println("enhancedForControl"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2496:5: (t1= variableModifiers t2= type t3= Identifier ':' t4= expression )
            // src/cedp/src2src/frontend/java/Java.g:2496:9: t1= variableModifiers t2= type t3= Identifier ':' t4= expression
            {
            pushFollow(FOLLOW_variableModifiers_in_enhancedForControl10197);
            t1=variableModifiers();

            state._fsp--;
            if (state.failed) return ret;
            pushFollow(FOLLOW_type_in_enhancedForControl10201);
            t2=type();

            state._fsp--;
            if (state.failed) return ret;
            t3=(Token)match(input,Identifier,FOLLOW_Identifier_in_enhancedForControl10205); if (state.failed) return ret;
            match(input,67,FOLLOW_67_in_enhancedForControl10207); if (state.failed) return ret;
            pushFollow(FOLLOW_expression_in_enhancedForControl10211);
            t4=expression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(t2);
                              list.add(new StringDeclaration((t3!=null?t3.getText():null)));
                              list.add(new StringDeclaration(":"));
                              list.add(t4);
                              //System.out.println("Unsupported for-loop style\n"); System.exit(-1);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, enhancedForControl_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "enhancedForControl"


    // $ANTLR start "forUpdate"
    // src/cedp/src2src/frontend/java/Java.g:2508:1: forUpdate returns [Declaration ret] : t1= expressionList ;
    public final Declaration forUpdate() throws RecognitionException {
        Declaration ret = null;
        int forUpdate_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("forUpdate"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2510:5: (t1= expressionList )
            // src/cedp/src2src/frontend/java/Java.g:2510:9: t1= expressionList
            {
            pushFollow(FOLLOW_expressionList_in_forUpdate10262);
            t1=expressionList();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              ret = t1;
                              //expr = expressionList;
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, forUpdate_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "forUpdate"

    public static class parExpression_return extends ParserRuleReturnScope {
        public Declaration ret;
    };

    // $ANTLR start "parExpression"
    // src/cedp/src2src/frontend/java/Java.g:2519:1: parExpression returns [Declaration ret] : '(' t1= expression ')' ;
    public final JavaParser.parExpression_return parExpression() throws RecognitionException {
        JavaParser.parExpression_return retval = new JavaParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Expression t1 = null;


         if(dFlag) System.out.println("parExpression"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // src/cedp/src2src/frontend/java/Java.g:2522:5: ( '(' t1= expression ')' )
            // src/cedp/src2src/frontend/java/Java.g:2522:9: '(' t1= expression ')'
            {
            match(input,58,FOLLOW_58_in_parExpression10321); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_parExpression10325);
            t1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("("));
                              list.add(t1);
                              list.add(new StringDeclaration(")"));
                              //expr = t1;
                          
            }
            match(input,59,FOLLOW_59_in_parExpression10349); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {
               retval.ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"


    // $ANTLR start "expressionList"
    // src/cedp/src2src/frontend/java/Java.g:2533:1: expressionList returns [Declaration ret] : t1= expression ( ',' t2= expression )* ;
    public final Declaration expressionList() throws RecognitionException {
        Declaration ret = null;
        int expressionList_StartIndex = input.index();
        Expression t1 = null;

        Expression t2 = null;


         if(dFlag) System.out.println("expressionList"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2536:5: (t1= expression ( ',' t2= expression )* )
            // src/cedp/src2src/frontend/java/Java.g:2536:9: t1= expression ( ',' t2= expression )*
            {
            pushFollow(FOLLOW_expression_in_expressionList10395);
            t1=expression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2541:9: ( ',' t2= expression )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==41) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2541:10: ',' t2= expression
            	    {
            	    match(input,41,FOLLOW_41_in_expressionList10420); if (state.failed) return ret;
            	    pushFollow(FOLLOW_expression_in_expressionList10424);
            	    t2=expression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t2);
            	                      //ret_expr = new CommaExpression(list);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, expressionList_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "expressionList"


    // $ANTLR start "statementExpression"
    // src/cedp/src2src/frontend/java/Java.g:2550:1: statementExpression returns [Declaration ret] : t1= expression ;
    public final Declaration statementExpression() throws RecognitionException {
        Declaration ret = null;
        int statementExpression_StartIndex = input.index();
        Expression t1 = null;


         if(dFlag) System.out.println("statementExpression"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2552:5: (t1= expression )
            // src/cedp/src2src/frontend/java/Java.g:2552:9: t1= expression
            {
            pushFollow(FOLLOW_expression_in_statementExpression10486);
            t1=expression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              ret = t1;
                              //expr = expression;
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, statementExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "statementExpression"


    // $ANTLR start "constantExpression"
    // src/cedp/src2src/frontend/java/Java.g:2560:1: constantExpression returns [Declaration ret] : t1= expression ;
    public final Declaration constantExpression() throws RecognitionException {
        Declaration ret = null;
        int constantExpression_StartIndex = input.index();
        Expression t1 = null;


         if(dFlag) System.out.println("constantExpression"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2562:5: (t1= expression )
            // src/cedp/src2src/frontend/java/Java.g:2562:9: t1= expression
            {
            pushFollow(FOLLOW_expression_in_constantExpression10537);
            t1=expression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
                 
                              ret = t1;
                              //expr = expression;
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, constantExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "constantExpression"


    // $ANTLR start "expression"
    // src/cedp/src2src/frontend/java/Java.g:2572:1: expression returns [Expression ret] : t1= conditionalExpression (t2= assignmentOperator t3= expression )? ;
    public final Expression expression() throws RecognitionException {
        Expression ret = null;
        int expression_StartIndex = input.index();
        Expression t1 = null;

        AssignmentOperator t2 = null;

        Expression t3 = null;


         if(dFlag) System.out.println("expression"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2574:5: (t1= conditionalExpression (t2= assignmentOperator t3= expression )? )
            // src/cedp/src2src/frontend/java/Java.g:2574:9: t1= conditionalExpression (t2= assignmentOperator t3= expression )?
            {
            pushFollow(FOLLOW_conditionalExpression_in_expression10591);
            t1=conditionalExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
              ret = t1; 
            }
            // src/cedp/src2src/frontend/java/Java.g:2575:9: (t2= assignmentOperator t3= expression )?
            int alt130=2;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2575:10: t2= assignmentOperator t3= expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression10606);
                    t2=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return ret;
                    pushFollow(FOLLOW_expression_in_expression10610);
                    t3=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = new BinaryExpression(ret, t2, t3); 
                    }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, expression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "expression"


    // $ANTLR start "conditionalExpression"
    // src/cedp/src2src/frontend/java/Java.g:2578:1: conditionalExpression returns [Expression ret] : t1= conditionalOrExpression ( '?' t2= expression ':' t3= expression )? ;
    public final Expression conditionalExpression() throws RecognitionException {
        Expression ret = null;
        int conditionalExpression_StartIndex = input.index();
        Expression t1 = null;

        Expression t2 = null;

        Expression t3 = null;


         if(dFlag) System.out.println("conditionalExpression"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2580:5: (t1= conditionalOrExpression ( '?' t2= expression ':' t3= expression )? )
            // src/cedp/src2src/frontend/java/Java.g:2580:9: t1= conditionalOrExpression ( '?' t2= expression ':' t3= expression )?
            {
            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression10649);
            t1=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               ret = t1; 
            }
            // src/cedp/src2src/frontend/java/Java.g:2582:9: ( '?' t2= expression ':' t3= expression )?
            int alt131=2;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2582:11: '?' t2= expression ':' t3= expression
                    {
                    match(input,56,FOLLOW_56_in_conditionalExpression10675); if (state.failed) return ret;
                    pushFollow(FOLLOW_expression_in_conditionalExpression10679);
                    t2=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,67,FOLLOW_67_in_conditionalExpression10681); if (state.failed) return ret;
                    pushFollow(FOLLOW_expression_in_conditionalExpression10685);
                    t3=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = new ConditionalExpression(t1, t2, t3); 
                    }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, conditionalExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "conditionalExpression"


    // $ANTLR start "conditionalOrExpression"
    // src/cedp/src2src/frontend/java/Java.g:2587:1: conditionalOrExpression returns [Expression ret] : t1= conditionalAndExpression ( '||' t2= conditionalAndExpression )* ;
    public final Expression conditionalOrExpression() throws RecognitionException {
        Expression ret = null;
        int conditionalOrExpression_StartIndex = input.index();
        Expression t1 = null;

        Expression t2 = null;


         if(dFlag) System.out.println("conditionalOrExpression"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2589:5: (t1= conditionalAndExpression ( '||' t2= conditionalAndExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2589:9: t1= conditionalAndExpression ( '||' t2= conditionalAndExpression )*
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression10746);
            t1=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               ret = t1; 
            }
            // src/cedp/src2src/frontend/java/Java.g:2590:9: ( '||' t2= conditionalAndExpression )*
            loop132:
            do {
                int alt132=2;
                alt132 = dfa132.predict(input);
                switch (alt132) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2590:11: '||' t2= conditionalAndExpression
            	    {
            	    match(input,82,FOLLOW_82_in_conditionalOrExpression10760); if (state.failed) return ret;
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression10764);
            	    t2=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       ret = new BinaryExpression(ret, BinaryOperator.LOGICAL_OR, t2); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, conditionalOrExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "conditionalOrExpression"


    // $ANTLR start "conditionalAndExpression"
    // src/cedp/src2src/frontend/java/Java.g:2595:1: conditionalAndExpression returns [Expression ret] : t1= inclusiveOrExpression ( '&&' t2= inclusiveOrExpression )* ;
    public final Expression conditionalAndExpression() throws RecognitionException {
        Expression ret = null;
        int conditionalAndExpression_StartIndex = input.index();
        Expression t1 = null;

        Expression t2 = null;


         if(dFlag) System.out.println("conditionalAndExpression"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2597:5: (t1= inclusiveOrExpression ( '&&' t2= inclusiveOrExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2597:9: t1= inclusiveOrExpression ( '&&' t2= inclusiveOrExpression )*
            {
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression10825);
            t1=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               ret = t1; 
            }
            // src/cedp/src2src/frontend/java/Java.g:2598:9: ( '&&' t2= inclusiveOrExpression )*
            loop133:
            do {
                int alt133=2;
                alt133 = dfa133.predict(input);
                switch (alt133) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2598:11: '&&' t2= inclusiveOrExpression
            	    {
            	    match(input,83,FOLLOW_83_in_conditionalAndExpression10839); if (state.failed) return ret;
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression10843);
            	    t2=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       ret = new BinaryExpression(ret, BinaryOperator.LOGICAL_AND, t2); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, conditionalAndExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "conditionalAndExpression"


    // $ANTLR start "inclusiveOrExpression"
    // src/cedp/src2src/frontend/java/Java.g:2603:1: inclusiveOrExpression returns [Expression ret] : t1= exclusiveOrExpression ( '|' t2= exclusiveOrExpression )* ;
    public final Expression inclusiveOrExpression() throws RecognitionException {
        Expression ret = null;
        int inclusiveOrExpression_StartIndex = input.index();
        Expression t1 = null;

        Expression t2 = null;


         if(dFlag) System.out.println("inclusiveOrExpression"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2605:5: (t1= exclusiveOrExpression ( '|' t2= exclusiveOrExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2605:9: t1= exclusiveOrExpression ( '|' t2= exclusiveOrExpression )*
            {
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10904);
            t1=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               ret = t1; 
            }
            // src/cedp/src2src/frontend/java/Java.g:2607:9: ( '|' t2= exclusiveOrExpression )*
            loop134:
            do {
                int alt134=2;
                alt134 = dfa134.predict(input);
                switch (alt134) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2607:11: '|' t2= exclusiveOrExpression
            	    {
            	    match(input,84,FOLLOW_84_in_inclusiveOrExpression10930); if (state.failed) return ret;
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10936);
            	    t2=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       ret = new BinaryExpression(ret, BinaryOperator.BITWISE_INCLUSIVE_OR, t2); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, inclusiveOrExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "inclusiveOrExpression"


    // $ANTLR start "exclusiveOrExpression"
    // src/cedp/src2src/frontend/java/Java.g:2612:1: exclusiveOrExpression returns [Expression ret] : t1= andExpression ( '^' t2= andExpression )* ;
    public final Expression exclusiveOrExpression() throws RecognitionException {
        Expression ret = null;
        int exclusiveOrExpression_StartIndex = input.index();
        Expression t1 = null;

        Expression t2 = null;


         if(dFlag) System.out.println("exclusiveOrExpression"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2614:5: (t1= andExpression ( '^' t2= andExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2614:9: t1= andExpression ( '^' t2= andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression10997);
            t1=andExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               ret = t1; 
            }
            // src/cedp/src2src/frontend/java/Java.g:2615:9: ( '^' t2= andExpression )*
            loop135:
            do {
                int alt135=2;
                alt135 = dfa135.predict(input);
                switch (alt135) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2615:11: '^' t2= andExpression
            	    {
            	    match(input,85,FOLLOW_85_in_exclusiveOrExpression11011); if (state.failed) return ret;
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression11017);
            	    t2=andExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       ret = new BinaryExpression(ret, BinaryOperator.BITWISE_EXCLUSIVE_OR, t2); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, exclusiveOrExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "exclusiveOrExpression"


    // $ANTLR start "andExpression"
    // src/cedp/src2src/frontend/java/Java.g:2620:1: andExpression returns [Expression ret] : t1= equalityExpression ( '&' t2= equalityExpression )* ;
    public final Expression andExpression() throws RecognitionException {
        Expression ret = null;
        int andExpression_StartIndex = input.index();
        Expression t1 = null;

        Expression t2 = null;


         if(dFlag) System.out.println("andExpression"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2622:5: (t1= equalityExpression ( '&' t2= equalityExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2622:9: t1= equalityExpression ( '&' t2= equalityExpression )*
            {
            pushFollow(FOLLOW_equalityExpression_in_andExpression11078);
            t1=equalityExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               ret = t1; 
            }
            // src/cedp/src2src/frontend/java/Java.g:2623:9: ( '&' t2= equalityExpression )*
            loop136:
            do {
                int alt136=2;
                alt136 = dfa136.predict(input);
                switch (alt136) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2623:11: '&' t2= equalityExpression
            	    {
            	    match(input,43,FOLLOW_43_in_andExpression11092); if (state.failed) return ret;
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression11096);
            	    t2=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       ret = new BinaryExpression(ret, BinaryOperator.BITWISE_AND, t2); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, andExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "andExpression"


    // $ANTLR start "equalityExpression"
    // src/cedp/src2src/frontend/java/Java.g:2628:1: equalityExpression returns [Expression ret] : t1= instanceOfExpression ( ( '==' | '!=' ) t2= instanceOfExpression )* ;
    public final Expression equalityExpression() throws RecognitionException {
        Expression ret = null;
        int equalityExpression_StartIndex = input.index();
        Expression t1 = null;

        Expression t2 = null;


         if(dFlag) System.out.println("equalityExpression"); BinaryOperator op=null; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2630:5: (t1= instanceOfExpression ( ( '==' | '!=' ) t2= instanceOfExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2630:9: t1= instanceOfExpression ( ( '==' | '!=' ) t2= instanceOfExpression )*
            {
            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression11155);
            t1=instanceOfExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               ret = t1; 
            }
            // src/cedp/src2src/frontend/java/Java.g:2631:9: ( ( '==' | '!=' ) t2= instanceOfExpression )*
            loop138:
            do {
                int alt138=2;
                alt138 = dfa138.predict(input);
                switch (alt138) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2631:11: ( '==' | '!=' ) t2= instanceOfExpression
            	    {
            	    // src/cedp/src2src/frontend/java/Java.g:2631:11: ( '==' | '!=' )
            	    int alt137=2;
            	    int LA137_0 = input.LA(1);

            	    if ( (LA137_0==86) ) {
            	        alt137=1;
            	    }
            	    else if ( (LA137_0==87) ) {
            	        alt137=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ret;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 137, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt137) {
            	        case 1 :
            	            // src/cedp/src2src/frontend/java/Java.g:2631:12: '=='
            	            {
            	            match(input,86,FOLLOW_86_in_equalityExpression11170); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op=BinaryOperator.COMPARE_EQ; 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // src/cedp/src2src/frontend/java/Java.g:2631:52: '!='
            	            {
            	            match(input,87,FOLLOW_87_in_equalityExpression11175); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op = BinaryOperator.COMPARE_NE; 
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression11183);
            	    t2=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       ret = new BinaryExpression(ret, op, t2); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, equalityExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "equalityExpression"


    // $ANTLR start "instanceOfExpression"
    // src/cedp/src2src/frontend/java/Java.g:2636:1: instanceOfExpression returns [Expression ret] : t1= relationalExpression ( 'instanceof' t2= type )? ;
    public final Expression instanceOfExpression() throws RecognitionException {
        Expression ret = null;
        int instanceOfExpression_StartIndex = input.index();
        Expression t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("instanceOfExpression"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2638:5: (t1= relationalExpression ( 'instanceof' t2= type )? )
            // src/cedp/src2src/frontend/java/Java.g:2638:9: t1= relationalExpression ( 'instanceof' t2= type )?
            {
            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression11242);
            t1=relationalExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               ret = t1; 
            }
            // src/cedp/src2src/frontend/java/Java.g:2639:9: ( 'instanceof' t2= type )?
            int alt139=2;
            alt139 = dfa139.predict(input);
            switch (alt139) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2639:10: 'instanceof' t2= type
                    {
                    match(input,88,FOLLOW_88_in_instanceOfExpression11255); if (state.failed) return ret;
                    pushFollow(FOLLOW_type_in_instanceOfExpression11259);
                    t2=type();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = new BinaryExpresion(t1, BinaryOperator.INSTANCEOF, t2); 
                    }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, instanceOfExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "instanceOfExpression"


    // $ANTLR start "relationalExpression"
    // src/cedp/src2src/frontend/java/Java.g:2644:1: relationalExpression returns [Expression ret] : t1= shiftExpression (t2= relationalOp t3= shiftExpression )* ;
    public final Expression relationalExpression() throws RecognitionException {
        Expression ret = null;
        int relationalExpression_StartIndex = input.index();
        Expression t1 = null;

        BinaryOperator t2 = null;

        Expression t3 = null;


         if(dFlag) System.out.println("relationalExpression"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2646:5: (t1= shiftExpression (t2= relationalOp t3= shiftExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2646:9: t1= shiftExpression (t2= relationalOp t3= shiftExpression )*
            {
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression11318);
            t1=shiftExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               ret = t1; 
            }
            // src/cedp/src2src/frontend/java/Java.g:2647:9: (t2= relationalOp t3= shiftExpression )*
            loop140:
            do {
                int alt140=2;
                alt140 = dfa140.predict(input);
                switch (alt140) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2647:11: t2= relationalOp t3= shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression11334);
            	    t2=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression11338);
            	    t3=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       ret = new BinaryExpression(ret, relationalOp, t2); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, relationalExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "relationalExpression"


    // $ANTLR start "shiftExpression"
    // src/cedp/src2src/frontend/java/Java.g:2652:1: shiftExpression returns [Expression ret] : t1= additiveExpression (t2= shiftOp t3= additiveExpression )* ;
    public final Expression shiftExpression() throws RecognitionException {
        Expression ret = null;
        int shiftExpression_StartIndex = input.index();
        Expression t1 = null;

        BinaryOperator t2 = null;

        Expression t3 = null;


         if(dFlag) System.out.println("shiftExpression"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2654:5: (t1= additiveExpression (t2= shiftOp t3= additiveExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2654:9: t1= additiveExpression (t2= shiftOp t3= additiveExpression )*
            {
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression11397);
            t1=additiveExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               ret = t1; 
            }
            // src/cedp/src2src/frontend/java/Java.g:2656:9: (t2= shiftOp t3= additiveExpression )*
            loop141:
            do {
                int alt141=2;
                alt141 = dfa141.predict(input);
                switch (alt141) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2656:11: t2= shiftOp t3= additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression11425);
            	    t2=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression11429);
            	    t3=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       ret = new BinaryExpression(ret, t2, t3); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, shiftExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "shiftExpression"


    // $ANTLR start "additiveExpression"
    // src/cedp/src2src/frontend/java/Java.g:2661:1: additiveExpression returns [Expression ret] : t1= multiplicativeExpression ( ( '+' | '-' ) t2= multiplicativeExpression )* ;
    public final Expression additiveExpression() throws RecognitionException {
        Expression ret = null;
        int additiveExpression_StartIndex = input.index();
        Expression t1 = null;

        Expression t2 = null;


         if(dFlag) System.out.println("additiveExpression"); BinaryOperator op=null; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2663:5: (t1= multiplicativeExpression ( ( '+' | '-' ) t2= multiplicativeExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2663:9: t1= multiplicativeExpression ( ( '+' | '-' ) t2= multiplicativeExpression )*
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11488);
            t1=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               ret = t1; 
            }
            // src/cedp/src2src/frontend/java/Java.g:2664:9: ( ( '+' | '-' ) t2= multiplicativeExpression )*
            loop143:
            do {
                int alt143=2;
                alt143 = dfa143.predict(input);
                switch (alt143) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2664:11: ( '+' | '-' ) t2= multiplicativeExpression
            	    {
            	    // src/cedp/src2src/frontend/java/Java.g:2664:11: ( '+' | '-' )
            	    int alt142=2;
            	    int LA142_0 = input.LA(1);

            	    if ( (LA142_0==89) ) {
            	        alt142=1;
            	    }
            	    else if ( (LA142_0==90) ) {
            	        alt142=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ret;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 142, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt142) {
            	        case 1 :
            	            // src/cedp/src2src/frontend/java/Java.g:2664:12: '+'
            	            {
            	            match(input,89,FOLLOW_89_in_additiveExpression11503); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op = BinaryOperator.ADD; 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // src/cedp/src2src/frontend/java/Java.g:2664:46: '-'
            	            {
            	            match(input,90,FOLLOW_90_in_additiveExpression11508); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op = BinaryOperator.SUBTRACT; 
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11515);
            	    t2=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       ret = new BinaryExpression(t1, op, t2); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, additiveExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "additiveExpression"


    // $ANTLR start "multiplicativeExpression"
    // src/cedp/src2src/frontend/java/Java.g:2669:1: multiplicativeExpression returns [Expression ret] : t1= unaryExpression ( ( '*' | '/' | '%' ) t2= unaryExpression )* ;
    public final Expression multiplicativeExpression() throws RecognitionException {
        Expression ret = null;
        int multiplicativeExpression_StartIndex = input.index();
        Expression t1 = null;

        Expression t2 = null;


         if(dFlag) System.out.println("multiplicativeExpression"); BinaryOperator op=null; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2671:5: (t1= unaryExpression ( ( '*' | '/' | '%' ) t2= unaryExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2671:9: t1= unaryExpression ( ( '*' | '/' | '%' ) t2= unaryExpression )*
            {
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression11574);
            t1=unaryExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               ret = t1; 
            }
            // src/cedp/src2src/frontend/java/Java.g:2672:9: ( ( '*' | '/' | '%' ) t2= unaryExpression )*
            loop145:
            do {
                int alt145=2;
                alt145 = dfa145.predict(input);
                switch (alt145) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2672:11: ( '*' | '/' | '%' ) t2= unaryExpression
            	    {
            	    // src/cedp/src2src/frontend/java/Java.g:2672:11: ( '*' | '/' | '%' )
            	    int alt144=3;
            	    switch ( input.LA(1) ) {
            	    case 30:
            	        {
            	        alt144=1;
            	        }
            	        break;
            	    case 91:
            	        {
            	        alt144=2;
            	        }
            	        break;
            	    case 92:
            	        {
            	        alt144=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return ret;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 144, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt144) {
            	        case 1 :
            	            // src/cedp/src2src/frontend/java/Java.g:2672:13: '*'
            	            {
            	            match(input,30,FOLLOW_30_in_multiplicativeExpression11590); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op = BinaryOperator.MULTIPLY; 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // src/cedp/src2src/frontend/java/Java.g:2672:53: '/'
            	            {
            	            match(input,91,FOLLOW_91_in_multiplicativeExpression11596); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op = BinaryOperator.DIVIDE; 
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // src/cedp/src2src/frontend/java/Java.g:2672:91: '%'
            	            {
            	            match(input,92,FOLLOW_92_in_multiplicativeExpression11602); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op = BinaryOperator.MODULUS; 
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression11610);
            	    t2=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       ret = new BinaryExpression(ret, op, t2); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, multiplicativeExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "multiplicativeExpression"


    // $ANTLR start "unaryExpression"
    // src/cedp/src2src/frontend/java/Java.g:2677:1: unaryExpression returns [Expression ret] : ( '+' t1= unaryExpression | '-' t2= unaryExpression | '++' t3= unaryExpression | '--' t4= unaryExpression | t5= unaryExpressionNotPlusMinus );
    public final Expression unaryExpression() throws RecognitionException {
        Expression ret = null;
        int unaryExpression_StartIndex = input.index();
        Expression t1 = null;

        Expression t2 = null;

        Expression t3 = null;

        Expression t4 = null;

        Expression t5 = null;


         if(dFlag) System.out.println("unaryExpression"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2679:5: ( '+' t1= unaryExpression | '-' t2= unaryExpression | '++' t3= unaryExpression | '--' t4= unaryExpression | t5= unaryExpressionNotPlusMinus )
            int alt146=5;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2679:9: '+' t1= unaryExpression
                    {
                    match(input,89,FOLLOW_89_in_unaryExpression11667); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11671);
                    t1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = new UnaryExpression(UnaryOperator.PLUS, t1); 
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2681:9: '-' t2= unaryExpression
                    {
                    match(input,90,FOLLOW_90_in_unaryExpression11695); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11699);
                    t2=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = new UnaryExpression(UnaryOperator.MINUS, t2); 
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2683:9: '++' t3= unaryExpression
                    {
                    match(input,93,FOLLOW_93_in_unaryExpression11723); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11727);
                    t3=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = new UnaryExpression(UnaryOperator.PRE_INCREMENT, t3); 
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:2685:9: '--' t4= unaryExpression
                    {
                    match(input,94,FOLLOW_94_in_unaryExpression11751); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11755);
                    t4=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = new UnaryExpression(UnaryOperator.PRE_DECREMENT, t4); 
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:2687:9: t5= unaryExpressionNotPlusMinus
                    {
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression11781);
                    t5=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = t5; 
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, unaryExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "unaryExpression"


    // $ANTLR start "unaryExpressionNotPlusMinus"
    // src/cedp/src2src/frontend/java/Java.g:2691:1: unaryExpressionNotPlusMinus returns [Expression ret_expr] : ( '~' t1= unaryExpression | '!' t2= unaryExpression | t3= castExpression | t4= primary (t5= selector )* ( '++' | '--' )? );
    public final Expression unaryExpressionNotPlusMinus() throws RecognitionException {
        Expression ret_expr = null;
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Expression t1 = null;

        Expression t2 = null;

        Expression t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("unaryExpressionNotPlusMinus"); int c1, c2; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return ret_expr; }
            // src/cedp/src2src/frontend/java/Java.g:2693:5: ( '~' t1= unaryExpression | '!' t2= unaryExpression | t3= castExpression | t4= primary (t5= selector )* ( '++' | '--' )? )
            int alt149=4;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2693:9: '~' t1= unaryExpression
                    {
                    match(input,95,FOLLOW_95_in_unaryExpressionNotPlusMinus11827); if (state.failed) return ret_expr;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11831);
                    t1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret_expr;
                    if ( state.backtracking==0 ) {
                       ret = new UnaryExpression(UnaryOperator.BITWISE_COMPLEMENT, t1); 
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2695:9: '!' t2= unaryExpression
                    {
                    match(input,96,FOLLOW_96_in_unaryExpressionNotPlusMinus11855); if (state.failed) return ret_expr;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11859);
                    t2=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret_expr;
                    if ( state.backtracking==0 ) {
                       ret = new UnaryExpression(UnaryOperator.LOGICAL_NEGATION, t2); 
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2697:9: t3= castExpression
                    {
                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus11885);
                    t3=castExpression();

                    state._fsp--;
                    if (state.failed) return ret_expr;
                    if ( state.backtracking==0 ) {
                       ret = t3; 
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:2699:9: t4= primary (t5= selector )* ( '++' | '--' )?
                    {
                    if ( state.backtracking==0 ) {
                      c1=0; c2=0;
                    }
                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus11913);
                    t4=primary();

                    state._fsp--;
                    if (state.failed) return ret_expr;
                    // src/cedp/src2src/frontend/java/Java.g:2699:34: (t5= selector )*
                    loop147:
                    do {
                        int alt147=2;
                        alt147 = dfa147.predict(input);
                        switch (alt147) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:2699:35: t5= selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus11918);
                    	    t5=selector();

                    	    state._fsp--;
                    	    if (state.failed) return ret_expr;
                    	    if ( state.backtracking==0 ) {

                    	                    /* ??? */
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop147;
                        }
                    } while (true);

                    // src/cedp/src2src/frontend/java/Java.g:2703:12: ( '++' | '--' )?
                    int alt148=3;
                    alt148 = dfa148.predict(input);
                    switch (alt148) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:2703:13: '++'
                            {
                            match(input,93,FOLLOW_93_in_unaryExpressionNotPlusMinus11946); if (state.failed) return ret_expr;
                            if ( state.backtracking==0 ) {
                              c1=1; 
                            }

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:2703:28: '--'
                            {
                            match(input,94,FOLLOW_94_in_unaryExpressionNotPlusMinus11951); if (state.failed) return ret_expr;
                            if ( state.backtracking==0 ) {
                              c2=1;
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                    /* ??? */
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return ret_expr;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"


    // $ANTLR start "castExpression"
    // src/cedp/src2src/frontend/java/Java.g:2709:1: castExpression returns [Expression ret] : ( '(' t1= primitiveType ')' t2= unaryExpression | '(' (t3= type | t4= expression ) ')' t5= unaryExpressionNotPlusMinus );
    public final Expression castExpression() throws RecognitionException {
        Expression ret = null;
        int castExpression_StartIndex = input.index();
        Specifier t1 = null;

        Expression t2 = null;

        Declaration t3 = null;

        Expression t4 = null;

        Expression t5 = null;


         if(dFlag) System.out.println("castExpression"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2711:5: ( '(' t1= primitiveType ')' t2= unaryExpression | '(' (t3= type | t4= expression ) ')' t5= unaryExpressionNotPlusMinus )
            int alt151=2;
            alt151 = dfa151.predict(input);
            switch (alt151) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2711:8: '(' t1= primitiveType ')' t2= unaryExpression
                    {
                    match(input,58,FOLLOW_58_in_castExpression11999); if (state.failed) return ret;
                    pushFollow(FOLLOW_primitiveType_in_castExpression12003);
                    t1=primitiveType();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,59,FOLLOW_59_in_castExpression12005); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpression_in_castExpression12009);
                    t2=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       List list = new LinkedList(); list.add(t1);
                                    ret = new Typecast(list, t2); 
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2714:12: '(' (t3= type | t4= expression ) ')' t5= unaryExpressionNotPlusMinus
                    {
                    match(input,58,FOLLOW_58_in_castExpression12036); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2714:16: (t3= type | t4= expression )
                    int alt150=2;
                    alt150 = dfa150.predict(input);
                    switch (alt150) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:2714:17: t3= type
                            {
                            pushFollow(FOLLOW_type_in_castExpression12041);
                            t3=type();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:2714:27: t4= expression
                            {
                            pushFollow(FOLLOW_expression_in_castExpression12047);
                            t4=expression();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    match(input,59,FOLLOW_59_in_castExpression12051); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression12055);
                    t5=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       List list = new LinkedList(); 
                                    if(t3 != null)
                                      list.add(t3);
                                    else
                                      list.add(t4); /* TODO: Check it's correct and working */
                                    ret = new Typecast(list, t5); 
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, castExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "castExpression"


    // $ANTLR start "primitiveType"
    // src/cedp/src2src/frontend/java/Java.g:2726:1: primitiveType returns [Specifier ret] : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final Specifier primitiveType() throws RecognitionException {
        Specifier ret = null;
        int primitiveType_StartIndex = input.index();
         if(dFlag) System.out.println("primitiveType"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2728:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            int alt152=8;
            switch ( input.LA(1) ) {
            case 97:
                {
                alt152=1;
                }
                break;
            case 98:
                {
                alt152=2;
                }
                break;
            case 99:
                {
                alt152=3;
                }
                break;
            case 100:
                {
                alt152=4;
                }
                break;
            case 101:
                {
                alt152=5;
                }
                break;
            case 102:
                {
                alt152=6;
                }
                break;
            case 103:
                {
                alt152=7;
                }
                break;
            case 104:
                {
                alt152=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }

            switch (alt152) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2728:9: 'boolean'
                    {
                    match(input,97,FOLLOW_97_in_primitiveType12107); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = Specifier.BOOLEAN; 
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2729:9: 'char'
                    {
                    match(input,98,FOLLOW_98_in_primitiveType12119); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = Specifier.CHAR; 
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2730:9: 'byte'
                    {
                    match(input,99,FOLLOW_99_in_primitiveType12131); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = Specifier.BYTE; 
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:2731:9: 'short'
                    {
                    match(input,100,FOLLOW_100_in_primitiveType12143); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = Specifier.SHORT; 
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:2732:9: 'int'
                    {
                    match(input,101,FOLLOW_101_in_primitiveType12155); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = Specifier.INT; 
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:2733:9: 'long'
                    {
                    match(input,102,FOLLOW_102_in_primitiveType12167); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = Specifier.LONG; 
                    }

                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:2734:9: 'float'
                    {
                    match(input,103,FOLLOW_103_in_primitiveType12179); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = Specifier.FLOAT; 
                    }

                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:2735:9: 'double'
                    {
                    match(input,104,FOLLOW_104_in_primitiveType12191); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = Specifier.DOUBLE; 
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, primitiveType_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "primitiveType"


    // $ANTLR start "assignmentOperator"
    // src/cedp/src2src/frontend/java/Java.g:2741:1: assignmentOperator returns [AssignmentOperator ret] : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?);
    public final AssignmentOperator assignmentOperator() throws RecognitionException {
        AssignmentOperator ret = null;
        int assignmentOperator_StartIndex = input.index();
        Token t1=null;
        Token t2=null;
        Token t3=null;
        Token t4=null;

         if(dFlag) System.out.println("assignmentOperator"); AssignmentOperator op=null; LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2743:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?)
            int alt153=12;
            alt153 = dfa153.predict(input);
            switch (alt153) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2743:9: '='
                    {
                    match(input,51,FOLLOW_51_in_assignmentOperator12231); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = AssignmentOperator.NORMAL; 
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2744:9: '+='
                    {
                    match(input,105,FOLLOW_105_in_assignmentOperator12244); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = AssignmentOperator.ADD; 
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2745:9: '-='
                    {
                    match(input,106,FOLLOW_106_in_assignmentOperator12256); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = AssignmentOperator.SUBTRACT; 
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:2746:9: '*='
                    {
                    match(input,107,FOLLOW_107_in_assignmentOperator12268); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = AssignmentOperator.MULTIPLY; 
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:2747:9: '/='
                    {
                    match(input,108,FOLLOW_108_in_assignmentOperator12280); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = AssignmentOperator.DIVIDE; 
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:2748:9: '&='
                    {
                    match(input,109,FOLLOW_109_in_assignmentOperator12292); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = AssignmentOperator.BITWISE_AND; 
                    }

                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:2749:9: '|='
                    {
                    match(input,110,FOLLOW_110_in_assignmentOperator12304); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = AssignmentOperator.BITWISE_INCLUSIVE_OR; 
                    }

                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:2750:9: '^='
                    {
                    match(input,111,FOLLOW_111_in_assignmentOperator12316); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = AssignmentOperator.BITWISE_EXCLUSIVE_OR; 
                    }

                    }
                    break;
                case 9 :
                    // src/cedp/src2src/frontend/java/Java.g:2751:9: '%='
                    {
                    match(input,112,FOLLOW_112_in_assignmentOperator12328); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       ret = AssignmentOperator.MODULUS; 
                    }

                    }
                    break;
                case 10 :
                    // src/cedp/src2src/frontend/java/Java.g:2752:9: ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}?
                    {
                    t1=(Token)match(input,40,FOLLOW_40_in_assignmentOperator12351); if (state.failed) return ret;
                    t2=(Token)match(input,40,FOLLOW_40_in_assignmentOperator12355); if (state.failed) return ret;
                    t3=(Token)match(input,51,FOLLOW_51_in_assignmentOperator12359); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = AssignmentOperator.SHIFT_LEFT;
                                  
                    }

                    }
                    break;
                case 11 :
                    // src/cedp/src2src/frontend/java/Java.g:2760:9: ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}?
                    {
                    t1=(Token)match(input,42,FOLLOW_42_in_assignmentOperator12407); if (state.failed) return ret;
                    t2=(Token)match(input,42,FOLLOW_42_in_assignmentOperator12411); if (state.failed) return ret;
                    t3=(Token)match(input,42,FOLLOW_42_in_assignmentOperator12415); if (state.failed) return ret;
                    t4=(Token)match(input,51,FOLLOW_51_in_assignmentOperator12419); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() &&
                              t3.getLine() == t4.getLine() &&
                              t3.getCharPositionInLine() + 1 == t4.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() &&\n          $t3.getLine() == $t4.getLine() &&\n          $t3.getCharPositionInLine() + 1 == $t4.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = AssignmentOperator.SHIFT_RIGHT_TRIPLE;
                                  
                    }

                    }
                    break;
                case 12 :
                    // src/cedp/src2src/frontend/java/Java.g:2770:9: ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?
                    {
                    t1=(Token)match(input,42,FOLLOW_42_in_assignmentOperator12464); if (state.failed) return ret;
                    t2=(Token)match(input,42,FOLLOW_42_in_assignmentOperator12468); if (state.failed) return ret;
                    t3=(Token)match(input,51,FOLLOW_51_in_assignmentOperator12472); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = AssignmentOperator.SHIFT_RIGHT;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, assignmentOperator_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "assignmentOperator"


    // $ANTLR start "relationalOp"
    // src/cedp/src2src/frontend/java/Java.g:2781:1: relationalOp returns [BinaryOperator ret] : ( ( '<' '=' )=>t1= '<' t2= '=' {...}? | ( '>' '=' )=>t1= '>' t2= '=' {...}? | '<' | '>' );
    public final BinaryOperator relationalOp() throws RecognitionException {
        BinaryOperator ret = null;
        int relationalOp_StartIndex = input.index();
        Token t1=null;
        Token t2=null;

         if(dFlag) System.out.println("relationalOp"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2783:5: ( ( '<' '=' )=>t1= '<' t2= '=' {...}? | ( '>' '=' )=>t1= '>' t2= '=' {...}? | '<' | '>' )
            int alt154=4;
            alt154 = dfa154.predict(input);
            switch (alt154) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2783:9: ( '<' '=' )=>t1= '<' t2= '=' {...}?
                    {
                    t1=(Token)match(input,40,FOLLOW_40_in_relationalOp12539); if (state.failed) return ret;
                    t2=(Token)match(input,51,FOLLOW_51_in_relationalOp12543); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "relationalOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {

                                      ret = BinaryOperator.LE;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2789:9: ( '>' '=' )=>t1= '>' t2= '=' {...}?
                    {
                    t1=(Token)match(input,42,FOLLOW_42_in_relationalOp12586); if (state.failed) return ret;
                    t2=(Token)match(input,51,FOLLOW_51_in_relationalOp12590); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "relationalOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = BinaryOperator.GE;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2795:9: '<'
                    {
                    match(input,40,FOLLOW_40_in_relationalOp12624); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = BinaryOperator.LT;
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:2799:9: '>'
                    {
                    match(input,42,FOLLOW_42_in_relationalOp12648); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = BinaryOperator.GT;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, relationalOp_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "relationalOp"


    // $ANTLR start "shiftOp"
    // src/cedp/src2src/frontend/java/Java.g:2806:1: shiftOp returns [BinaryOperator ret] : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);
    public final BinaryOperator shiftOp() throws RecognitionException {
        BinaryOperator ret = null;
        int shiftOp_StartIndex = input.index();
        Token t1=null;
        Token t2=null;
        Token t3=null;

         if(dFlag) System.out.println("shiftOp"); BinaryOperator op=null; LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2808:5: ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?)
            int alt155=3;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==40) && (synpred232_Java())) {
                alt155=1;
            }
            else if ( (LA155_0==42) ) {
                int LA155_2 = input.LA(2);

                if ( (LA155_2==42) ) {
                    int LA155_3 = input.LA(3);

                    if ( (synpred233_Java()) ) {
                        alt155=2;
                    }
                    else if ( (synpred234_Java()) ) {
                        alt155=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 155, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ret;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2808:9: ( '<' '<' )=>t1= '<' t2= '<' {...}?
                    {
                    t1=(Token)match(input,40,FOLLOW_40_in_shiftOp12705); if (state.failed) return ret;
                    t2=(Token)match(input,40,FOLLOW_40_in_shiftOp12709); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = BinaryOperator.SHIFT_LEFT;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2814:9: ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?
                    {
                    t1=(Token)match(input,42,FOLLOW_42_in_shiftOp12754); if (state.failed) return ret;
                    t2=(Token)match(input,42,FOLLOW_42_in_shiftOp12758); if (state.failed) return ret;
                    t3=(Token)match(input,42,FOLLOW_42_in_shiftOp12762); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = BinaryOperator.SHIFT_RIGHT_TRIPLE;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2822:9: ( '>' '>' )=>t1= '>' t2= '>' {...}?
                    {
                    t1=(Token)match(input,42,FOLLOW_42_in_shiftOp12805); if (state.failed) return ret;
                    t2=(Token)match(input,42,FOLLOW_42_in_shiftOp12809); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = BinaryOperator.SHIFT_RIGHT;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, shiftOp_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "shiftOp"


    // $ANTLR start "primary"
    // src/cedp/src2src/frontend/java/Java.g:2834:1: primary returns [Declaration ret] : (t1= parExpression | 'this' ( '.' t2= Identifier )* (t3= identifierSuffix )? | 'super' t4= superSuffix | t5= literal | 'new' t6= creator | t7= Identifier ( '.' t8= Identifier )* (t9= identifierSuffix )? | t10= primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );
    public final Declaration primary() throws RecognitionException {
        Declaration ret = null;
        int primary_StartIndex = input.index();
        Token t2=null;
        Token t7=null;
        Token t8=null;
        JavaParser.parExpression_return t1 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        JavaParser.literal_return t5 = null;

        JavaParser.creator_return t6 = null;

        Declaration t9 = null;

        Specifier t10 = null;


         if(dFlag) System.out.println("primary"); String str=""; LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2837:5: (t1= parExpression | 'this' ( '.' t2= Identifier )* (t3= identifierSuffix )? | 'super' t4= superSuffix | t5= literal | 'new' t6= creator | t7= Identifier ( '.' t8= Identifier )* (t9= identifierSuffix )? | t10= primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' )
            int alt161=8;
            alt161 = dfa161.predict(input);
            switch (alt161) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2837:9: t1= parExpression
                    {
                    pushFollow(FOLLOW_parExpression_in_primary12884);
                    t1=parExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t1.ret);
                                      //ret_expr = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2842:9: 'this' ( '.' t2= Identifier )* (t3= identifierSuffix )?
                    {
                    match(input,61,FOLLOW_61_in_primary12908); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("this"));
                                      //prev_expr = new OperatorID("this");
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:2847:9: ( '.' t2= Identifier )*
                    loop156:
                    do {
                        int alt156=2;
                        alt156 = dfa156.predict(input);
                        switch (alt156) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:2847:10: '.' t2= Identifier
                    	    {
                    	    match(input,29,FOLLOW_29_in_primary12933); if (state.failed) return ret;
                    	    t2=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary12937); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("."));
                    	                      list.add(new StringDeclaration((t2!=null?t2.getText():null)));
                    	                      //prev_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS , new NameID((t2!=null?t2.getText():null)));
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop156;
                        }
                    } while (true);

                    // src/cedp/src2src/frontend/java/Java.g:2854:9: (t3= identifierSuffix )?
                    int alt157=2;
                    alt157 = dfa157.predict(input);
                    switch (alt157) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:2854:10: t3= identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary12975);
                            t3=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(t3);
                                              //prev_expr = t3;
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2861:9: 'super' t4= superSuffix
                    {
                    match(input,57,FOLLOW_57_in_primary13027); if (state.failed) return ret;
                    pushFollow(FOLLOW_superSuffix_in_primary13031);
                    t4=superSuffix();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("super"));
                                      list.add(t4);
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:2866:9: t5= literal
                    {
                    pushFollow(FOLLOW_literal_in_primary13057);
                    t5=literal();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t5.ret);
                                      //ret_expr = t4;
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:2871:9: 'new' t6= creator
                    {
                    match(input,113,FOLLOW_113_in_primary13081); if (state.failed) return ret;
                    pushFollow(FOLLOW_creator_in_primary13085);
                    t6=creator();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("new"));
                                      list.add(t6.ret);
                                      //ret_expr = new UnaryExpression(UnaryOperator.NEW, t11);
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:2877:9: t7= Identifier ( '.' t8= Identifier )* (t9= identifierSuffix )?
                    {
                    t7=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary13111); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration((t7!=null?t7.getText():null)));
                                      //prev_expr = new NameID((t5!=null?input.toString(t5.start,t5.stop):null));
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:2882:9: ( '.' t8= Identifier )*
                    loop158:
                    do {
                        int alt158=2;
                        alt158 = dfa158.predict(input);
                        switch (alt158) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:2882:10: '.' t8= Identifier
                    	    {
                    	    match(input,29,FOLLOW_29_in_primary13136); if (state.failed) return ret;
                    	    t8=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary13140); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("."));
                    	                      list.add(new StringDeclaration((t8!=null?t8.getText():null)));
                    	                      //prev_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS , new NameID((t6!=null?input.toString(t6.start,t6.stop):null)));
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);

                    // src/cedp/src2src/frontend/java/Java.g:2889:9: (t9= identifierSuffix )?
                    int alt159=2;
                    alt159 = dfa159.predict(input);
                    switch (alt159) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:2889:10: t9= identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary13179);
                            t9=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(t9);
                                              //prev_expr = t3;
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:2896:9: t10= primitiveType ( '[' ']' )* '.' 'class'
                    {
                    pushFollow(FOLLOW_primitiveType_in_primary13233);
                    t10=primitiveType();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t10);
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:2900:9: ( '[' ']' )*
                    loop160:
                    do {
                        int alt160=2;
                        int LA160_0 = input.LA(1);

                        if ( (LA160_0==48) ) {
                            alt160=1;
                        }


                        switch (alt160) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:2900:10: '[' ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_primary13259); if (state.failed) return ret;
                    	    match(input,49,FOLLOW_49_in_primary13261); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("[]"));
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop160;
                        }
                    } while (true);

                    match(input,29,FOLLOW_29_in_primary13288); if (state.failed) return ret;
                    match(input,37,FOLLOW_37_in_primary13290); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("class"));
                                  
                    }

                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:2909:9: 'void' '.' 'class'
                    {
                    match(input,47,FOLLOW_47_in_primary13314); if (state.failed) return ret;
                    match(input,29,FOLLOW_29_in_primary13316); if (state.failed) return ret;
                    match(input,37,FOLLOW_37_in_primary13318); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("void"));
                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("class"));
                                      //ret_expr = new AccessExpression(new OperatorID("void"), AccessOperator.MEMBER_ACCESS , new OperatorID("class"));
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, primary_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "primary"


    // $ANTLR start "identifierSuffix"
    // src/cedp/src2src/frontend/java/Java.g:2918:1: identifierSuffix returns [Declaration ret] : ( ( '[' ']' )+ '.' 'class' | ( '[' t1= expression ']' )+ | t2= arguments | '.' 'class' | '.' t3= explicitGenericInvocation | '.' 'this' | '.' 'super' t4= arguments | '.' 'new' t5= innerCreator );
    public final Declaration identifierSuffix() throws RecognitionException {
        Declaration ret = null;
        int identifierSuffix_StartIndex = input.index();
        Expression t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("identifierSuffix"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2921:5: ( ( '[' ']' )+ '.' 'class' | ( '[' t1= expression ']' )+ | t2= arguments | '.' 'class' | '.' t3= explicitGenericInvocation | '.' 'this' | '.' 'super' t4= arguments | '.' 'new' t5= innerCreator )
            int alt164=8;
            alt164 = dfa164.predict(input);
            switch (alt164) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2921:9: ( '[' ']' )+ '.' 'class'
                    {
                    // src/cedp/src2src/frontend/java/Java.g:2921:9: ( '[' ']' )+
                    int cnt162=0;
                    loop162:
                    do {
                        int alt162=2;
                        int LA162_0 = input.LA(1);

                        if ( (LA162_0==48) ) {
                            alt162=1;
                        }


                        switch (alt162) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:2921:10: '[' ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_identifierSuffix13375); if (state.failed) return ret;
                    	    match(input,49,FOLLOW_49_in_identifierSuffix13377); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("[]"));
                    	                      //list.add(new ArraySpecifier());
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt162 >= 1 ) break loop162;
                    	    if (state.backtracking>0) {state.failed=true; return ret;}
                                EarlyExitException eee =
                                    new EarlyExitException(162, input);
                                throw eee;
                        }
                        cnt162++;
                    } while (true);

                    match(input,29,FOLLOW_29_in_identifierSuffix13404); if (state.failed) return ret;
                    match(input,37,FOLLOW_37_in_identifierSuffix13406); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("class"));
                                      //ArrayAccess lhs = new ArrayAccess(prev_expr), list);
                                      //ret_expr = new AccessExpression(lhs, AccessOperator.MEMBER_ACCESS, new OperatorID("class"));
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2933:9: ( '[' t1= expression ']' )+
                    {
                    // src/cedp/src2src/frontend/java/Java.g:2933:9: ( '[' t1= expression ']' )+
                    int cnt163=0;
                    loop163:
                    do {
                        int alt163=2;
                        alt163 = dfa163.predict(input);
                        switch (alt163) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:2933:10: '[' t1= expression ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_identifierSuffix13431); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("["));
                    	                  
                    	    }
                    	    pushFollow(FOLLOW_expression_in_identifierSuffix13458);
                    	    t1=expression();

                    	    state._fsp--;
                    	    if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(t1);
                    	                  
                    	    }
                    	    match(input,49,FOLLOW_49_in_identifierSuffix13482); if (state.failed) return ret;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt163 >= 1 ) break loop163;
                    	    if (state.backtracking>0) {state.failed=true; return ret;}
                                EarlyExitException eee =
                                    new EarlyExitException(163, input);
                                throw eee;
                        }
                        cnt163++;
                    } while (true);

                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("]"));
                                      //ret_expr = new ArrayAccess(prev_expr, t1);
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2946:9: t2= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_identifierSuffix13511);
                    t2=arguments();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t2);
                                      //ret_expr = t2;
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:2951:9: '.' 'class'
                    {
                    match(input,29,FOLLOW_29_in_identifierSuffix13535); if (state.failed) return ret;
                    match(input,37,FOLLOW_37_in_identifierSuffix13537); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("class"));
                                      //ret_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS, new OperatorID("class"));
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:2957:9: '.' t3= explicitGenericInvocation
                    {
                    match(input,29,FOLLOW_29_in_identifierSuffix13561); if (state.failed) return ret;
                    pushFollow(FOLLOW_explicitGenericInvocation_in_identifierSuffix13565);
                    t3=explicitGenericInvocation();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(t3);
                                      //ret_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS, t1);
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:2963:9: '.' 'this'
                    {
                    match(input,29,FOLLOW_29_in_identifierSuffix13589); if (state.failed) return ret;
                    match(input,61,FOLLOW_61_in_identifierSuffix13591); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("this"));
                                      //ret_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS, new OperatorID("this"));
                                  
                    }

                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:2969:9: '.' 'super' t4= arguments
                    {
                    match(input,29,FOLLOW_29_in_identifierSuffix13615); if (state.failed) return ret;
                    match(input,57,FOLLOW_57_in_identifierSuffix13617); if (state.failed) return ret;
                    pushFollow(FOLLOW_arguments_in_identifierSuffix13621);
                    t4=arguments();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("super"));
                                      list.add(t4);
                                      //ret_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS, new OperatorID("super") /* TODO */);
                                  
                    }

                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:2976:9: '.' 'new' t5= innerCreator
                    {
                    match(input,29,FOLLOW_29_in_identifierSuffix13645); if (state.failed) return ret;
                    match(input,113,FOLLOW_113_in_identifierSuffix13647); if (state.failed) return ret;
                    pushFollow(FOLLOW_innerCreator_in_identifierSuffix13651);
                    t5=innerCreator();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("new"));
                                      list.add(t5);
                                      //Expression expr = new BinaryExpression(UnaryOperator.NEW, t20);
                                      //ret_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS, expr));
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, identifierSuffix_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "identifierSuffix"

    public static class creator_return extends ParserRuleReturnScope {
        public Declaration ret;
    };

    // $ANTLR start "creator"
    // src/cedp/src2src/frontend/java/Java.g:2986:1: creator returns [Declaration ret] : (t1= nonWildcardTypeArguments t2= createdName t3= classCreatorRest | t3= createdName (t4= arrayCreatorRest | t5= classCreatorRest ) );
    public final JavaParser.creator_return creator() throws RecognitionException {
        JavaParser.creator_return retval = new JavaParser.creator_return();
        retval.start = input.LT(1);
        int creator_StartIndex = input.index();
        JavaParser.nonWildcardTypeArguments_return t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("creator"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // src/cedp/src2src/frontend/java/Java.g:2989:5: (t1= nonWildcardTypeArguments t2= createdName t3= classCreatorRest | t3= createdName (t4= arrayCreatorRest | t5= classCreatorRest ) )
            int alt166=2;
            alt166 = dfa166.predict(input);
            switch (alt166) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2989:9: t1= nonWildcardTypeArguments t2= createdName t3= classCreatorRest
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator13709);
                    t1=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_createdName_in_creator13713);
                    t2=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_classCreatorRest_in_creator13717);
                    t3=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      list.add(t2);
                                      list.add(t3);
                                      /*
                                      if(t2.containsKey("argument")){
                                          if(!t2.containsKey("body")){
                                              Expression arg = (Expression) t2.get("argument");
                                              if(arg instanceof OperatorID)
                                                  ret_expr = new FunctionCall(t1);
                                              else
                                                  ret_expr = new FunctionCall(t1, arg);
                                          }
                                          else{
                                              // TODO
                                          }
                                      }
                                      else{
                                          ret_expr = t1;
                                      }
                                      */
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3012:9: t3= createdName (t4= arrayCreatorRest | t5= classCreatorRest )
                    {
                    pushFollow(FOLLOW_createdName_in_creator13743);
                    t3=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    // src/cedp/src2src/frontend/java/Java.g:3012:24: (t4= arrayCreatorRest | t5= classCreatorRest )
                    int alt165=2;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==48) ) {
                        alt165=1;
                    }
                    else if ( (LA165_0==58) ) {
                        alt165=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 0, input);

                        throw nvae;
                    }
                    switch (alt165) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:3012:25: t4= arrayCreatorRest
                            {
                            pushFollow(FOLLOW_arrayCreatorRest_in_creator13748);
                            t4=arrayCreatorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                                              list.add(t3);
                                              list.add(t4);
                                              /* TODO */
                                              //ret_expr = t3;
                                          
                            }

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:3019:11: t5= classCreatorRest
                            {
                            pushFollow(FOLLOW_classCreatorRest_in_creator13777);
                            t5=classCreatorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                                              list.add(t3);
                                              list.add(t5);
                                              /*
                                              if(t5.containsKey("argument")){
                                                  if(!t5.containsKey("body")){
                                                      Expression arg = (Expression) t5.get("argument");
                                                      if(arg instanceof OperatorID)
                                                          ret_expr = new FunctionCall(t3);
                                                      else
                                                          ret_expr = new FunctionCall(t3, arg);
                                                  }
                                                  else{
                                                      // TODO
                                                  }
                                              }
                                              else{
                                                  ret_expr = t3;
                                              }*/
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {
               retval.ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, creator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "creator"


    // $ANTLR start "createdName"
    // src/cedp/src2src/frontend/java/Java.g:3043:1: createdName returns [Declaration ret] : (t1= classOrInterfaceType | t2= primitiveType );
    public final Declaration createdName() throws RecognitionException {
        Declaration ret = null;
        int createdName_StartIndex = input.index();
        Declaration t1 = null;

        Specifier t2 = null;


         if(dFlag) System.out.println("createdName"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3045:5: (t1= classOrInterfaceType | t2= primitiveType )
            int alt167=2;
            alt167 = dfa167.predict(input);
            switch (alt167) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3045:9: t1= classOrInterfaceType
                    {
                    pushFollow(FOLLOW_classOrInterfaceType_in_createdName13836);
                    t1=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t1;
                                      //expr = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3050:9: t2= primitiveType
                    {
                    pushFollow(FOLLOW_primitiveType_in_createdName13862);
                    t2=primitiveType();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t2;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, createdName_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "createdName"


    // $ANTLR start "innerCreator"
    // src/cedp/src2src/frontend/java/Java.g:3056:1: innerCreator returns [Declaration ret] : (t1= nonWildcardTypeArguments )? t2= Identifier t3= classCreatorRest ;
    public final Declaration innerCreator() throws RecognitionException {
        Declaration ret = null;
        int innerCreator_StartIndex = input.index();
        Token t2=null;
        JavaParser.nonWildcardTypeArguments_return t1 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("innerCreator"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3059:5: ( (t1= nonWildcardTypeArguments )? t2= Identifier t3= classCreatorRest )
            // src/cedp/src2src/frontend/java/Java.g:3059:9: (t1= nonWildcardTypeArguments )? t2= Identifier t3= classCreatorRest
            {
            // src/cedp/src2src/frontend/java/Java.g:3059:11: (t1= nonWildcardTypeArguments )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==40) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:0:0: t1= nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_innerCreator13920);
                    t1=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return ret;

                    }
                    break;

            }

            t2=(Token)match(input,Identifier,FOLLOW_Identifier_in_innerCreator13925); if (state.failed) return ret;
            pushFollow(FOLLOW_classCreatorRest_in_innerCreator13929);
            t3=classCreatorRest();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              if(t1 != null)
                                  list.add(t1);
                              list.add(new StringDeclaration((t2!=null?t2.getText():null)));
                              list.add(t3);
                              //ret_expr = new NameID((t1!=null?input.toString(t1.start,t1.stop):null));
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, innerCreator_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "innerCreator"


    // $ANTLR start "arrayCreatorRest"
    // src/cedp/src2src/frontend/java/Java.g:3069:1: arrayCreatorRest returns [Declaration ret] : '[' ( ']' ( '[' ']' )* t1= arrayInitializer | t2= expression ']' ( '[' t3= expression ']' )* ( '[' ']' )* ) ;
    public final Declaration arrayCreatorRest() throws RecognitionException {
        Declaration ret = null;
        int arrayCreatorRest_StartIndex = input.index();
        Declaration t1 = null;

        Expression t2 = null;

        Expression t3 = null;


         if(dFlag) System.out.println("arrayCreatorRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3072:5: ( '[' ( ']' ( '[' ']' )* t1= arrayInitializer | t2= expression ']' ( '[' t3= expression ']' )* ( '[' ']' )* ) )
            // src/cedp/src2src/frontend/java/Java.g:3072:9: '[' ( ']' ( '[' ']' )* t1= arrayInitializer | t2= expression ']' ( '[' t3= expression ']' )* ( '[' ']' )* )
            {
            match(input,48,FOLLOW_48_in_arrayCreatorRest13985); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration("["));
                              
            }
            // src/cedp/src2src/frontend/java/Java.g:3076:9: ( ']' ( '[' ']' )* t1= arrayInitializer | t2= expression ']' ( '[' t3= expression ']' )* ( '[' ']' )* )
            int alt172=2;
            alt172 = dfa172.predict(input);
            switch (alt172) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3076:13: ']' ( '[' ']' )* t1= arrayInitializer
                    {
                    match(input,49,FOLLOW_49_in_arrayCreatorRest14017); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                          list.add(new StringDeclaration("]"));
                                      
                    }
                    // src/cedp/src2src/frontend/java/Java.g:3080:13: ( '[' ']' )*
                    loop169:
                    do {
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==48) ) {
                            alt169=1;
                        }


                        switch (alt169) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:3080:14: '[' ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_arrayCreatorRest14051); if (state.failed) return ret;
                    	    match(input,49,FOLLOW_49_in_arrayCreatorRest14053); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                          list.add(new StringDeclaration("[]"));
                    	                      
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop169;
                        }
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest14090);
                    t1=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                          list.add(t1);
                                      
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3088:13: t2= expression ']' ( '[' t3= expression ']' )* ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayCreatorRest14124);
                    t2=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,49,FOLLOW_49_in_arrayCreatorRest14126); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                          list.add(t2);
                                          list.add(new StringDeclaration("]"));
                                          //list.add(new StringDeclaration("["));
                                      
                    }
                    // src/cedp/src2src/frontend/java/Java.g:3094:13: ( '[' t3= expression ']' )*
                    loop170:
                    do {
                        int alt170=2;
                        alt170 = dfa170.predict(input);
                        switch (alt170) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:3094:14: '[' t3= expression ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_arrayCreatorRest14159); if (state.failed) return ret;
                    	    pushFollow(FOLLOW_expression_in_arrayCreatorRest14163);
                    	    t3=expression();

                    	    state._fsp--;
                    	    if (state.failed) return ret;
                    	    match(input,49,FOLLOW_49_in_arrayCreatorRest14165); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                          list.add(new StringDeclaration("["));
                    	                          list.add(t3);
                    	                          list.add(new StringDeclaration("]"));
                    	                      
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop170;
                        }
                    } while (true);

                    // src/cedp/src2src/frontend/java/Java.g:3100:16: ( '[' ']' )*
                    loop171:
                    do {
                        int alt171=2;
                        alt171 = dfa171.predict(input);
                        switch (alt171) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:3100:17: '[' ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_arrayCreatorRest14201); if (state.failed) return ret;
                    	    match(input,49,FOLLOW_49_in_arrayCreatorRest14203); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                          list.add(new StringDeclaration("[]"));
                    	                      
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop171;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, arrayCreatorRest_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "arrayCreatorRest"


    // $ANTLR start "classCreatorRest"
    // src/cedp/src2src/frontend/java/Java.g:3108:1: classCreatorRest returns [Declaration ret] : t1= arguments (t2= classBody )? ;
    public final Declaration classCreatorRest() throws RecognitionException {
        Declaration ret = null;
        int classCreatorRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("classCreatorRest"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3111:5: (t1= arguments (t2= classBody )? )
            // src/cedp/src2src/frontend/java/Java.g:3111:9: t1= arguments (t2= classBody )?
            {
            pushFollow(FOLLOW_arguments_in_classCreatorRest14290);
            t1=arguments();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              /*if(t1 != null){
                                  System.out.println("PUSH ");
                                  hash.put("argument", t1);
                              }*/
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:3119:9: (t2= classBody )?
            int alt173=2;
            alt173 = dfa173.predict(input);
            switch (alt173) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3119:10: t2= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest14317);
                    t2=classBody();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t2);
                                      //if(t2 != null)
                                      //    hash.put("body", t2);
                                  
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, classCreatorRest_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "classCreatorRest"


    // $ANTLR start "explicitGenericInvocation"
    // src/cedp/src2src/frontend/java/Java.g:3128:1: explicitGenericInvocation returns [Declaration ret] : t1= nonWildcardTypeArguments t2= Identifier t3= arguments ;
    public final Declaration explicitGenericInvocation() throws RecognitionException {
        Declaration ret = null;
        int explicitGenericInvocation_StartIndex = input.index();
        Token t2=null;
        JavaParser.nonWildcardTypeArguments_return t1 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("explicitGenericInvocation"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3131:5: (t1= nonWildcardTypeArguments t2= Identifier t3= arguments )
            // src/cedp/src2src/frontend/java/Java.g:3131:9: t1= nonWildcardTypeArguments t2= Identifier t3= arguments
            {
            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation14386);
            t1=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return ret;
            t2=(Token)match(input,Identifier,FOLLOW_Identifier_in_explicitGenericInvocation14390); if (state.failed) return ret;
            pushFollow(FOLLOW_arguments_in_explicitGenericInvocation14394);
            t3=arguments();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(new stringDeclaration((t2!=null?t2.getText():null)));
                              list.add(t3);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, explicitGenericInvocation_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        public Declaration ret;
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // src/cedp/src2src/frontend/java/Java.g:3139:1: nonWildcardTypeArguments returns [Declaration ret] : '<' t1= typeList '>' ;
    public final JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        JavaParser.nonWildcardTypeArguments_return retval = new JavaParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        List t1 = null;


         if(dFlag) System.out.println("nonWildcardTypeArguments"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // src/cedp/src2src/frontend/java/Java.g:3142:5: ( '<' t1= typeList '>' )
            // src/cedp/src2src/frontend/java/Java.g:3142:9: '<' t1= typeList '>'
            {
            match(input,40,FOLLOW_40_in_nonWildcardTypeArguments14450); if (state.failed) return retval;
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments14454);
            t1=typeList();

            state._fsp--;
            if (state.failed) return retval;
            match(input,42,FOLLOW_42_in_nonWildcardTypeArguments14456); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

                          /* FIX */
                          //list.add(new StringDeclaration("<"));
                          //list.add(t1);
                          //list.add(new stringDeclaration(">"));
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"


    // $ANTLR start "selector"
    // src/cedp/src2src/frontend/java/Java.g:3151:1: selector returns [Declaration ret] : ( '.' t1= Identifier (t2= arguments )? | '.' 'this' | '.' 'super' t3= superSuffix | '.' 'new' t4= innerCreator | '[' t5= expression ']' );
    public final Declaration selector() throws RecognitionException {
        Declaration ret = null;
        int selector_StartIndex = input.index();
        Token t1=null;
        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Expression t5 = null;


         if(dFlag) System.out.println("selector"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3154:5: ( '.' t1= Identifier (t2= arguments )? | '.' 'this' | '.' 'super' t3= superSuffix | '.' 'new' t4= innerCreator | '[' t5= expression ']' )
            int alt175=5;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==29) ) {
                switch ( input.LA(2) ) {
                case Identifier:
                    {
                    alt175=1;
                    }
                    break;
                case 61:
                    {
                    alt175=2;
                    }
                    break;
                case 57:
                    {
                    alt175=3;
                    }
                    break;
                case 113:
                    {
                    alt175=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ret;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 175, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA175_0==48) ) {
                alt175=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;
            }
            switch (alt175) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3154:9: '.' t1= Identifier (t2= arguments )?
                    {
                    match(input,29,FOLLOW_29_in_selector14508); if (state.failed) return ret;
                    t1=(Token)match(input,Identifier,FOLLOW_Identifier_in_selector14512); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration((t1!=null?t1.getText():null)));
                                      //if(prev_expr == null)
                                      //    ret_expr = new AccessExpression(new NameID("??"), AccessOperator.MEMBER_ACCESS, new NameID((t1!=null?t1.getText():null)));
                                      //else
                                      //    ret_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS, new NameID((t1!=null?t1.getText():null)));
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:3163:9: (t2= arguments )?
                    int alt174=2;
                    alt174 = dfa174.predict(input);
                    switch (alt174) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:3163:10: t2= arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector14540);
                            t2=arguments();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(t2);
                                              //if(t2 == null)
                                              //    ret_expr = new NameID((t1!=null?t1.getText():null));
                                              //else if(t2 instanceof OperatorID)
                                              //    ret_expr = new FunctionCall(new NameID((t1!=null?t1.getText():null)));
                                              //else{
                                              //    LinkedList list = new LinkedList();
                                              //    list.add(t2);
                                              //    ret_expr = new FunctionCall(new NameID((t1!=null?t1.getText():null)), list);
                                              //}
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3177:9: '.' 'this'
                    {
                    match(input,29,FOLLOW_29_in_selector14575); if (state.failed) return ret;
                    match(input,61,FOLLOW_61_in_selector14577); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration("."));
                                  list.add(new StringDeclaration("this"));
                              
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:3182:9: '.' 'super' t3= superSuffix
                    {
                    match(input,29,FOLLOW_29_in_selector14597); if (state.failed) return ret;
                    match(input,57,FOLLOW_57_in_selector14599); if (state.failed) return ret;
                    pushFollow(FOLLOW_superSuffix_in_selector14603);
                    t3=superSuffix();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration("."));
                                  list.add(new StringDeclaration("super"));
                                  list.add(t3);
                              
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:3188:9: '.' 'new' t4= innerCreator
                    {
                    match(input,29,FOLLOW_29_in_selector14623); if (state.failed) return ret;
                    match(input,113,FOLLOW_113_in_selector14625); if (state.failed) return ret;
                    pushFollow(FOLLOW_innerCreator_in_selector14629);
                    t4=innerCreator();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration("."));
                                  list.add(new StringDeclaration("new"));
                                  list.add(t4);
                              
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:3194:9: '[' t5= expression ']'
                    {
                    match(input,48,FOLLOW_48_in_selector14649); if (state.failed) return ret;
                    pushFollow(FOLLOW_expression_in_selector14653);
                    t5=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,49,FOLLOW_49_in_selector14655); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration("["));
                                  list.add(t5);
                                  list.add(new StringDeclaration("]"));
                              
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, selector_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "selector"


    // $ANTLR start "superSuffix"
    // src/cedp/src2src/frontend/java/Java.g:3202:1: superSuffix returns [Declaration ret] : (t1= arguments | '.' t2= Identifier (t3= arguments )? );
    public final Declaration superSuffix() throws RecognitionException {
        Declaration ret = null;
        int superSuffix_StartIndex = input.index();
        Token t2=null;
        Declaration t1 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("superSuffix"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3205:5: (t1= arguments | '.' t2= Identifier (t3= arguments )? )
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==58) ) {
                alt177=1;
            }
            else if ( (LA177_0==29) ) {
                alt177=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;
            }
            switch (alt177) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3205:9: t1= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_superSuffix14709);
                    t1=arguments();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3209:9: '.' t2= Identifier (t3= arguments )?
                    {
                    match(input,29,FOLLOW_29_in_superSuffix14733); if (state.failed) return ret;
                    t2=(Token)match(input,Identifier,FOLLOW_Identifier_in_superSuffix14737); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:3209:29: (t3= arguments )?
                    int alt176=2;
                    alt176 = dfa176.predict(input);
                    switch (alt176) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: t3= arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix14741);
                            t3=arguments();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration((t2!=null?t2.getText():null)));
                                      if(t3 != null)
                                          list.add(t3);
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, superSuffix_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "superSuffix"


    // $ANTLR start "arguments"
    // src/cedp/src2src/frontend/java/Java.g:3219:1: arguments returns [Declaration ret] : '(' (t1= expressionList )? ')' ;
    public final Declaration arguments() throws RecognitionException {
        Declaration ret = null;
        int arguments_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("arguments"); LinkedList list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3222:5: ( '(' (t1= expressionList )? ')' )
            // src/cedp/src2src/frontend/java/Java.g:3222:9: '(' (t1= expressionList )? ')'
            {
            match(input,58,FOLLOW_58_in_arguments14800); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration("("));
                                  //ret_expr = new OperatorID("()");
                              
            }
            // src/cedp/src2src/frontend/java/Java.g:3227:9: (t1= expressionList )?
            int alt178=2;
            alt178 = dfa178.predict(input);
            switch (alt178) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3227:10: t1= expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments14832);
                    t1=expressionList();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                          list.add(t1);
                                          //ret_expr = t1;
                                      
                    }

                    }
                    break;

            }

            match(input,59,FOLLOW_59_in_arguments14863); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration(")"));
                              
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, arguments_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred5_Java
    public final void synpred5_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;

        Declaration t6 = null;


        // src/cedp/src2src/frontend/java/Java.g:530:9: (t1= annotations (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* ) )
        // src/cedp/src2src/frontend/java/Java.g:530:9: t1= annotations (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* )
        {
        pushFollow(FOLLOW_annotations_in_synpred5_Java119);
        t1=annotations();

        state._fsp--;
        if (state.failed) return ;
        // src/cedp/src2src/frontend/java/Java.g:534:9: (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* )
        int alt184=2;
        alt184 = dfa184.predict(input);
        switch (alt184) {
            case 1 :
                // src/cedp/src2src/frontend/java/Java.g:534:13: t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )*
                {
                pushFollow(FOLLOW_packageDeclaration_in_synpred5_Java153);
                t2=packageDeclaration();

                state._fsp--;
                if (state.failed) return ;
                // src/cedp/src2src/frontend/java/Java.g:538:13: (t3= importDeclaration )*
                loop181:
                do {
                    int alt181=2;
                    alt181 = dfa181.predict(input);
                    switch (alt181) {
                	case 1 :
                	    // src/cedp/src2src/frontend/java/Java.g:538:14: t3= importDeclaration
                	    {
                	    pushFollow(FOLLOW_importDeclaration_in_synpred5_Java188);
                	    t3=importDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop181;
                    }
                } while (true);

                // src/cedp/src2src/frontend/java/Java.g:543:13: (t4= typeDeclaration )*
                loop182:
                do {
                    int alt182=2;
                    alt182 = dfa182.predict(input);
                    switch (alt182) {
                	case 1 :
                	    // src/cedp/src2src/frontend/java/Java.g:543:14: t4= typeDeclaration
                	    {
                	    pushFollow(FOLLOW_typeDeclaration_in_synpred5_Java238);
                	    t4=typeDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop182;
                    }
                } while (true);


                }
                break;
            case 2 :
                // src/cedp/src2src/frontend/java/Java.g:548:13: t5= classOrInterfaceDeclaration (t6= typeDeclaration )*
                {
                pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred5_Java287);
                t5=classOrInterfaceDeclaration();

                state._fsp--;
                if (state.failed) return ;
                // src/cedp/src2src/frontend/java/Java.g:552:13: (t6= typeDeclaration )*
                loop183:
                do {
                    int alt183=2;
                    alt183 = dfa183.predict(input);
                    switch (alt183) {
                	case 1 :
                	    // src/cedp/src2src/frontend/java/Java.g:552:14: t6= typeDeclaration
                	    {
                	    pushFollow(FOLLOW_typeDeclaration_in_synpred5_Java322);
                	    t6=typeDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop183;
                    }
                } while (true);


                }
                break;

        }


        }
    }
    // $ANTLR end synpred5_Java

    // $ANTLR start synpred106_Java
    public final void synpred106_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:1753:14: (t1= explicitConstructorInvocation )
        // src/cedp/src2src/frontend/java/Java.g:1753:14: t1= explicitConstructorInvocation
        {
        pushFollow(FOLLOW_explicitConstructorInvocation_in_synpred106_Java6441);
        t1=explicitConstructorInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred106_Java

    // $ANTLR start synpred110_Java
    public final void synpred110_Java_fragment() throws RecognitionException {   
        JavaParser.nonWildcardTypeArguments_return t1 = null;

        Declaration t2 = null;


        // src/cedp/src2src/frontend/java/Java.g:1771:9: ( (t1= nonWildcardTypeArguments )? ( 'this' | 'super' ) t2= arguments ';' )
        // src/cedp/src2src/frontend/java/Java.g:1771:9: (t1= nonWildcardTypeArguments )? ( 'this' | 'super' ) t2= arguments ';'
        {
        // src/cedp/src2src/frontend/java/Java.g:1771:9: (t1= nonWildcardTypeArguments )?
        int alt192=2;
        int LA192_0 = input.LA(1);

        if ( (LA192_0==40) ) {
            alt192=1;
        }
        switch (alt192) {
            case 1 :
                // src/cedp/src2src/frontend/java/Java.g:1771:10: t1= nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred110_Java6541);
                t1=nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        if ( input.LA(1)==57||input.LA(1)==61 ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_arguments_in_synpred110_Java6559);
        t2=arguments();

        state._fsp--;
        if (state.failed) return ;
        match(input,26,FOLLOW_26_in_synpred110_Java6561); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred110_Java

    // $ANTLR start synpred121_Java
    public final void synpred121_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:1881:10: (t1= annotation )
        // src/cedp/src2src/frontend/java/Java.g:1881:10: t1= annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred121_Java7050);
        t1=annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_Java

    // $ANTLR start synpred144_Java
    public final void synpred144_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:2148:9: (t1= localVariableDeclarationStatement )
        // src/cedp/src2src/frontend/java/Java.g:2148:9: t1= localVariableDeclarationStatement
        {
        pushFollow(FOLLOW_localVariableDeclarationStatement_in_synpred144_Java8482);
        t1=localVariableDeclarationStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_Java

    // $ANTLR start synpred145_Java
    public final void synpred145_Java_fragment() throws RecognitionException {   
        Declaration t2 = null;


        // src/cedp/src2src/frontend/java/Java.g:2152:9: (t2= classOrInterfaceDeclaration )
        // src/cedp/src2src/frontend/java/Java.g:2152:9: t2= classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred145_Java8508);
        t2=classOrInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred145_Java

    // $ANTLR start synpred150_Java
    public final void synpred150_Java_fragment() throws RecognitionException {   
        Declaration t8 = null;


        // src/cedp/src2src/frontend/java/Java.g:2229:25: ( 'else' t8= statement )
        // src/cedp/src2src/frontend/java/Java.g:2229:25: 'else' t8= statement
        {
        match(input,69,FOLLOW_69_in_synpred150_Java8894); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred150_Java8898);
        t8=statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred150_Java

    // $ANTLR start synpred155_Java
    public final void synpred155_Java_fragment() throws RecognitionException {   
        Declaration t16 = null;

        Declaration t17 = null;


        // src/cedp/src2src/frontend/java/Java.g:2267:11: (t16= catches 'finally' t17= block )
        // src/cedp/src2src/frontend/java/Java.g:2267:11: t16= catches 'finally' t17= block
        {
        pushFollow(FOLLOW_catches_in_synpred155_Java9069);
        t16=catches();

        state._fsp--;
        if (state.failed) return ;
        match(input,74,FOLLOW_74_in_synpred155_Java9071); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred155_Java9075);
        t17=block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred155_Java

    // $ANTLR start synpred156_Java
    public final void synpred156_Java_fragment() throws RecognitionException {   
        Declaration t18 = null;


        // src/cedp/src2src/frontend/java/Java.g:2272:11: (t18= catches )
        // src/cedp/src2src/frontend/java/Java.g:2272:11: t18= catches
        {
        pushFollow(FOLLOW_catches_in_synpred156_Java9103);
        t18=catches();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred156_Java

    // $ANTLR start synpred171_Java
    public final void synpred171_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:2416:10: (t1= switchLabel )
        // src/cedp/src2src/frontend/java/Java.g:2416:10: t1= switchLabel
        {
        pushFollow(FOLLOW_switchLabel_in_synpred171_Java9788);
        t1=switchLabel();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred171_Java

    // $ANTLR start synpred173_Java
    public final void synpred173_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:2432:9: ( 'case' t1= constantExpression ':' )
        // src/cedp/src2src/frontend/java/Java.g:2432:9: 'case' t1= constantExpression ':'
        {
        match(input,81,FOLLOW_81_in_synpred173_Java9896); if (state.failed) return ;
        pushFollow(FOLLOW_constantExpression_in_synpred173_Java9900);
        t1=constantExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,67,FOLLOW_67_in_synpred173_Java9902); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_Java

    // $ANTLR start synpred174_Java
    public final void synpred174_Java_fragment() throws RecognitionException {   
        Declaration t2 = null;


        // src/cedp/src2src/frontend/java/Java.g:2439:9: ( 'case' t2= enumConstantName ':' )
        // src/cedp/src2src/frontend/java/Java.g:2439:9: 'case' t2= enumConstantName ':'
        {
        match(input,81,FOLLOW_81_in_synpred174_Java9926); if (state.failed) return ;
        pushFollow(FOLLOW_enumConstantName_in_synpred174_Java9930);
        t2=enumConstantName();

        state._fsp--;
        if (state.failed) return ;
        match(input,67,FOLLOW_67_in_synpred174_Java9932); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_Java

    // $ANTLR start synpred175_Java
    public final void synpred175_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:2458:9: (t1= enhancedForControl )
        // src/cedp/src2src/frontend/java/Java.g:2458:9: t1= enhancedForControl
        {
        pushFollow(FOLLOW_enhancedForControl_in_synpred175_Java10021);
        t1=enhancedForControl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_Java

    // $ANTLR start synpred179_Java
    public final void synpred179_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:2480:9: (t1= localVariableDeclaration )
        // src/cedp/src2src/frontend/java/Java.g:2480:9: t1= localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred179_Java10111);
        t1=localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_Java

    // $ANTLR start synpred181_Java
    public final void synpred181_Java_fragment() throws RecognitionException {   
        AssignmentOperator t2 = null;

        Expression t3 = null;


        // src/cedp/src2src/frontend/java/Java.g:2575:10: (t2= assignmentOperator t3= expression )
        // src/cedp/src2src/frontend/java/Java.g:2575:10: t2= assignmentOperator t3= expression
        {
        pushFollow(FOLLOW_assignmentOperator_in_synpred181_Java10606);
        t2=assignmentOperator();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred181_Java10610);
        t3=expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_Java

    // $ANTLR start synpred192_Java
    public final void synpred192_Java_fragment() throws RecognitionException {   
        BinaryOperator t2 = null;

        Expression t3 = null;


        // src/cedp/src2src/frontend/java/Java.g:2656:11: (t2= shiftOp t3= additiveExpression )
        // src/cedp/src2src/frontend/java/Java.g:2656:11: t2= shiftOp t3= additiveExpression
        {
        pushFollow(FOLLOW_shiftOp_in_synpred192_Java11425);
        t2=shiftOp();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_additiveExpression_in_synpred192_Java11429);
        t3=additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_Java

    // $ANTLR start synpred204_Java
    public final void synpred204_Java_fragment() throws RecognitionException {   
        Expression t3 = null;


        // src/cedp/src2src/frontend/java/Java.g:2697:9: (t3= castExpression )
        // src/cedp/src2src/frontend/java/Java.g:2697:9: t3= castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred204_Java11885);
        t3=castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred204_Java

    // $ANTLR start synpred208_Java
    public final void synpred208_Java_fragment() throws RecognitionException {   
        Specifier t1 = null;

        Expression t2 = null;


        // src/cedp/src2src/frontend/java/Java.g:2711:8: ( '(' t1= primitiveType ')' t2= unaryExpression )
        // src/cedp/src2src/frontend/java/Java.g:2711:8: '(' t1= primitiveType ')' t2= unaryExpression
        {
        match(input,58,FOLLOW_58_in_synpred208_Java11999); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred208_Java12003);
        t1=primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,59,FOLLOW_59_in_synpred208_Java12005); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred208_Java12009);
        t2=unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_Java

    // $ANTLR start synpred209_Java
    public final void synpred209_Java_fragment() throws RecognitionException {   
        Declaration t3 = null;


        // src/cedp/src2src/frontend/java/Java.g:2714:17: (t3= type )
        // src/cedp/src2src/frontend/java/Java.g:2714:17: t3= type
        {
        pushFollow(FOLLOW_type_in_synpred209_Java12041);
        t3=type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_Java

    // $ANTLR start synpred226_Java
    public final void synpred226_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:2752:9: ( '<' '<' '=' )
        // src/cedp/src2src/frontend/java/Java.g:2752:10: '<' '<' '='
        {
        match(input,40,FOLLOW_40_in_synpred226_Java12341); if (state.failed) return ;
        match(input,40,FOLLOW_40_in_synpred226_Java12343); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred226_Java12345); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred226_Java

    // $ANTLR start synpred227_Java
    public final void synpred227_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:2760:9: ( '>' '>' '>' '=' )
        // src/cedp/src2src/frontend/java/Java.g:2760:10: '>' '>' '>' '='
        {
        match(input,42,FOLLOW_42_in_synpred227_Java12395); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred227_Java12397); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred227_Java12399); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred227_Java12401); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_Java

    // $ANTLR start synpred228_Java
    public final void synpred228_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:2770:9: ( '>' '>' '=' )
        // src/cedp/src2src/frontend/java/Java.g:2770:10: '>' '>' '='
        {
        match(input,42,FOLLOW_42_in_synpred228_Java12454); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred228_Java12456); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred228_Java12458); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_Java

    // $ANTLR start synpred229_Java
    public final void synpred229_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:2783:9: ( '<' '=' )
        // src/cedp/src2src/frontend/java/Java.g:2783:10: '<' '='
        {
        match(input,40,FOLLOW_40_in_synpred229_Java12531); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred229_Java12533); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_Java

    // $ANTLR start synpred230_Java
    public final void synpred230_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:2789:9: ( '>' '=' )
        // src/cedp/src2src/frontend/java/Java.g:2789:10: '>' '='
        {
        match(input,42,FOLLOW_42_in_synpred230_Java12578); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred230_Java12580); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_Java

    // $ANTLR start synpred232_Java
    public final void synpred232_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:2808:9: ( '<' '<' )
        // src/cedp/src2src/frontend/java/Java.g:2808:10: '<' '<'
        {
        match(input,40,FOLLOW_40_in_synpred232_Java12697); if (state.failed) return ;
        match(input,40,FOLLOW_40_in_synpred232_Java12699); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_Java

    // $ANTLR start synpred233_Java
    public final void synpred233_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:2814:9: ( '>' '>' '>' )
        // src/cedp/src2src/frontend/java/Java.g:2814:10: '>' '>' '>'
        {
        match(input,42,FOLLOW_42_in_synpred233_Java12744); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred233_Java12746); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred233_Java12748); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_Java

    // $ANTLR start synpred234_Java
    public final void synpred234_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:2822:9: ( '>' '>' )
        // src/cedp/src2src/frontend/java/Java.g:2822:10: '>' '>'
        {
        match(input,42,FOLLOW_42_in_synpred234_Java12797); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred234_Java12799); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_Java

    // $ANTLR start synpred236_Java
    public final void synpred236_Java_fragment() throws RecognitionException {   
        Token t2=null;

        // src/cedp/src2src/frontend/java/Java.g:2847:10: ( '.' t2= Identifier )
        // src/cedp/src2src/frontend/java/Java.g:2847:10: '.' t2= Identifier
        {
        match(input,29,FOLLOW_29_in_synpred236_Java12933); if (state.failed) return ;
        t2=(Token)match(input,Identifier,FOLLOW_Identifier_in_synpred236_Java12937); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_Java

    // $ANTLR start synpred237_Java
    public final void synpred237_Java_fragment() throws RecognitionException {   
        Declaration t3 = null;


        // src/cedp/src2src/frontend/java/Java.g:2854:10: (t3= identifierSuffix )
        // src/cedp/src2src/frontend/java/Java.g:2854:10: t3= identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred237_Java12975);
        t3=identifierSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_Java

    // $ANTLR start synpred242_Java
    public final void synpred242_Java_fragment() throws RecognitionException {   
        Token t8=null;

        // src/cedp/src2src/frontend/java/Java.g:2882:10: ( '.' t8= Identifier )
        // src/cedp/src2src/frontend/java/Java.g:2882:10: '.' t8= Identifier
        {
        match(input,29,FOLLOW_29_in_synpred242_Java13136); if (state.failed) return ;
        t8=(Token)match(input,Identifier,FOLLOW_Identifier_in_synpred242_Java13140); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred242_Java

    // $ANTLR start synpred243_Java
    public final void synpred243_Java_fragment() throws RecognitionException {   
        Declaration t9 = null;


        // src/cedp/src2src/frontend/java/Java.g:2889:10: (t9= identifierSuffix )
        // src/cedp/src2src/frontend/java/Java.g:2889:10: t9= identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred243_Java13179);
        t9=identifierSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_Java

    // $ANTLR start synpred249_Java
    public final void synpred249_Java_fragment() throws RecognitionException {   
        Expression t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:2933:10: ( '[' t1= expression ']' )
        // src/cedp/src2src/frontend/java/Java.g:2933:10: '[' t1= expression ']'
        {
        match(input,48,FOLLOW_48_in_synpred249_Java13431); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred249_Java13458);
        t1=expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,49,FOLLOW_49_in_synpred249_Java13482); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_Java

    // $ANTLR start synpred262_Java
    public final void synpred262_Java_fragment() throws RecognitionException {   
        Expression t3 = null;


        // src/cedp/src2src/frontend/java/Java.g:3094:14: ( '[' t3= expression ']' )
        // src/cedp/src2src/frontend/java/Java.g:3094:14: '[' t3= expression ']'
        {
        match(input,48,FOLLOW_48_in_synpred262_Java14159); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred262_Java14163);
        t3=expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,49,FOLLOW_49_in_synpred262_Java14165); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_Java

    // Delegated rules

    public final boolean synpred226_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA8 dfa8 = new DFA8(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA1 dfa1 = new DFA1(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA172 dfa172 = new DFA172(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA173 dfa173 = new DFA173(this);
    protected DFA174 dfa174 = new DFA174(this);
    protected DFA176 dfa176 = new DFA176(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA183 dfa183 = new DFA183(this);
    static final String DFA8_eotS =
        "\23\uffff";
    static final String DFA8_eofS =
        "\1\2\22\uffff";
    static final String DFA8_minS =
        "\1\5\1\4\17\uffff\1\0\1\uffff";
    static final String DFA8_maxS =
        "\1\101\1\56\17\uffff\1\0\1\uffff";
    static final String DFA8_acceptS =
        "\2\uffff\1\2\17\uffff\1\1";
    static final String DFA8_specialS =
        "\21\uffff\1\0\1\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\2\23\uffff\4\2\2\uffff\7\2\10\uffff\1\2\22\uffff\1\1",
            "\1\21\51\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "517:1: translationUnit[TranslationUnit init_tunit] returns [TranslationUnit tunit] : (t1= annotations (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* ) | (t7= packageDeclaration )? (t8= importDeclaration )* (t9= typeDeclaration )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Java()) ) {s = 18;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\15\uffff";
    static final String DFA4_eofS =
        "\15\uffff";
    static final String DFA4_minS =
        "\1\5\14\uffff";
    static final String DFA4_maxS =
        "\1\101\14\uffff";
    static final String DFA4_acceptS =
        "\1\uffff\1\1\1\2\12\uffff";
    static final String DFA4_specialS =
        "\15\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\2\23\uffff\1\1\2\uffff\1\2\2\uffff\7\2\10\uffff\1\2\22\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "534:9: (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* )";
        }
    }
    static final String DFA1_eotS =
        "\17\uffff";
    static final String DFA1_eofS =
        "\1\1\16\uffff";
    static final String DFA1_minS =
        "\1\5\16\uffff";
    static final String DFA1_maxS =
        "\1\101\16\uffff";
    static final String DFA1_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA1_specialS =
        "\17\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\1\24\uffff\1\1\1\16\1\1\2\uffff\7\1\10\uffff\1\1\22\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "()* loopback of 538:13: (t3= importDeclaration )*";
        }
    }
    static final String DFA2_eotS =
        "\16\uffff";
    static final String DFA2_eofS =
        "\1\1\15\uffff";
    static final String DFA2_minS =
        "\1\5\15\uffff";
    static final String DFA2_maxS =
        "\1\101\15\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\2\1\1\13\uffff";
    static final String DFA2_specialS =
        "\16\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\10\uffff\1\2\22\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()* loopback of 543:13: (t4= typeDeclaration )*";
        }
    }
    static final String DFA3_eotS =
        "\16\uffff";
    static final String DFA3_eofS =
        "\1\1\15\uffff";
    static final String DFA3_minS =
        "\1\5\15\uffff";
    static final String DFA3_maxS =
        "\1\101\15\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\2\1\1\13\uffff";
    static final String DFA3_specialS =
        "\16\uffff}>";
    static final String[] DFA3_transitionS = {
            "\1\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\10\uffff\1\2\22\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 552:13: (t6= typeDeclaration )*";
        }
    }
    static final String DFA5_eotS =
        "\20\uffff";
    static final String DFA5_eofS =
        "\1\2\17\uffff";
    static final String DFA5_minS =
        "\1\5\17\uffff";
    static final String DFA5_maxS =
        "\1\101\17\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\1\1\2\15\uffff";
    static final String DFA5_specialS =
        "\20\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\2\23\uffff\1\1\3\2\2\uffff\7\2\10\uffff\1\2\22\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "558:9: (t7= packageDeclaration )?";
        }
    }
    static final String DFA6_eotS =
        "\17\uffff";
    static final String DFA6_eofS =
        "\1\1\16\uffff";
    static final String DFA6_minS =
        "\1\5\16\uffff";
    static final String DFA6_maxS =
        "\1\101\16\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA6_specialS =
        "\17\uffff}>";
    static final String[] DFA6_transitionS = {
            "\1\1\24\uffff\1\1\1\16\1\1\2\uffff\7\1\10\uffff\1\1\22\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 563:9: (t8= importDeclaration )*";
        }
    }
    static final String DFA7_eotS =
        "\16\uffff";
    static final String DFA7_eofS =
        "\1\1\15\uffff";
    static final String DFA7_minS =
        "\1\5\15\uffff";
    static final String DFA7_maxS =
        "\1\101\15\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\2\1\1\13\uffff";
    static final String DFA7_specialS =
        "\16\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\10\uffff\1\2\22\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()* loopback of 568:9: (t9= typeDeclaration )*";
        }
    }
    static final String DFA11_eotS =
        "\15\uffff";
    static final String DFA11_eofS =
        "\15\uffff";
    static final String DFA11_minS =
        "\1\5\14\uffff";
    static final String DFA11_maxS =
        "\1\101\14\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\1\12\uffff\1\2";
    static final String DFA11_specialS =
        "\15\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\1\24\uffff\1\14\1\uffff\1\1\2\uffff\7\1\10\uffff\1\1\22\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "596:1: typeDeclaration returns [Declaration ret_decl] : (t1= classOrInterfaceDeclaration | ';' );";
        }
    }
    static final String DFA13_eotS =
        "\16\uffff";
    static final String DFA13_eofS =
        "\16\uffff";
    static final String DFA13_minS =
        "\1\5\3\uffff\1\4\11\uffff";
    static final String DFA13_maxS =
        "\1\101\3\uffff\1\56\11\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\10\uffff";
    static final String DFA13_specialS =
        "\16\uffff}>";
    static final String[] DFA13_transitionS = {
            "\1\1\26\uffff\1\5\2\uffff\6\5\1\1\10\uffff\1\1\22\uffff\1\4",
            "",
            "",
            "",
            "\1\5\51\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 635:9: (t1= classOrInterfaceModifier )*";
        }
    }
    static final String DFA15_eotS =
        "\35\uffff";
    static final String DFA15_eofS =
        "\35\uffff";
    static final String DFA15_minS =
        "\1\4\14\uffff\1\4\17\uffff";
    static final String DFA15_maxS =
        "\1\150\14\uffff\1\56\17\uffff";
    static final String DFA15_acceptS =
        "\1\uffff\1\2\16\uffff\1\1\14\uffff";
    static final String DFA15_specialS =
        "\35\uffff}>";
    static final String[] DFA15_transitionS = {
            "\2\1\26\uffff\1\20\2\uffff\6\20\1\1\2\uffff\1\1\5\uffff\2\1"+
            "\4\uffff\4\20\11\uffff\1\15\37\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\20\51\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "()* loopback of 693:9: (t1= modifier )*";
        }
    }
    static final String DFA31_eotS =
        "\37\uffff";
    static final String DFA31_eofS =
        "\1\1\36\uffff";
    static final String DFA31_minS =
        "\1\4\36\uffff";
    static final String DFA31_maxS =
        "\1\150\36\uffff";
    static final String DFA31_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\33\uffff";
    static final String DFA31_specialS =
        "\37\uffff}>";
    static final String[] DFA31_transitionS = {
            "\2\3\24\uffff\1\3\1\uffff\1\3\2\uffff\7\3\2\uffff\1\3\3\uffff"+
            "\1\3\1\1\2\3\4\uffff\4\3\11\uffff\1\3\37\uffff\10\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "()* loopback of 890:9: (t1= classBodyDeclaration )*";
        }
    }
    static final String DFA36_eotS =
        "\36\uffff";
    static final String DFA36_eofS =
        "\36\uffff";
    static final String DFA36_minS =
        "\1\4\35\uffff";
    static final String DFA36_maxS =
        "\1\150\35\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\2\1\1\33\uffff";
    static final String DFA36_specialS =
        "\36\uffff}>";
    static final String[] DFA36_transitionS = {
            "\2\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\2\uffff\1\2\3\uffff"+
            "\1\2\1\1\2\2\4\uffff\4\2\11\uffff\1\2\37\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "()* loopback of 943:13: (t1= classBodyDeclaration )*";
        }
    }
    static final String DFA37_eotS =
        "\35\uffff";
    static final String DFA37_eofS =
        "\35\uffff";
    static final String DFA37_minS =
        "\1\4\34\uffff";
    static final String DFA37_maxS =
        "\1\150\34\uffff";
    static final String DFA37_acceptS =
        "\1\uffff\1\2\1\1\32\uffff";
    static final String DFA37_specialS =
        "\35\uffff}>";
    static final String[] DFA37_transitionS = {
            "\2\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\2\uffff\1\2\4\uffff"+
            "\1\1\2\2\4\uffff\4\2\11\uffff\1\2\37\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "()* loopback of 959:13: (t1= interfaceBodyDeclaration )*";
        }
    }
    static final String DFA39_eotS =
        "\70\uffff";
    static final String DFA39_eofS =
        "\70\uffff";
    static final String DFA39_minS =
        "\1\4\1\uffff\1\4\65\uffff";
    static final String DFA39_maxS =
        "\1\150\1\uffff\1\150\65\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3\63\uffff";
    static final String DFA39_specialS =
        "\70\uffff}>";
    static final String[] DFA39_transitionS = {
            "\2\4\24\uffff\1\1\1\uffff\1\2\2\uffff\7\4\2\uffff\1\4\3\uffff"+
            "\1\3\1\uffff\2\4\4\uffff\4\4\11\uffff\1\4\37\uffff\10\4",
            "",
            "\2\4\26\uffff\1\4\2\uffff\7\4\2\uffff\1\4\3\uffff\1\3\1\uffff"+
            "\2\4\4\uffff\4\4\11\uffff\1\4\37\uffff\10\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "971:1: classBodyDeclaration returns [Declaration ret_decl] : ( ';' | ( 'static' )? t1= block | t3= modifiers t4= memberDecl );";
        }
    }
    static final String DFA40_eotS =
        "\25\uffff";
    static final String DFA40_eofS =
        "\25\uffff";
    static final String DFA40_minS =
        "\1\4\1\uffff\1\4\22\uffff";
    static final String DFA40_maxS =
        "\1\150\1\uffff\1\72\22\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\7\uffff\1\3\1\5\1\uffff\1\6\5\uffff\1\4";
    static final String DFA40_specialS =
        "\25\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\2\1\16\37\uffff\1\16\2\uffff\1\1\5\uffff\1\14\1\13\21\uffff"+
            "\1\14\37\uffff\10\3",
            "",
            "\1\3\30\uffff\1\3\12\uffff\1\3\7\uffff\1\3\11\uffff\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "1001:1: memberDecl returns [Declaration ret_decl] : (t1= genericMethodOrConstructorDecl | t2= memberDeclaration | 'void' Identifier t3= voidMethodDeclaratorRest | Identifier t4= constructorDeclaratorRest | t5= interfaceDeclaration | t6= classDeclaration );";
        }
    }
    static final String DFA43_eotS =
        "\20\uffff";
    static final String DFA43_eofS =
        "\20\uffff";
    static final String DFA43_minS =
        "\2\4\16\uffff";
    static final String DFA43_maxS =
        "\1\150\1\72\16\uffff";
    static final String DFA43_acceptS =
        "\2\uffff\1\1\14\uffff\1\2";
    static final String DFA43_specialS =
        "\20\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\1\52\uffff\1\2\61\uffff\10\2",
            "\1\2\30\uffff\1\2\12\uffff\1\2\7\uffff\1\2\11\uffff\1\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "1082:1: genericMethodOrConstructorRest returns [Declaration ret_decl] : ( (t1= type | 'void' ) t2= Identifier t3= methodDeclaratorRest | t4= Identifier t5= constructorDeclaratorRest );";
        }
    }
    static final String DFA42_eotS =
        "\13\uffff";
    static final String DFA42_eofS =
        "\13\uffff";
    static final String DFA42_minS =
        "\1\4\12\uffff";
    static final String DFA42_maxS =
        "\1\150\12\uffff";
    static final String DFA42_acceptS =
        "\1\uffff\1\1\10\uffff\1\2";
    static final String DFA42_specialS =
        "\13\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\1\52\uffff\1\12\61\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "1084:9: (t1= type | 'void' )";
        }
    }
    static final String DFA44_eotS =
        "\34\uffff";
    static final String DFA44_eofS =
        "\34\uffff";
    static final String DFA44_minS =
        "\1\4\33\uffff";
    static final String DFA44_maxS =
        "\1\150\33\uffff";
    static final String DFA44_acceptS =
        "\1\uffff\1\1\31\uffff\1\2";
    static final String DFA44_specialS =
        "\34\uffff}>";
    static final String[] DFA44_transitionS = {
            "\2\1\24\uffff\1\33\1\uffff\1\1\2\uffff\7\1\2\uffff\1\1\5\uffff"+
            "\2\1\4\uffff\4\1\11\uffff\1\1\37\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "1126:1: interfaceBodyDeclaration returns [Declaration ret_decl] : (t1= modifiers t2= interfaceMemberDecl | ';' );";
        }
    }
    static final String DFA45_eotS =
        "\20\uffff";
    static final String DFA45_eofS =
        "\20\uffff";
    static final String DFA45_minS =
        "\1\4\17\uffff";
    static final String DFA45_maxS =
        "\1\150\17\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\uffff\1\5\1\uffff";
    static final String DFA45_specialS =
        "\20\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\1\1\16\37\uffff\1\16\2\uffff\1\12\5\uffff\1\14\1\13\21\uffff"+
            "\1\14\37\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "1140:1: interfaceMemberDecl returns [Declaration ret_decl] : (t1= interfaceMethodOrFieldDecl | t2= interfaceGenericMethodDecl | 'void' Identifier t3= voidInterfaceMethodDeclaratorRest | t4= interfaceDeclaration | t5= classDeclaration );";
        }
    }
    static final String DFA54_eotS =
        "\13\uffff";
    static final String DFA54_eofS =
        "\13\uffff";
    static final String DFA54_minS =
        "\1\4\12\uffff";
    static final String DFA54_maxS =
        "\1\150\12\uffff";
    static final String DFA54_acceptS =
        "\1\uffff\1\1\10\uffff\1\2";
    static final String DFA54_specialS =
        "\13\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\1\52\uffff\1\12\61\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "1277:27: (t2= type | 'void' )";
        }
    }
    static final String DFA62_eotS =
        "\37\uffff";
    static final String DFA62_eofS =
        "\37\uffff";
    static final String DFA62_minS =
        "\1\4\36\uffff";
    static final String DFA62_maxS =
        "\1\161\36\uffff";
    static final String DFA62_acceptS =
        "\1\uffff\1\1\1\2\34\uffff";
    static final String DFA62_specialS =
        "\37\uffff}>";
    static final String[] DFA62_transitionS = {
            "\1\2\1\uffff\6\2\40\uffff\1\1\2\uffff\1\2\11\uffff\2\2\2\uffff"+
            "\4\2\30\uffff\2\2\2\uffff\14\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA62_eot = DFA.unpackEncodedString(DFA62_eotS);
    static final short[] DFA62_eof = DFA.unpackEncodedString(DFA62_eofS);
    static final char[] DFA62_min = DFA.unpackEncodedStringToUnsignedChars(DFA62_minS);
    static final char[] DFA62_max = DFA.unpackEncodedStringToUnsignedChars(DFA62_maxS);
    static final short[] DFA62_accept = DFA.unpackEncodedString(DFA62_acceptS);
    static final short[] DFA62_special = DFA.unpackEncodedString(DFA62_specialS);
    static final short[][] DFA62_transition;

    static {
        int numStates = DFA62_transitionS.length;
        DFA62_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA62_transition[i] = DFA.unpackEncodedString(DFA62_transitionS[i]);
        }
    }

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;
        }
        public String getDescription() {
            return "1401:1: variableInitializer returns [Initializer ret] : (t1= arrayInitializer | t2= expression );";
        }
    }
    static final String DFA65_eotS =
        "\40\uffff";
    static final String DFA65_eofS =
        "\40\uffff";
    static final String DFA65_minS =
        "\1\4\37\uffff";
    static final String DFA65_maxS =
        "\1\161\37\uffff";
    static final String DFA65_acceptS =
        "\1\uffff\1\1\35\uffff\1\2";
    static final String DFA65_specialS =
        "\40\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\1\1\uffff\6\1\40\uffff\1\1\1\37\1\uffff\1\1\11\uffff\2\1"+
            "\2\uffff\4\1\30\uffff\2\1\2\uffff\14\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "1417:13: (t1= variableInitializer ( ',' t2= variableInitializer )* ( ',' )? )?";
        }
    }
    static final String DFA63_eotS =
        "\42\uffff";
    static final String DFA63_eofS =
        "\42\uffff";
    static final String DFA63_minS =
        "\1\51\1\4\40\uffff";
    static final String DFA63_maxS =
        "\1\55\1\161\40\uffff";
    static final String DFA63_acceptS =
        "\2\uffff\1\2\1\1\36\uffff";
    static final String DFA63_specialS =
        "\42\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\1\3\uffff\1\2",
            "\1\3\1\uffff\6\3\40\uffff\1\3\1\2\1\uffff\1\3\11\uffff\2\3"+
            "\2\uffff\4\3\30\uffff\2\3\2\uffff\14\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "()* loopback of 1418:10: ( ',' t2= variableInitializer )*";
        }
    }
    static final String DFA66_eotS =
        "\15\uffff";
    static final String DFA66_eofS =
        "\15\uffff";
    static final String DFA66_minS =
        "\1\34\14\uffff";
    static final String DFA66_maxS =
        "\1\101\14\uffff";
    static final String DFA66_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA66_specialS =
        "\15\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\5\2\uffff\1\2\1\3\1\4\1\6\1\7\1\14\17\uffff\1\10\1\11\1\12"+
            "\1\13\11\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "1445:1: modifier returns [Declaration ret_decl] : (t1= annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );";
        }
    }
    static final String DFA69_eotS =
        "\12\uffff";
    static final String DFA69_eofS =
        "\12\uffff";
    static final String DFA69_minS =
        "\1\4\11\uffff";
    static final String DFA69_maxS =
        "\1\150\11\uffff";
    static final String DFA69_acceptS =
        "\1\uffff\1\1\1\2\7\uffff";
    static final String DFA69_specialS =
        "\12\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\1\134\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "1530:1: type returns [Declaration ret] : (t1= classOrInterfaceType ( '[' ']' )* | t2= primitiveType ( '[' ']' )* );";
        }
    }
    static final String DFA67_eotS =
        "\40\uffff";
    static final String DFA67_eofS =
        "\1\1\37\uffff";
    static final String DFA67_minS =
        "\1\4\37\uffff";
    static final String DFA67_maxS =
        "\1\160\37\uffff";
    static final String DFA67_acceptS =
        "\1\uffff\1\2\35\uffff\1\1";
    static final String DFA67_specialS =
        "\40\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\1\25\uffff\1\1\14\uffff\7\1\2\uffff\1\37\1\1\1\uffff\1\1"+
            "\4\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\6\1\21\uffff\10"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "()* loopback of 1539:7: ( '[' ']' )*";
        }
    }
    static final String DFA68_eotS =
        "\40\uffff";
    static final String DFA68_eofS =
        "\1\1\37\uffff";
    static final String DFA68_minS =
        "\1\4\37\uffff";
    static final String DFA68_maxS =
        "\1\160\37\uffff";
    static final String DFA68_acceptS =
        "\1\uffff\1\2\35\uffff\1\1";
    static final String DFA68_specialS =
        "\40\uffff}>";
    static final String[] DFA68_transitionS = {
            "\1\1\25\uffff\1\1\14\uffff\7\1\2\uffff\1\37\1\1\1\uffff\1\1"+
            "\4\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\6\1\21\uffff\10"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "()* loopback of 1550:8: ( '[' ']' )*";
        }
    }
    static final String DFA70_eotS =
        "\55\uffff";
    static final String DFA70_eofS =
        "\1\2\54\uffff";
    static final String DFA70_minS =
        "\2\4\53\uffff";
    static final String DFA70_maxS =
        "\1\160\1\150\53\uffff";
    static final String DFA70_acceptS =
        "\2\uffff\1\2\40\uffff\1\1\11\uffff";
    static final String DFA70_specialS =
        "\55\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\2\25\uffff\1\2\2\uffff\1\2\11\uffff\1\2\1\1\5\2\2\uffff\2"+
            "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\3\2\6\uffff\1\2\16\uffff"+
            "\6\2\21\uffff\10\2",
            "\1\43\43\uffff\1\2\17\uffff\1\43\50\uffff\10\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "1561:21: (t2= typeArguments )?";
        }
    }
    static final String DFA72_eotS =
        "\42\uffff";
    static final String DFA72_eofS =
        "\1\1\41\uffff";
    static final String DFA72_minS =
        "\1\4\41\uffff";
    static final String DFA72_maxS =
        "\1\160\41\uffff";
    static final String DFA72_acceptS =
        "\1\uffff\1\2\37\uffff\1\1";
    static final String DFA72_specialS =
        "\42\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\1\25\uffff\1\1\2\uffff\1\41\11\uffff\7\1\2\uffff\2\1\1\uffff"+
            "\1\1\4\uffff\1\1\1\uffff\3\1\6\uffff\1\1\16\uffff\6\1\21\uffff"+
            "\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "()* loopback of 1567:7: ( '.' t3= Identifier (t4= typeArguments )? )*";
        }
    }
    static final String DFA71_eotS =
        "\55\uffff";
    static final String DFA71_eofS =
        "\1\2\54\uffff";
    static final String DFA71_minS =
        "\2\4\53\uffff";
    static final String DFA71_maxS =
        "\1\160\1\150\53\uffff";
    static final String DFA71_acceptS =
        "\2\uffff\1\2\40\uffff\1\1\11\uffff";
    static final String DFA71_specialS =
        "\55\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\2\25\uffff\1\2\2\uffff\1\2\11\uffff\1\2\1\1\5\2\2\uffff\2"+
            "\2\1\uffff\1\2\4\uffff\1\2\1\uffff\3\2\6\uffff\1\2\16\uffff"+
            "\6\2\21\uffff\10\2",
            "\1\43\43\uffff\1\2\17\uffff\1\43\50\uffff\10\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "1567:28: (t4= typeArguments )?";
        }
    }
    static final String DFA77_eotS =
        "\13\uffff";
    static final String DFA77_eofS =
        "\13\uffff";
    static final String DFA77_minS =
        "\1\4\12\uffff";
    static final String DFA77_maxS =
        "\1\150\12\uffff";
    static final String DFA77_acceptS =
        "\1\uffff\1\1\10\uffff\1\2";
    static final String DFA77_specialS =
        "\13\uffff}>";
    static final String[] DFA77_transitionS = {
            "\1\1\63\uffff\1\12\50\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "1631:1: typeArgument returns [Declaration ret_decl] : (t1= type | '?' ( ( 'extends' | 'super' ) t2= type )? );";
        }
    }
    static final String DFA79_eotS =
        "\15\uffff";
    static final String DFA79_eofS =
        "\15\uffff";
    static final String DFA79_minS =
        "\1\4\14\uffff";
    static final String DFA79_maxS =
        "\1\150\14\uffff";
    static final String DFA79_acceptS =
        "\1\uffff\1\1\12\uffff\1\2";
    static final String DFA79_specialS =
        "\15\uffff}>";
    static final String[] DFA79_transitionS = {
            "\1\1\36\uffff\1\1\27\uffff\1\14\5\uffff\1\1\37\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "1686:13: (t1= formalParameterDecls )?";
        }
    }
    static final String DFA82_eotS =
        "\u01c9\uffff";
    static final String DFA82_eofS =
        "\u01c9\uffff";
    static final String DFA82_minS =
        "\1\4\1\uffff\1\32\1\35\1\4\11\32\12\4\1\35\40\uffff\3\0\34\uffff"+
        "\40\0\35\uffff\1\0\35\uffff\1\0\35\uffff\1\0\35\uffff\1\0\35\uffff"+
        "\1\0\35\uffff\1\0\35\uffff\1\0\35\uffff\1\0\35\uffff\12\0\1\uffff"+
        "\3\0\35\uffff\1\0\1\uffff\2\0\1\uffff\3\0\1\uffff\1\0\1\uffff\3"+
        "\0\1\uffff\1\0\1\uffff\3\0\1\uffff\2\0\1\uffff\1\0";
    static final String DFA82_maxS =
        "\1\161\1\uffff\1\160\1\72\1\161\11\160\1\150\1\160\10\60\1\35\40"+
        "\uffff\3\0\34\uffff\40\0\35\uffff\1\0\35\uffff\1\0\35\uffff\1\0"+
        "\35\uffff\1\0\35\uffff\1\0\35\uffff\1\0\35\uffff\1\0\35\uffff\1"+
        "\0\35\uffff\12\0\1\uffff\3\0\35\uffff\1\0\1\uffff\2\0\1\uffff\3"+
        "\0\1\uffff\1\0\1\uffff\3\0\1\uffff\1\0\1\uffff\3\0\1\uffff\2\0\1"+
        "\uffff\1\0";
    static final String DFA82_acceptS =
        "\1\uffff\1\1\27\uffff\1\2\u01af\uffff";
    static final String DFA82_specialS =
        "\71\uffff\1\0\1\1\1\2\34\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
        "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\35\uffff"+
        "\1\43\35\uffff\1\44\35\uffff\1\45\35\uffff\1\46\35\uffff\1\47\35"+
        "\uffff\1\50\35\uffff\1\51\35\uffff\1\52\35\uffff\1\53\1\54\1\55"+
        "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\uffff\1\65\1\66\1\67\35\uffff"+
        "\1\70\1\uffff\1\71\1\72\1\uffff\1\73\1\74\1\75\1\uffff\1\76\1\uffff"+
        "\1\77\1\100\1\101\1\uffff\1\102\1\uffff\1\103\1\104\1\105\1\uffff"+
        "\1\106\1\107\1\uffff\1\110}>";
    static final String[] DFA82_transitionS = {
            "\1\17\1\31\1\10\1\11\1\12\1\5\1\6\1\7\1\31\15\uffff\1\31\1\uffff"+
            "\1\31\2\uffff\7\31\2\uffff\1\1\3\uffff\3\31\1\30\5\uffff\1\31"+
            "\3\uffff\1\3\1\4\2\uffff\1\2\1\15\1\13\1\14\1\31\2\uffff\1\31"+
            "\1\uffff\4\31\1\uffff\5\31\11\uffff\2\31\2\uffff\4\31\1\20\1"+
            "\21\1\22\1\23\1\24\1\25\1\26\1\27\10\uffff\1\16",
            "",
            "\1\31\2\uffff\1\72\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\73\2\uffff\1\31\4\uffff\1\31\1\uffff\1\71\27\uffff\15\31"+
            "\12\uffff\10\31",
            "\1\131\34\uffff\1\130",
            "\1\155\1\uffff\1\146\1\147\1\150\1\143\1\144\1\145\43\uffff"+
            "\1\166\11\uffff\1\142\1\140\2\uffff\1\141\1\153\1\151\1\152"+
            "\30\uffff\1\132\1\133\2\uffff\1\134\1\135\1\136\1\137\1\156"+
            "\1\157\1\160\1\161\1\162\1\163\1\164\1\165\10\uffff\1\154",
            "\1\31\2\uffff\1\167\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\4\uffff\1\31\31\uffff\15\31\12\uffff\10\31",
            "\1\31\2\uffff\1\u0095\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\4\uffff\1\31\31\uffff\15\31\12\uffff\10\31",
            "\1\31\2\uffff\1\u00b3\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\4\uffff\1\31\31\uffff\15\31\12\uffff\10\31",
            "\1\31\2\uffff\1\u00d1\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\4\uffff\1\31\31\uffff\15\31\12\uffff\10\31",
            "\1\31\2\uffff\1\u00ef\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\4\uffff\1\31\31\uffff\15\31\12\uffff\10\31",
            "\1\31\2\uffff\1\u010d\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\4\uffff\1\31\31\uffff\15\31\12\uffff\10\31",
            "\1\31\2\uffff\1\u012b\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\4\uffff\1\31\31\uffff\15\31\12\uffff\10\31",
            "\1\31\2\uffff\1\u0149\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\4\uffff\1\31\31\uffff\15\31\12\uffff\10\31",
            "\1\31\2\uffff\1\u0167\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\4\uffff\1\31\31\uffff\15\31\12\uffff\10\31",
            "\1\u0186\43\uffff\1\u0185\70\uffff\1\u0187\1\u0188\1\u0189"+
            "\1\u018a\1\u018b\1\u018c\1\u018d\1\u018e",
            "\1\31\25\uffff\1\31\2\uffff\1\u0190\1\31\11\uffff\1\31\1\uffff"+
            "\2\31\4\uffff\1\u0191\2\uffff\1\31\4\uffff\1\31\1\uffff\1\u0192"+
            "\10\uffff\1\31\16\uffff\15\31\12\uffff\10\31",
            "\1\31\30\uffff\1\u01b2\22\uffff\1\u01b0",
            "\1\31\30\uffff\1\u01b5\22\uffff\1\u01b3",
            "\1\31\30\uffff\1\u01b7\22\uffff\1\u01b6",
            "\1\31\30\uffff\1\u01bb\22\uffff\1\u01b9",
            "\1\31\30\uffff\1\u01bd\22\uffff\1\u01bc",
            "\1\31\30\uffff\1\u01c1\22\uffff\1\u01bf",
            "\1\31\30\uffff\1\u01c3\22\uffff\1\u01c2",
            "\1\31\30\uffff\1\u01c6\22\uffff\1\u01c5",
            "\1\u01c8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff"
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "1753:13: (t1= explicitConstructorInvocation )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA82_57 = input.LA(1);

                         
                        int index82_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_57);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA82_58 = input.LA(1);

                         
                        int index82_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_58);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA82_59 = input.LA(1);

                         
                        int index82_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_59);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA82_88 = input.LA(1);

                         
                        int index82_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_88);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA82_89 = input.LA(1);

                         
                        int index82_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_89);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA82_90 = input.LA(1);

                         
                        int index82_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_90);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA82_91 = input.LA(1);

                         
                        int index82_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_91);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA82_92 = input.LA(1);

                         
                        int index82_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_92);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA82_93 = input.LA(1);

                         
                        int index82_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_93);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA82_94 = input.LA(1);

                         
                        int index82_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_94);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA82_95 = input.LA(1);

                         
                        int index82_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_95);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA82_96 = input.LA(1);

                         
                        int index82_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_96);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA82_97 = input.LA(1);

                         
                        int index82_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_97);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA82_98 = input.LA(1);

                         
                        int index82_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_98);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA82_99 = input.LA(1);

                         
                        int index82_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_99);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA82_100 = input.LA(1);

                         
                        int index82_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_100);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA82_101 = input.LA(1);

                         
                        int index82_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_101);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA82_102 = input.LA(1);

                         
                        int index82_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_102);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA82_103 = input.LA(1);

                         
                        int index82_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_103);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA82_104 = input.LA(1);

                         
                        int index82_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_104);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA82_105 = input.LA(1);

                         
                        int index82_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_105);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA82_106 = input.LA(1);

                         
                        int index82_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_106);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA82_107 = input.LA(1);

                         
                        int index82_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_107);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA82_108 = input.LA(1);

                         
                        int index82_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_108);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA82_109 = input.LA(1);

                         
                        int index82_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_109);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA82_110 = input.LA(1);

                         
                        int index82_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_110);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA82_111 = input.LA(1);

                         
                        int index82_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_111);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA82_112 = input.LA(1);

                         
                        int index82_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_112);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA82_113 = input.LA(1);

                         
                        int index82_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_113);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA82_114 = input.LA(1);

                         
                        int index82_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_114);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA82_115 = input.LA(1);

                         
                        int index82_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_115);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA82_116 = input.LA(1);

                         
                        int index82_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_116);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA82_117 = input.LA(1);

                         
                        int index82_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_117);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA82_118 = input.LA(1);

                         
                        int index82_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_118);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA82_119 = input.LA(1);

                         
                        int index82_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_119);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA82_149 = input.LA(1);

                         
                        int index82_149 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_149);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA82_179 = input.LA(1);

                         
                        int index82_179 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_179);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA82_209 = input.LA(1);

                         
                        int index82_209 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_209);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA82_239 = input.LA(1);

                         
                        int index82_239 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_239);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA82_269 = input.LA(1);

                         
                        int index82_269 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_269);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA82_299 = input.LA(1);

                         
                        int index82_299 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_299);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA82_329 = input.LA(1);

                         
                        int index82_329 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_329);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA82_359 = input.LA(1);

                         
                        int index82_359 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_359);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA82_389 = input.LA(1);

                         
                        int index82_389 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_389);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA82_390 = input.LA(1);

                         
                        int index82_390 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_390);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA82_391 = input.LA(1);

                         
                        int index82_391 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_391);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA82_392 = input.LA(1);

                         
                        int index82_392 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_392);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA82_393 = input.LA(1);

                         
                        int index82_393 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_393);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA82_394 = input.LA(1);

                         
                        int index82_394 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_394);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA82_395 = input.LA(1);

                         
                        int index82_395 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_395);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA82_396 = input.LA(1);

                         
                        int index82_396 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_396);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA82_397 = input.LA(1);

                         
                        int index82_397 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_397);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA82_398 = input.LA(1);

                         
                        int index82_398 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_398);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA82_400 = input.LA(1);

                         
                        int index82_400 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_400);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA82_401 = input.LA(1);

                         
                        int index82_401 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_401);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA82_402 = input.LA(1);

                         
                        int index82_402 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_402);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA82_432 = input.LA(1);

                         
                        int index82_432 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_432);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA82_434 = input.LA(1);

                         
                        int index82_434 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_434);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA82_435 = input.LA(1);

                         
                        int index82_435 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_435);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA82_437 = input.LA(1);

                         
                        int index82_437 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_437);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA82_438 = input.LA(1);

                         
                        int index82_438 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_438);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA82_439 = input.LA(1);

                         
                        int index82_439 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_439);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA82_441 = input.LA(1);

                         
                        int index82_441 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_441);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA82_443 = input.LA(1);

                         
                        int index82_443 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_443);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA82_444 = input.LA(1);

                         
                        int index82_444 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_444);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA82_445 = input.LA(1);

                         
                        int index82_445 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_445);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA82_447 = input.LA(1);

                         
                        int index82_447 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_447);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA82_449 = input.LA(1);

                         
                        int index82_449 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_449);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA82_450 = input.LA(1);

                         
                        int index82_450 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_450);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA82_451 = input.LA(1);

                         
                        int index82_451 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_451);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA82_453 = input.LA(1);

                         
                        int index82_453 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_453);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA82_454 = input.LA(1);

                         
                        int index82_454 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_454);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA82_456 = input.LA(1);

                         
                        int index82_456 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index82_456);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA83_eotS =
        "\70\uffff";
    static final String DFA83_eofS =
        "\70\uffff";
    static final String DFA83_minS =
        "\1\4\67\uffff";
    static final String DFA83_maxS =
        "\1\161\67\uffff";
    static final String DFA83_acceptS =
        "\1\uffff\1\2\1\1\65\uffff";
    static final String DFA83_specialS =
        "\70\uffff}>";
    static final String[] DFA83_transitionS = {
            "\11\2\15\uffff\1\2\1\uffff\1\2\2\uffff\7\2\6\uffff\1\2\1\1\2"+
            "\2\5\uffff\1\2\3\uffff\2\2\2\uffff\5\2\2\uffff\1\2\1\uffff\4"+
            "\2\1\uffff\5\2\11\uffff\2\2\2\uffff\14\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "()* loopback of 1754:9: (t2= blockStatement )*";
        }
    }
    static final String DFA87_eotS =
        "\36\uffff";
    static final String DFA87_eofS =
        "\36\uffff";
    static final String DFA87_minS =
        "\1\4\1\uffff\2\35\27\uffff\2\0\1\uffff";
    static final String DFA87_maxS =
        "\1\161\1\uffff\2\72\27\uffff\2\0\1\uffff";
    static final String DFA87_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\31\uffff";
    static final String DFA87_specialS =
        "\33\uffff\1\0\1\1\1\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\4\1\uffff\6\4\34\uffff\1\1\6\uffff\1\4\11\uffff\1\3\1\4\2"+
            "\uffff\1\2\3\4\40\uffff\10\4\10\uffff\1\4",
            "",
            "\1\4\22\uffff\1\4\11\uffff\1\33",
            "\1\4\34\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "1768:1: explicitConstructorInvocation returns [Declaration ret] : ( (t1= nonWildcardTypeArguments )? ( 'this' | 'super' ) t2= arguments ';' | t3= primary '.' (t4= nonWildcardTypeArguments )? 'super' t5= arguments ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA87_27 = input.LA(1);

                         
                        int index87_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index87_27);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA87_28 = input.LA(1);

                         
                        int index87_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index87_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA89_eotS =
        "\12\uffff";
    static final String DFA89_eofS =
        "\12\uffff";
    static final String DFA89_minS =
        "\1\6\11\uffff";
    static final String DFA89_maxS =
        "\1\100\11\uffff";
    static final String DFA89_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\1\3\1\4\1\5\1\uffff\1\6";
    static final String DFA89_specialS =
        "\12\uffff}>";
    static final String[] DFA89_transitionS = {
            "\1\4\1\5\1\6\3\1\62\uffff\1\11\2\7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "1811:1: literal returns [Declaration ret] : (t1= integerLiteral | t2= FloatingPointLiteral | t3= CharacterLiteral | t4= StringLiteral | t5= booleanLiteral | 'null' );";
        }
    }
    static final String DFA92_eotS =
        "\22\uffff";
    static final String DFA92_eofS =
        "\1\1\21\uffff";
    static final String DFA92_minS =
        "\1\4\1\uffff\1\4\15\uffff\1\0\1\uffff";
    static final String DFA92_maxS =
        "\1\101\1\uffff\1\56\15\uffff\1\0\1\uffff";
    static final String DFA92_acceptS =
        "\1\uffff\1\2\17\uffff\1\1";
    static final String DFA92_specialS =
        "\20\uffff\1\0\1\uffff}>";
    static final String[] DFA92_transitionS = {
            "\2\1\23\uffff\1\1\2\uffff\1\1\2\uffff\7\1\10\uffff\1\1\22\uffff"+
            "\1\2",
            "",
            "\1\20\51\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1881:9: (t1= annotation )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_16 = input.LA(1);

                         
                        int index92_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index92_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA94_eotS =
        "\42\uffff";
    static final String DFA94_eofS =
        "\1\2\41\uffff";
    static final String DFA94_minS =
        "\1\4\41\uffff";
    static final String DFA94_maxS =
        "\1\150\41\uffff";
    static final String DFA94_acceptS =
        "\1\uffff\1\1\1\2\37\uffff";
    static final String DFA94_specialS =
        "\42\uffff}>";
    static final String[] DFA94_transitionS = {
            "\2\2\23\uffff\2\2\1\uffff\1\2\2\uffff\7\2\2\uffff\2\2\3\uffff"+
            "\3\2\4\uffff\4\2\2\uffff\1\1\1\2\5\uffff\1\2\37\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "1899:9: ( '(' (t2= elementValuePairs | t3= elementValue )? ')' )?";
        }
    }
    static final String DFA93_eotS =
        "\70\uffff";
    static final String DFA93_eofS =
        "\70\uffff";
    static final String DFA93_minS =
        "\1\4\1\35\66\uffff";
    static final String DFA93_maxS =
        "\1\161\1\136\66\uffff";
    static final String DFA93_acceptS =
        "\2\uffff\1\2\35\uffff\1\3\1\1\26\uffff";
    static final String DFA93_specialS =
        "\70\uffff}>";
    static final String[] DFA93_transitionS = {
            "\1\1\1\uffff\6\2\40\uffff\1\2\2\uffff\1\2\11\uffff\2\2\1\40"+
            "\1\uffff\5\2\27\uffff\2\2\2\uffff\14\2\10\uffff\1\2",
            "\2\2\11\uffff\1\2\1\uffff\2\2\4\uffff\1\2\2\uffff\1\41\4\uffff"+
            "\1\2\1\uffff\2\2\26\uffff\15\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "1903:12: (t2= elementValuePairs | t3= elementValue )?";
        }
    }
    static final String DFA95_eotS =
        "\43\uffff";
    static final String DFA95_eofS =
        "\1\1\42\uffff";
    static final String DFA95_minS =
        "\1\4\42\uffff";
    static final String DFA95_maxS =
        "\1\150\42\uffff";
    static final String DFA95_acceptS =
        "\1\uffff\1\2\40\uffff\1\1";
    static final String DFA95_specialS =
        "\43\uffff}>";
    static final String[] DFA95_transitionS = {
            "\2\1\23\uffff\2\1\1\uffff\1\1\1\42\1\uffff\7\1\2\uffff\2\1\3"+
            "\uffff\3\1\4\uffff\4\1\2\uffff\2\1\5\uffff\1\1\37\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "()* loopback of 1925:18: ( '.' Identifier )*";
        }
    }
    static final String DFA97_eotS =
        "\40\uffff";
    static final String DFA97_eofS =
        "\40\uffff";
    static final String DFA97_minS =
        "\1\4\37\uffff";
    static final String DFA97_maxS =
        "\1\161\37\uffff";
    static final String DFA97_acceptS =
        "\1\uffff\1\1\34\uffff\1\2\1\3";
    static final String DFA97_specialS =
        "\40\uffff}>";
    static final String[] DFA97_transitionS = {
            "\1\1\1\uffff\6\1\40\uffff\1\37\2\uffff\1\1\11\uffff\2\1\2\uffff"+
            "\4\1\1\36\27\uffff\2\1\2\uffff\14\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_specialS);
    static final short[][] DFA97_transition;

    static {
        int numStates = DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_transitionS[i]);
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }
        public String getDescription() {
            return "1963:1: elementValue returns [Declaration ret] : (t1= conditionalExpression | t2= annotation | t3= elementValueArrayInitializer );";
        }
    }
    static final String DFA99_eotS =
        "\42\uffff";
    static final String DFA99_eofS =
        "\42\uffff";
    static final String DFA99_minS =
        "\1\4\41\uffff";
    static final String DFA99_maxS =
        "\1\161\41\uffff";
    static final String DFA99_acceptS =
        "\1\uffff\1\1\36\uffff\1\2\1\uffff";
    static final String DFA99_specialS =
        "\42\uffff}>";
    static final String[] DFA99_transitionS = {
            "\1\1\1\uffff\6\1\35\uffff\1\40\2\uffff\1\1\1\40\1\uffff\1\1"+
            "\11\uffff\2\1\2\uffff\5\1\27\uffff\2\1\2\uffff\14\1\10\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "1984:13: (t1= elementValue ( ',' t2= elementValue )* )?";
        }
    }
    static final String DFA98_eotS =
        "\43\uffff";
    static final String DFA98_eofS =
        "\43\uffff";
    static final String DFA98_minS =
        "\1\51\1\4\41\uffff";
    static final String DFA98_maxS =
        "\1\55\1\161\41\uffff";
    static final String DFA98_acceptS =
        "\2\uffff\1\2\1\1\37\uffff";
    static final String DFA98_specialS =
        "\43\uffff}>";
    static final String[] DFA98_transitionS = {
            "\1\1\3\uffff\1\2",
            "\1\3\1\uffff\6\3\40\uffff\1\3\1\2\1\uffff\1\3\11\uffff\2\3"+
            "\2\uffff\5\3\27\uffff\2\3\2\uffff\14\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "()* loopback of 1990:9: ( ',' t2= elementValue )*";
        }
    }
    static final String DFA101_eotS =
        "\32\uffff";
    static final String DFA101_eofS =
        "\32\uffff";
    static final String DFA101_minS =
        "\1\4\31\uffff";
    static final String DFA101_maxS =
        "\1\150\31\uffff";
    static final String DFA101_acceptS =
        "\1\uffff\1\2\1\1\27\uffff";
    static final String DFA101_specialS =
        "\32\uffff}>";
    static final String[] DFA101_transitionS = {
            "\2\2\26\uffff\1\2\2\uffff\7\2\7\uffff\1\1\1\2\5\uffff\4\2\11"+
            "\uffff\1\2\37\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "()* loopback of 2029:9: (t1= annotationTypeElementDeclaration )*";
        }
    }
    static final String DFA106_eotS =
        "\16\uffff";
    static final String DFA106_eofS =
        "\16\uffff";
    static final String DFA106_minS =
        "\1\4\15\uffff";
    static final String DFA106_maxS =
        "\1\150\15\uffff";
    static final String DFA106_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5";
    static final String DFA106_specialS =
        "\16\uffff}>";
    static final String[] DFA106_transitionS = {
            "\1\1\1\14\37\uffff\1\12\10\uffff\1\13\22\uffff\1\15\37\uffff"+
            "\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "2050:1: annotationTypeElementRest returns [Declarator ret] : (t1= type t2= annotationMethodOrConstantRest ';' | t3= normalClassDeclaration ( ';' )? | t4= normalInterfaceDeclaration ( ';' )? | t5= enumDeclaration ( ';' )? | t6= annotationTypeDeclaration ( ';' )? );";
        }
    }
    static final String DFA102_eotS =
        "\34\uffff";
    static final String DFA102_eofS =
        "\1\2\33\uffff";
    static final String DFA102_minS =
        "\1\4\33\uffff";
    static final String DFA102_maxS =
        "\1\150\33\uffff";
    static final String DFA102_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA102_specialS =
        "\34\uffff}>";
    static final String[] DFA102_transitionS = {
            "\2\2\24\uffff\1\1\1\uffff\1\2\2\uffff\7\2\7\uffff\2\2\5\uffff"+
            "\4\2\11\uffff\1\2\37\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "2060:35: ( ';' )?";
        }
    }
    static final String DFA103_eotS =
        "\34\uffff";
    static final String DFA103_eofS =
        "\1\2\33\uffff";
    static final String DFA103_minS =
        "\1\4\33\uffff";
    static final String DFA103_maxS =
        "\1\150\33\uffff";
    static final String DFA103_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA103_specialS =
        "\34\uffff}>";
    static final String[] DFA103_transitionS = {
            "\2\2\24\uffff\1\1\1\uffff\1\2\2\uffff\7\2\7\uffff\2\2\5\uffff"+
            "\4\2\11\uffff\1\2\37\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "2067:39: ( ';' )?";
        }
    }
    static final String DFA104_eotS =
        "\34\uffff";
    static final String DFA104_eofS =
        "\1\2\33\uffff";
    static final String DFA104_minS =
        "\1\4\33\uffff";
    static final String DFA104_maxS =
        "\1\150\33\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA104_specialS =
        "\34\uffff}>";
    static final String[] DFA104_transitionS = {
            "\2\2\24\uffff\1\1\1\uffff\1\2\2\uffff\7\2\7\uffff\2\2\5\uffff"+
            "\4\2\11\uffff\1\2\37\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "2074:28: ( ';' )?";
        }
    }
    static final String DFA105_eotS =
        "\34\uffff";
    static final String DFA105_eofS =
        "\1\2\33\uffff";
    static final String DFA105_minS =
        "\1\4\33\uffff";
    static final String DFA105_maxS =
        "\1\150\33\uffff";
    static final String DFA105_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA105_specialS =
        "\34\uffff}>";
    static final String[] DFA105_transitionS = {
            "\2\2\24\uffff\1\1\1\uffff\1\2\2\uffff\7\2\7\uffff\2\2\5\uffff"+
            "\4\2\11\uffff\1\2\37\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "2081:38: ( ';' )?";
        }
    }
    static final String DFA109_eotS =
        "\70\uffff";
    static final String DFA109_eofS =
        "\70\uffff";
    static final String DFA109_minS =
        "\1\4\67\uffff";
    static final String DFA109_maxS =
        "\1\161\67\uffff";
    static final String DFA109_acceptS =
        "\1\uffff\1\2\1\1\65\uffff";
    static final String DFA109_specialS =
        "\70\uffff}>";
    static final String[] DFA109_transitionS = {
            "\11\2\15\uffff\1\2\1\uffff\1\2\2\uffff\7\2\6\uffff\1\2\1\1\2"+
            "\2\5\uffff\1\2\3\uffff\2\2\2\uffff\5\2\2\uffff\1\2\1\uffff\4"+
            "\2\1\uffff\5\2\11\uffff\2\2\2\uffff\14\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "()* loopback of 2138:13: (t1= blockStatement )*";
        }
    }
    static final String DFA110_eotS =
        "\u0086\uffff";
    static final String DFA110_eofS =
        "\u0086\uffff";
    static final String DFA110_minS =
        "\14\4\64\uffff\2\0\12\uffff\1\0\1\uffff\3\0\35\uffff\1\0\2\uffff"+
        "\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0"+
        "\2\uffff\1\0\2\uffff";
    static final String DFA110_maxS =
        "\1\161\1\150\1\56\1\160\10\60\64\uffff\2\0\12\uffff\1\0\1\uffff"+
        "\3\0\35\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1"+
        "\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff";
    static final String DFA110_acceptS =
        "\14\uffff\1\2\10\uffff\1\3\41\uffff\1\1\116\uffff";
    static final String DFA110_specialS =
        "\100\uffff\1\0\1\1\12\uffff\1\2\1\uffff\1\3\1\4\1\5\35\uffff\1\6"+
        "\2\uffff\1\7\2\uffff\1\10\2\uffff\1\11\2\uffff\1\12\2\uffff\1\13"+
        "\2\uffff\1\14\2\uffff\1\15\2\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\3\1\14\7\25\15\uffff\1\25\1\uffff\1\14\2\uffff\4\14\1\1\2"+
            "\14\6\uffff\1\25\1\uffff\1\14\1\25\5\uffff\1\25\3\uffff\2\25"+
            "\2\uffff\4\25\1\2\2\uffff\1\25\1\uffff\4\25\1\uffff\5\25\11"+
            "\uffff\2\25\2\uffff\4\25\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
            "\10\uffff\1\25",
            "\1\67\1\14\26\uffff\1\14\2\uffff\4\14\1\100\2\14\10\uffff\1"+
            "\14\22\uffff\1\101\37\uffff\10\67",
            "\1\114\51\uffff\1\14",
            "\1\67\25\uffff\1\25\2\uffff\1\117\1\25\11\uffff\1\116\1\uffff"+
            "\2\25\4\uffff\1\120\2\uffff\1\25\4\uffff\1\25\1\uffff\1\25\10"+
            "\uffff\1\25\16\uffff\15\25\12\uffff\10\25",
            "\1\67\30\uffff\1\25\22\uffff\1\156",
            "\1\67\30\uffff\1\25\22\uffff\1\161",
            "\1\67\30\uffff\1\25\22\uffff\1\164",
            "\1\67\30\uffff\1\25\22\uffff\1\167",
            "\1\67\30\uffff\1\25\22\uffff\1\172",
            "\1\67\30\uffff\1\25\22\uffff\1\175",
            "\1\67\30\uffff\1\25\22\uffff\1\u0080",
            "\1\67\30\uffff\1\25\22\uffff\1\u0083",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "2146:1: blockStatement returns [Declaration ret] : (t1= localVariableDeclarationStatement | t2= classOrInterfaceDeclaration | t3= statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA110_64 = input.LA(1);

                         
                        int index110_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (synpred145_Java()) ) {s = 12;}

                         
                        input.seek(index110_64);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA110_65 = input.LA(1);

                         
                        int index110_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (synpred145_Java()) ) {s = 12;}

                         
                        input.seek(index110_65);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA110_76 = input.LA(1);

                         
                        int index110_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (synpred145_Java()) ) {s = 12;}

                         
                        input.seek(index110_76);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA110_78 = input.LA(1);

                         
                        int index110_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index110_78);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA110_79 = input.LA(1);

                         
                        int index110_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index110_79);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA110_80 = input.LA(1);

                         
                        int index110_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index110_80);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA110_110 = input.LA(1);

                         
                        int index110_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index110_110);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA110_113 = input.LA(1);

                         
                        int index110_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index110_113);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA110_116 = input.LA(1);

                         
                        int index110_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index110_116);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA110_119 = input.LA(1);

                         
                        int index110_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index110_119);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA110_122 = input.LA(1);

                         
                        int index110_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index110_122);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA110_125 = input.LA(1);

                         
                        int index110_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index110_125);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA110_128 = input.LA(1);

                         
                        int index110_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index110_128);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA110_131 = input.LA(1);

                         
                        int index110_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index110_131);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA111_eotS =
        "\14\uffff";
    static final String DFA111_eofS =
        "\14\uffff";
    static final String DFA111_minS =
        "\1\4\13\uffff";
    static final String DFA111_maxS =
        "\1\150\13\uffff";
    static final String DFA111_acceptS =
        "\1\uffff\1\2\10\uffff\1\1\1\uffff";
    static final String DFA111_specialS =
        "\14\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\1\36\uffff\1\12\35\uffff\1\12\37\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "()* loopback of 2196:9: (t1= variableModifier )*";
        }
    }
    static final String DFA118_eotS =
        "\114\uffff";
    static final String DFA118_eofS =
        "\114\uffff";
    static final String DFA118_minS =
        "\1\4\41\uffff\1\32\51\uffff";
    static final String DFA118_maxS =
        "\1\161\41\uffff\1\160\51\uffff";
    static final String DFA118_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\34\uffff\1\20\37\uffff";
    static final String DFA118_specialS =
        "\114\uffff}>";
    static final String[] DFA118_transitionS = {
            "\1\42\1\uffff\6\17\1\2\15\uffff\1\16\21\uffff\1\1\2\uffff\1"+
            "\17\5\uffff\1\11\3\uffff\2\17\2\uffff\4\17\3\uffff\1\3\1\uffff"+
            "\1\4\1\5\1\6\1\7\1\uffff\1\10\1\12\1\13\1\14\1\15\11\uffff\2"+
            "\17\2\uffff\14\17\10\uffff\1\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\2\uffff\2\17\11\uffff\1\17\1\uffff\2\17\4\uffff\1\17"+
            "\2\uffff\1\17\4\uffff\1\17\1\uffff\1\17\10\uffff\1\54\16\uffff"+
            "\15\17\12\uffff\10\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "2204:1: statement returns [Declaration ret] : (t1= block | t2= ASSERT t3= expression ( ':' t4= expression )? ';' | 'if' t5= parExpression t6= statement ( options {k=1; } : 'else' t8= statement )? | 'for' '(' t9= forControl ')' t10= statement | 'while' t11= parExpression t12= statement | 'do' t13= statement 'while' t14= parExpression ';' | 'try' t15= block (t16= catches 'finally' t17= block | t18= catches | 'finally' t19= block ) | 'switch' t20= parExpression '{' t21= switchBlockStatementGroups '}' | 'synchronized' t22= parExpression t22_1= block | 'return' (t23= expression )? ';' | 'throw' t24= expression ';' | 'break' (t25= Identifier )? ';' | 'continue' (t26= Identifier )? ';' | ';' | t28= statementExpression ';' | t29= Identifier ':' t30= statement );";
        }
    }
    static final String DFA115_eotS =
        "\37\uffff";
    static final String DFA115_eofS =
        "\37\uffff";
    static final String DFA115_minS =
        "\1\4\36\uffff";
    static final String DFA115_maxS =
        "\1\161\36\uffff";
    static final String DFA115_acceptS =
        "\1\uffff\1\1\34\uffff\1\2";
    static final String DFA115_specialS =
        "\37\uffff}>";
    static final String[] DFA115_transitionS = {
            "\1\1\1\uffff\6\1\16\uffff\1\36\24\uffff\1\1\11\uffff\2\1\2\uffff"+
            "\4\1\30\uffff\2\1\2\uffff\14\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "2301:33: (t23= expression )?";
        }
    }
    static final String DFA119_eotS =
        "\76\uffff";
    static final String DFA119_eofS =
        "\1\1\75\uffff";
    static final String DFA119_minS =
        "\1\4\75\uffff";
    static final String DFA119_maxS =
        "\1\161\75\uffff";
    static final String DFA119_acceptS =
        "\1\uffff\1\2\73\uffff\1\1";
    static final String DFA119_specialS =
        "\76\uffff}>";
    static final String[] DFA119_transitionS = {
            "\11\1\15\uffff\1\1\1\uffff\1\1\2\uffff\7\1\6\uffff\4\1\5\uffff"+
            "\1\1\3\uffff\2\1\2\uffff\6\1\1\uffff\14\1\1\75\1\1\7\uffff\2"+
            "\1\2\uffff\14\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "()* loopback of 2365:9: (t2= catchClause )*";
        }
    }
    static final String DFA121_eotS =
        "\132\uffff";
    static final String DFA121_eofS =
        "\1\1\131\uffff";
    static final String DFA121_minS =
        "\1\4\67\uffff\2\0\40\uffff";
    static final String DFA121_maxS =
        "\1\161\67\uffff\2\0\40\uffff";
    static final String DFA121_acceptS =
        "\1\uffff\1\2\126\uffff\1\1\1\uffff";
    static final String DFA121_specialS =
        "\70\uffff\1\0\1\1\40\uffff}>";
    static final String[] DFA121_transitionS = {
            "\11\1\15\uffff\1\1\1\uffff\1\1\2\uffff\7\1\6\uffff\4\1\5\uffff"+
            "\1\1\3\uffff\2\1\2\uffff\5\1\1\71\1\uffff\1\1\1\uffff\4\1\1"+
            "\uffff\5\1\1\uffff\1\70\7\uffff\2\1\2\uffff\14\1\10\uffff\1"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "()+ loopback of 2416:9: (t1= switchLabel )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA121_56 = input.LA(1);

                         
                        int index121_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_Java()) ) {s = 88;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_56);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA121_57 = input.LA(1);

                         
                        int index121_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred171_Java()) ) {s = 88;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_57);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA122_eotS =
        "\73\uffff";
    static final String DFA122_eofS =
        "\1\1\72\uffff";
    static final String DFA122_minS =
        "\1\4\72\uffff";
    static final String DFA122_maxS =
        "\1\161\72\uffff";
    static final String DFA122_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\65\uffff";
    static final String DFA122_specialS =
        "\73\uffff}>";
    static final String[] DFA122_transitionS = {
            "\11\5\15\uffff\1\5\1\uffff\1\5\2\uffff\7\5\6\uffff\1\5\1\1\2"+
            "\5\5\uffff\1\5\3\uffff\2\5\2\uffff\5\5\1\1\1\uffff\1\5\1\uffff"+
            "\4\5\1\uffff\5\5\1\uffff\1\1\7\uffff\2\5\2\uffff\14\5\10\uffff"+
            "\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "()* loopback of 2421:9: (t2= blockStatement )*";
        }
    }
    static final String DFA123_eotS =
        "\41\uffff";
    static final String DFA123_eofS =
        "\41\uffff";
    static final String DFA123_minS =
        "\1\102\1\4\1\uffff\1\0\35\uffff";
    static final String DFA123_maxS =
        "\1\121\1\161\1\uffff\1\0\35\uffff";
    static final String DFA123_acceptS =
        "\2\uffff\1\3\1\uffff\1\1\33\uffff\1\2";
    static final String DFA123_specialS =
        "\3\uffff\1\0\35\uffff}>";
    static final String[] DFA123_transitionS = {
            "\1\2\16\uffff\1\1",
            "\1\3\1\uffff\6\4\43\uffff\1\4\11\uffff\2\4\2\uffff\4\4\30\uffff"+
            "\2\4\2\uffff\14\4\10\uffff\1\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "2429:1: switchLabel returns [Declaration ret] : ( 'case' t1= constantExpression ':' | 'case' t2= enumConstantName ':' | 'default' ':' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA123_3 = input.LA(1);

                         
                        int index123_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 4;}

                        else if ( (synpred174_Java()) ) {s = 32;}

                         
                        input.seek(index123_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA127_eotS =
        "\u010c\uffff";
    static final String DFA127_eofS =
        "\u010c\uffff";
    static final String DFA127_minS =
        "\14\4\25\uffff\16\4\10\uffff\1\4\25\uffff\1\32\1\61\1\32\1\uffff"+
        "\1\61\1\32\1\uffff\1\61\1\32\1\uffff\1\61\1\32\1\uffff\1\61\1\uffff"+
        "\1\32\1\61\1\uffff\1\32\1\61\1\uffff\1\32\1\61\1\uffff\1\32\56\0"+
        "\5\uffff\1\0\62\uffff\11\0\1\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5"+
        "\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff"+
        "\1\0\5\uffff";
    static final String DFA127_maxS =
        "\1\161\1\150\1\4\1\160\10\60\25\uffff\11\60\1\150\1\4\1\150\2\161"+
        "\10\uffff\1\161\25\uffff\1\103\1\61\1\103\1\uffff\1\61\1\103\1\uffff"+
        "\1\61\1\103\1\uffff\1\61\1\103\1\uffff\1\61\1\uffff\1\103\1\61\1"+
        "\uffff\1\103\1\61\1\uffff\1\103\1\61\1\uffff\1\103\56\0\5\uffff"+
        "\1\0\62\uffff\11\0\1\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1"+
        "\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5"+
        "\uffff";
    static final String DFA127_acceptS =
        "\14\uffff\1\2\u00ca\uffff\1\1\64\uffff";
    static final String DFA127_specialS =
        "\146\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\5\uffff\1\56\62\uffff\1"+
        "\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\uffff\1\70\5\uffff"+
        "\1\71\5\uffff\1\72\5\uffff\1\73\5\uffff\1\74\5\uffff\1\75\5\uffff"+
        "\1\76\5\uffff\1\77\5\uffff\1\100\5\uffff}>";
    static final String[] DFA127_transitionS = {
            "\1\3\1\uffff\6\14\16\uffff\1\14\10\uffff\1\1\13\uffff\1\14\11"+
            "\uffff\2\14\2\uffff\4\14\1\2\27\uffff\2\14\2\uffff\4\14\1\4"+
            "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\10\uffff\1\14",
            "\1\41\36\uffff\1\52\35\uffff\1\53\37\uffff\1\42\1\43\1\44\1"+
            "\45\1\46\1\47\1\50\1\51",
            "\1\54",
            "\1\115\25\uffff\1\14\2\uffff\1\55\1\14\11\uffff\1\67\3\14\4"+
            "\uffff\1\56\2\uffff\1\14\4\uffff\1\14\1\uffff\1\14\27\uffff"+
            "\15\14\12\uffff\10\14",
            "\1\117\30\uffff\1\14\22\uffff\1\116",
            "\1\122\30\uffff\1\14\22\uffff\1\121",
            "\1\125\30\uffff\1\14\22\uffff\1\124",
            "\1\130\30\uffff\1\14\22\uffff\1\127",
            "\1\134\30\uffff\1\14\22\uffff\1\132",
            "\1\137\30\uffff\1\14\22\uffff\1\135",
            "\1\142\30\uffff\1\14\22\uffff\1\140",
            "\1\145\30\uffff\1\14\22\uffff\1\143",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\151\30\uffff\1\147\12\uffff\1\146\7\uffff\1\150",
            "\1\153\53\uffff\1\152",
            "\1\155\53\uffff\1\154",
            "\1\157\53\uffff\1\156",
            "\1\161\53\uffff\1\160",
            "\1\163\53\uffff\1\162",
            "\1\165\53\uffff\1\164",
            "\1\167\53\uffff\1\166",
            "\1\171\53\uffff\1\170",
            "\1\172\36\uffff\1\u0083\35\uffff\1\u0084\37\uffff\1\173\1\174"+
            "\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082",
            "\1\u0085",
            "\1\u0088\30\uffff\1\u0086\5\uffff\1\u0091\26\uffff\1\u0087"+
            "\6\uffff\1\u0092\37\uffff\1\u0089\1\u008a\1\u008b\1\u008c\1"+
            "\u008d\1\u008e\1\u008f\1\u0090",
            "\1\u0093\40\uffff\1\14\2\uffff\1\14\20\uffff\1\14\3\uffff\1"+
            "\14\63\uffff\1\14",
            "\1\14\1\uffff\6\14\43\uffff\1\14\1\uffff\1\u0099\7\uffff\2"+
            "\14\2\uffff\4\14\30\uffff\2\14\2\uffff\14\14\10\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00cc\1\uffff\6\14\34\uffff\1\14\6\uffff\1\14\3\uffff\1"+
            "\14\4\uffff\1\u00d6\2\14\2\uffff\4\14\30\uffff\2\14\2\uffff"+
            "\4\14\1\u00cd\1\u00ce\1\u00cf\1\u00d0\1\u00d1\1\u00d2\1\u00d3"+
            "\1\u00d4\10\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\17\uffff\1\u00d7",
            "\1\u00dc",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\17\uffff\1\u00d7",
            "",
            "\1\u00e2",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\17\uffff\1\u00d7",
            "",
            "\1\u00e8",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\17\uffff\1\u00d7",
            "",
            "\1\u00ee",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\17\uffff\1\u00d7",
            "",
            "\1\u00f4",
            "",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\17\uffff\1\u00d7",
            "\1\u00fa",
            "",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\17\uffff\1\u00d7",
            "\1\u0100",
            "",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\17\uffff\1\u00d7",
            "\1\u0106",
            "",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\17\uffff\1\u00d7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "2455:1: forControl returns [Declaration ret] options {k=3; } : (t1= enhancedForControl | (t2= forInit )? ';' (t3= expression )? ';' (t4= forUpdate )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA127_102 = input.LA(1);

                         
                        int index127_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_102);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA127_103 = input.LA(1);

                         
                        int index127_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_103);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA127_104 = input.LA(1);

                         
                        int index127_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_104);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA127_105 = input.LA(1);

                         
                        int index127_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_105);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA127_106 = input.LA(1);

                         
                        int index127_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_106);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA127_107 = input.LA(1);

                         
                        int index127_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_107);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA127_108 = input.LA(1);

                         
                        int index127_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_108);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA127_109 = input.LA(1);

                         
                        int index127_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_109);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA127_110 = input.LA(1);

                         
                        int index127_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_110);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA127_111 = input.LA(1);

                         
                        int index127_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_111);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA127_112 = input.LA(1);

                         
                        int index127_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_112);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA127_113 = input.LA(1);

                         
                        int index127_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_113);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA127_114 = input.LA(1);

                         
                        int index127_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_114);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA127_115 = input.LA(1);

                         
                        int index127_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_115);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA127_116 = input.LA(1);

                         
                        int index127_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_116);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA127_117 = input.LA(1);

                         
                        int index127_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_117);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA127_118 = input.LA(1);

                         
                        int index127_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_118);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA127_119 = input.LA(1);

                         
                        int index127_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_119);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA127_120 = input.LA(1);

                         
                        int index127_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_120);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA127_121 = input.LA(1);

                         
                        int index127_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_121);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA127_122 = input.LA(1);

                         
                        int index127_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_122);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA127_123 = input.LA(1);

                         
                        int index127_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_123);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA127_124 = input.LA(1);

                         
                        int index127_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_124);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA127_125 = input.LA(1);

                         
                        int index127_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_125);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA127_126 = input.LA(1);

                         
                        int index127_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_126);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA127_127 = input.LA(1);

                         
                        int index127_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_127);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA127_128 = input.LA(1);

                         
                        int index127_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_128);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA127_129 = input.LA(1);

                         
                        int index127_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_129);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA127_130 = input.LA(1);

                         
                        int index127_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_130);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA127_131 = input.LA(1);

                         
                        int index127_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_131);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA127_132 = input.LA(1);

                         
                        int index127_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_132);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA127_133 = input.LA(1);

                         
                        int index127_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_133);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA127_134 = input.LA(1);

                         
                        int index127_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_134);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA127_135 = input.LA(1);

                         
                        int index127_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_135);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA127_136 = input.LA(1);

                         
                        int index127_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_136);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA127_137 = input.LA(1);

                         
                        int index127_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_137);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA127_138 = input.LA(1);

                         
                        int index127_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_138);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA127_139 = input.LA(1);

                         
                        int index127_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_139);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA127_140 = input.LA(1);

                         
                        int index127_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_140);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA127_141 = input.LA(1);

                         
                        int index127_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_141);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA127_142 = input.LA(1);

                         
                        int index127_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_142);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA127_143 = input.LA(1);

                         
                        int index127_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_143);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA127_144 = input.LA(1);

                         
                        int index127_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_144);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA127_145 = input.LA(1);

                         
                        int index127_145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_145);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA127_146 = input.LA(1);

                         
                        int index127_146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_146);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA127_147 = input.LA(1);

                         
                        int index127_147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_147);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA127_153 = input.LA(1);

                         
                        int index127_153 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_153);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA127_204 = input.LA(1);

                         
                        int index127_204 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_204);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA127_205 = input.LA(1);

                         
                        int index127_205 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_205);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA127_206 = input.LA(1);

                         
                        int index127_206 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_206);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA127_207 = input.LA(1);

                         
                        int index127_207 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_207);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA127_208 = input.LA(1);

                         
                        int index127_208 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_208);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA127_209 = input.LA(1);

                         
                        int index127_209 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_209);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA127_210 = input.LA(1);

                         
                        int index127_210 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_210);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA127_211 = input.LA(1);

                         
                        int index127_211 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_211);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA127_212 = input.LA(1);

                         
                        int index127_212 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_212);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA127_214 = input.LA(1);

                         
                        int index127_214 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_214);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA127_220 = input.LA(1);

                         
                        int index127_220 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_220);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA127_226 = input.LA(1);

                         
                        int index127_226 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_226);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA127_232 = input.LA(1);

                         
                        int index127_232 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_232);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA127_238 = input.LA(1);

                         
                        int index127_238 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_238);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA127_244 = input.LA(1);

                         
                        int index127_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_244);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA127_250 = input.LA(1);

                         
                        int index127_250 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_250);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA127_256 = input.LA(1);

                         
                        int index127_256 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_256);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA127_262 = input.LA(1);

                         
                        int index127_262 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_262);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA124_eotS =
        "\41\uffff";
    static final String DFA124_eofS =
        "\41\uffff";
    static final String DFA124_minS =
        "\1\4\40\uffff";
    static final String DFA124_maxS =
        "\1\161\40\uffff";
    static final String DFA124_acceptS =
        "\1\uffff\1\1\36\uffff\1\2";
    static final String DFA124_specialS =
        "\41\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\1\1\uffff\6\1\16\uffff\1\40\10\uffff\1\1\13\uffff\1\1\11"+
            "\uffff\2\1\2\uffff\5\1\27\uffff\2\1\2\uffff\14\1\10\uffff\1"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "2463:11: (t2= forInit )?";
        }
    }
    static final String DFA125_eotS =
        "\37\uffff";
    static final String DFA125_eofS =
        "\37\uffff";
    static final String DFA125_minS =
        "\1\4\36\uffff";
    static final String DFA125_maxS =
        "\1\161\36\uffff";
    static final String DFA125_acceptS =
        "\1\uffff\1\1\34\uffff\1\2";
    static final String DFA125_specialS =
        "\37\uffff}>";
    static final String[] DFA125_transitionS = {
            "\1\1\1\uffff\6\1\16\uffff\1\36\24\uffff\1\1\11\uffff\2\1\2\uffff"+
            "\4\1\30\uffff\2\1\2\uffff\14\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "2463:27: (t3= expression )?";
        }
    }
    static final String DFA126_eotS =
        "\37\uffff";
    static final String DFA126_eofS =
        "\37\uffff";
    static final String DFA126_minS =
        "\1\4\36\uffff";
    static final String DFA126_maxS =
        "\1\161\36\uffff";
    static final String DFA126_acceptS =
        "\1\uffff\1\1\34\uffff\1\2";
    static final String DFA126_specialS =
        "\37\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\1\1\uffff\6\1\43\uffff\1\1\11\uffff\2\1\1\36\1\uffff\4\1"+
            "\30\uffff\2\1\2\uffff\14\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "2463:46: (t4= forUpdate )?";
        }
    }
    static final String DFA128_eotS =
        "\132\uffff";
    static final String DFA128_eofS =
        "\3\uffff\1\14\126\uffff";
    static final String DFA128_minS =
        "\1\4\2\uffff\11\4\24\uffff\3\0\37\uffff\1\0\2\uffff\1\0\2\uffff"+
        "\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0"+
        "\2\uffff";
    static final String DFA128_maxS =
        "\1\161\2\uffff\1\160\10\60\24\uffff\3\0\37\uffff\1\0\2\uffff\1\0"+
        "\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff"+
        "\1\0\2\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\1\12\uffff\1\2\115\uffff";
    static final String DFA128_specialS =
        "\40\uffff\1\0\1\1\1\2\37\uffff\1\3\2\uffff\1\4\2\uffff\1\5\2\uffff"+
        "\1\6\2\uffff\1\7\2\uffff\1\10\2\uffff\1\11\2\uffff\1\12\2\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\3\1\uffff\6\14\27\uffff\1\1\13\uffff\1\14\11\uffff\2\14\2"+
            "\uffff\4\14\1\1\27\uffff\2\14\2\uffff\4\14\1\4\1\5\1\6\1\7\1"+
            "\10\1\11\1\12\1\13\10\uffff\1\14",
            "",
            "",
            "\1\1\25\uffff\1\14\2\uffff\1\41\1\14\11\uffff\1\40\3\14\4\uffff"+
            "\1\42\2\uffff\1\14\4\uffff\1\14\1\uffff\1\14\27\uffff\15\14"+
            "\12\uffff\10\14",
            "\1\1\30\uffff\1\14\22\uffff\1\102",
            "\1\1\30\uffff\1\14\22\uffff\1\105",
            "\1\1\30\uffff\1\14\22\uffff\1\110",
            "\1\1\30\uffff\1\14\22\uffff\1\113",
            "\1\1\30\uffff\1\14\22\uffff\1\116",
            "\1\1\30\uffff\1\14\22\uffff\1\121",
            "\1\1\30\uffff\1\14\22\uffff\1\124",
            "\1\1\30\uffff\1\14\22\uffff\1\127",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "2478:1: forInit returns [Declaration ret] : (t1= localVariableDeclaration | t2= expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA128_32 = input.LA(1);

                         
                        int index128_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_32);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA128_33 = input.LA(1);

                         
                        int index128_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_33);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA128_34 = input.LA(1);

                         
                        int index128_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_34);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA128_66 = input.LA(1);

                         
                        int index128_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_66);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA128_69 = input.LA(1);

                         
                        int index128_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_69);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA128_72 = input.LA(1);

                         
                        int index128_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_72);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA128_75 = input.LA(1);

                         
                        int index128_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_75);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA128_78 = input.LA(1);

                         
                        int index128_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_78);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA128_81 = input.LA(1);

                         
                        int index128_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_81);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA128_84 = input.LA(1);

                         
                        int index128_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_84);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA128_87 = input.LA(1);

                         
                        int index128_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_87);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA130_eotS =
        "\u011b\uffff";
    static final String DFA130_eofS =
        "\1\14\u011a\uffff";
    static final String DFA130_minS =
        "\1\32\13\0\u010f\uffff";
    static final String DFA130_maxS =
        "\1\160\13\0\u010f\uffff";
    static final String DFA130_acceptS =
        "\14\uffff\1\2\43\uffff\1\1\u00ea\uffff";
    static final String DFA130_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\u010f\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\14\15\uffff\1\12\1\14\1\13\2\uffff\1\14\3\uffff\1\14\1\uffff"+
            "\1\1\7\uffff\1\14\7\uffff\1\14\45\uffff\1\2\1\3\1\4\1\5\1\6"+
            "\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "2575:9: (t2= assignmentOperator t3= expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA130_1 = input.LA(1);

                         
                        int index130_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA130_2 = input.LA(1);

                         
                        int index130_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA130_3 = input.LA(1);

                         
                        int index130_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA130_4 = input.LA(1);

                         
                        int index130_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA130_5 = input.LA(1);

                         
                        int index130_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA130_6 = input.LA(1);

                         
                        int index130_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA130_7 = input.LA(1);

                         
                        int index130_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA130_8 = input.LA(1);

                         
                        int index130_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA130_9 = input.LA(1);

                         
                        int index130_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA130_10 = input.LA(1);

                         
                        int index130_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA130_11 = input.LA(1);

                         
                        int index130_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA131_eotS =
        "\24\uffff";
    static final String DFA131_eofS =
        "\1\2\23\uffff";
    static final String DFA131_minS =
        "\1\32\23\uffff";
    static final String DFA131_maxS =
        "\1\160\23\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\1\1\2\21\uffff";
    static final String DFA131_specialS =
        "\24\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\2\15\uffff\3\2\2\uffff\1\2\3\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\1\2\uffff\1\2\7\uffff\1\2\45\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "2582:9: ( '?' t2= expression ':' t3= expression )?";
        }
    }
    static final String DFA132_eotS =
        "\25\uffff";
    static final String DFA132_eofS =
        "\1\1\24\uffff";
    static final String DFA132_minS =
        "\1\32\24\uffff";
    static final String DFA132_maxS =
        "\1\160\24\uffff";
    static final String DFA132_acceptS =
        "\1\uffff\1\2\22\uffff\1\1";
    static final String DFA132_specialS =
        "\25\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\1\15\uffff\3\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\4\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\1\24\26\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "()* loopback of 2590:9: ( '||' t2= conditionalAndExpression )*";
        }
    }
    static final String DFA133_eotS =
        "\26\uffff";
    static final String DFA133_eofS =
        "\1\1\25\uffff";
    static final String DFA133_minS =
        "\1\32\25\uffff";
    static final String DFA133_maxS =
        "\1\160\25\uffff";
    static final String DFA133_acceptS =
        "\1\uffff\1\2\23\uffff\1\1";
    static final String DFA133_specialS =
        "\26\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\1\15\uffff\3\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\4\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\1\1\1\25\25\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "()* loopback of 2598:9: ( '&&' t2= inclusiveOrExpression )*";
        }
    }
    static final String DFA134_eotS =
        "\27\uffff";
    static final String DFA134_eofS =
        "\1\1\26\uffff";
    static final String DFA134_minS =
        "\1\32\26\uffff";
    static final String DFA134_maxS =
        "\1\160\26\uffff";
    static final String DFA134_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA134_specialS =
        "\27\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\1\15\uffff\3\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\4\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\2\1\1\26\24\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "()* loopback of 2607:9: ( '|' t2= exclusiveOrExpression )*";
        }
    }
    static final String DFA135_eotS =
        "\30\uffff";
    static final String DFA135_eofS =
        "\1\1\27\uffff";
    static final String DFA135_minS =
        "\1\32\27\uffff";
    static final String DFA135_maxS =
        "\1\160\27\uffff";
    static final String DFA135_acceptS =
        "\1\uffff\1\2\25\uffff\1\1";
    static final String DFA135_specialS =
        "\30\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\1\15\uffff\3\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\4\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\3\1\1\27\23\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "()* loopback of 2615:9: ( '^' t2= andExpression )*";
        }
    }
    static final String DFA136_eotS =
        "\31\uffff";
    static final String DFA136_eofS =
        "\1\1\30\uffff";
    static final String DFA136_minS =
        "\1\32\30\uffff";
    static final String DFA136_maxS =
        "\1\160\30\uffff";
    static final String DFA136_acceptS =
        "\1\uffff\1\2\26\uffff\1\1";
    static final String DFA136_specialS =
        "\31\uffff}>";
    static final String[] DFA136_transitionS = {
            "\1\1\15\uffff\3\1\1\30\1\uffff\1\1\3\uffff\1\1\1\uffff\1\1\4"+
            "\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\4\1\23\uffff\10"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "()* loopback of 2623:9: ( '&' t2= equalityExpression )*";
        }
    }
    static final String DFA138_eotS =
        "\33\uffff";
    static final String DFA138_eofS =
        "\1\1\32\uffff";
    static final String DFA138_minS =
        "\1\32\32\uffff";
    static final String DFA138_maxS =
        "\1\160\32\uffff";
    static final String DFA138_acceptS =
        "\1\uffff\1\2\27\uffff\1\1\1\uffff";
    static final String DFA138_specialS =
        "\33\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\1\15\uffff\4\1\1\uffff\1\1\3\uffff\1\1\1\uffff\1\1\4\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\4\1\2\31\21\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "()* loopback of 2631:9: ( ( '==' | '!=' ) t2= instanceOfExpression )*";
        }
    }
    static final String DFA139_eotS =
        "\34\uffff";
    static final String DFA139_eofS =
        "\1\2\33\uffff";
    static final String DFA139_minS =
        "\1\32\33\uffff";
    static final String DFA139_maxS =
        "\1\160\33\uffff";
    static final String DFA139_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA139_specialS =
        "\34\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\2\15\uffff\4\2\1\uffff\1\2\3\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\6\2\1\1\20\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "2639:9: ( 'instanceof' t2= type )?";
        }
    }
    static final String DFA140_eotS =
        "\132\uffff";
    static final String DFA140_eofS =
        "\1\1\131\uffff";
    static final String DFA140_minS =
        "\1\32\27\uffff\2\4\100\uffff";
    static final String DFA140_maxS =
        "\1\160\27\uffff\2\161\100\uffff";
    static final String DFA140_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\74\uffff";
    static final String DFA140_specialS =
        "\132\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\1\15\uffff\1\30\1\1\1\31\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff"+
            "\1\1\4\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\7\1\20\uffff"+
            "\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\1\uffff\6\35\34\uffff\1\1\6\uffff\1\35\3\uffff\1\35\5"+
            "\uffff\2\35\2\uffff\4\35\30\uffff\2\35\2\uffff\14\35\10\uffff"+
            "\1\35",
            "\1\35\1\uffff\6\35\36\uffff\1\1\4\uffff\1\35\3\uffff\1\35\5"+
            "\uffff\2\35\2\uffff\4\35\30\uffff\2\35\2\uffff\14\35\10\uffff"+
            "\1\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "()* loopback of 2647:9: (t2= relationalOp t3= shiftExpression )*";
        }
    }
    static final String DFA141_eotS =
        "\133\uffff";
    static final String DFA141_eofS =
        "\1\3\132\uffff";
    static final String DFA141_minS =
        "\1\32\2\4\32\uffff\1\0\36\uffff\1\0\36\uffff";
    static final String DFA141_maxS =
        "\1\160\2\161\32\uffff\1\0\36\uffff\1\0\36\uffff";
    static final String DFA141_acceptS =
        "\3\uffff\1\2\126\uffff\1\1";
    static final String DFA141_specialS =
        "\35\uffff\1\0\36\uffff\1\1\36\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\3\15\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\3\uffff\1\3\1\uffff"+
            "\1\3\4\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\7\3\20\uffff"+
            "\10\3",
            "\1\3\1\uffff\6\3\34\uffff\1\35\6\uffff\1\3\3\uffff\1\3\5\uffff"+
            "\2\3\2\uffff\4\3\30\uffff\2\3\2\uffff\14\3\10\uffff\1\3",
            "\1\3\1\uffff\6\3\36\uffff\1\74\4\uffff\1\3\3\uffff\1\3\5\uffff"+
            "\2\3\2\uffff\4\3\30\uffff\2\3\2\uffff\14\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "()* loopback of 2656:9: (t2= shiftOp t3= additiveExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_29 = input.LA(1);

                         
                        int index141_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_Java()) ) {s = 90;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index141_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA141_60 = input.LA(1);

                         
                        int index141_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_Java()) ) {s = 90;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index141_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA143_eotS =
        "\36\uffff";
    static final String DFA143_eofS =
        "\1\1\35\uffff";
    static final String DFA143_minS =
        "\1\32\35\uffff";
    static final String DFA143_maxS =
        "\1\160\35\uffff";
    static final String DFA143_acceptS =
        "\1\uffff\1\2\32\uffff\1\1\1\uffff";
    static final String DFA143_specialS =
        "\36\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\1\15\uffff\4\1\1\uffff\1\1\3\uffff\1\1\1\uffff\1\1\4\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\7\1\2\34\16\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "()* loopback of 2664:9: ( ( '+' | '-' ) t2= multiplicativeExpression )*";
        }
    }
    static final String DFA145_eotS =
        "\41\uffff";
    static final String DFA145_eofS =
        "\1\1\40\uffff";
    static final String DFA145_minS =
        "\1\32\40\uffff";
    static final String DFA145_maxS =
        "\1\160\40\uffff";
    static final String DFA145_acceptS =
        "\1\uffff\1\2\34\uffff\1\1\2\uffff";
    static final String DFA145_specialS =
        "\41\uffff}>";
    static final String[] DFA145_transitionS = {
            "\1\1\3\uffff\1\36\11\uffff\4\1\1\uffff\1\1\3\uffff\1\1\1\uffff"+
            "\1\1\4\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\11\1\2\36"+
            "\14\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "()* loopback of 2672:9: ( ( '*' | '/' | '%' ) t2= unaryExpression )*";
        }
    }
    static final String DFA146_eotS =
        "\36\uffff";
    static final String DFA146_eofS =
        "\36\uffff";
    static final String DFA146_minS =
        "\1\4\35\uffff";
    static final String DFA146_maxS =
        "\1\161\35\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\30\uffff";
    static final String DFA146_specialS =
        "\36\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\5\1\uffff\6\5\43\uffff\1\5\11\uffff\2\5\2\uffff\4\5\30\uffff"+
            "\1\1\1\2\2\uffff\1\3\1\4\12\5\10\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "2677:1: unaryExpression returns [Expression ret] : ( '+' t1= unaryExpression | '-' t2= unaryExpression | '++' t3= unaryExpression | '--' t4= unaryExpression | t5= unaryExpressionNotPlusMinus );";
        }
    }
    static final String DFA149_eotS =
        "\70\uffff";
    static final String DFA149_eofS =
        "\70\uffff";
    static final String DFA149_minS =
        "\1\4\2\uffff\1\4\26\uffff\35\0\1\uffff";
    static final String DFA149_maxS =
        "\1\161\2\uffff\1\161\26\uffff\35\0\1\uffff";
    static final String DFA149_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\62\uffff\1\3";
    static final String DFA149_specialS =
        "\32\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\4\1\uffff\6\4\43\uffff\1\4\11\uffff\1\4\1\3\2\uffff\4\4\36"+
            "\uffff\1\1\1\2\10\4\10\uffff\1\4",
            "",
            "",
            "\1\32\1\uffff\1\57\1\60\1\61\1\54\1\55\1\56\43\uffff\1\66\11"+
            "\uffff\1\53\1\51\2\uffff\1\52\1\64\1\62\1\63\30\uffff\1\43\1"+
            "\44\2\uffff\1\45\1\46\1\47\1\50\1\33\1\34\1\35\1\36\1\37\1\40"+
            "\1\41\1\42\10\uffff\1\65",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "2691:1: unaryExpressionNotPlusMinus returns [Expression ret_expr] : ( '~' t1= unaryExpression | '!' t2= unaryExpression | t3= castExpression | t4= primary (t5= selector )* ( '++' | '--' )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_26 = input.LA(1);

                         
                        int index149_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_26);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA149_27 = input.LA(1);

                         
                        int index149_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_27);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA149_28 = input.LA(1);

                         
                        int index149_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_28);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA149_29 = input.LA(1);

                         
                        int index149_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_29);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA149_30 = input.LA(1);

                         
                        int index149_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_30);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA149_31 = input.LA(1);

                         
                        int index149_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_31);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA149_32 = input.LA(1);

                         
                        int index149_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_32);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA149_33 = input.LA(1);

                         
                        int index149_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_33);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA149_34 = input.LA(1);

                         
                        int index149_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_34);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA149_35 = input.LA(1);

                         
                        int index149_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_35);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA149_36 = input.LA(1);

                         
                        int index149_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_36);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA149_37 = input.LA(1);

                         
                        int index149_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_37);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA149_38 = input.LA(1);

                         
                        int index149_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_38);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA149_39 = input.LA(1);

                         
                        int index149_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_39);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA149_40 = input.LA(1);

                         
                        int index149_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_40);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA149_41 = input.LA(1);

                         
                        int index149_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_41);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA149_42 = input.LA(1);

                         
                        int index149_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_42);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA149_43 = input.LA(1);

                         
                        int index149_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_43);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA149_44 = input.LA(1);

                         
                        int index149_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_44);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA149_45 = input.LA(1);

                         
                        int index149_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_45);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA149_46 = input.LA(1);

                         
                        int index149_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_46);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA149_47 = input.LA(1);

                         
                        int index149_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_47);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA149_48 = input.LA(1);

                         
                        int index149_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_48);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA149_49 = input.LA(1);

                         
                        int index149_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_49);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA149_50 = input.LA(1);

                         
                        int index149_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_50);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA149_51 = input.LA(1);

                         
                        int index149_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_51);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA149_52 = input.LA(1);

                         
                        int index149_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_52);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA149_53 = input.LA(1);

                         
                        int index149_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_53);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA149_54 = input.LA(1);

                         
                        int index149_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred204_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_54);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA147_eotS =
        "\45\uffff";
    static final String DFA147_eofS =
        "\1\1\44\uffff";
    static final String DFA147_minS =
        "\1\32\44\uffff";
    static final String DFA147_maxS =
        "\1\160\44\uffff";
    static final String DFA147_acceptS =
        "\1\uffff\1\2\41\uffff\1\1\1\uffff";
    static final String DFA147_specialS =
        "\45\uffff}>";
    static final String[] DFA147_transitionS = {
            "\1\1\2\uffff\1\43\1\1\11\uffff\4\1\1\uffff\1\1\2\uffff\1\43"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff"+
            "\15\1\12\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "()* loopback of 2699:34: (t5= selector )*";
        }
    }
    static final String DFA148_eotS =
        "\43\uffff";
    static final String DFA148_eofS =
        "\1\3\42\uffff";
    static final String DFA148_minS =
        "\1\32\42\uffff";
    static final String DFA148_maxS =
        "\1\160\42\uffff";
    static final String DFA148_acceptS =
        "\1\uffff\1\1\1\2\1\3\37\uffff";
    static final String DFA148_specialS =
        "\43\uffff}>";
    static final String[] DFA148_transitionS = {
            "\1\3\3\uffff\1\3\11\uffff\4\3\1\uffff\1\3\3\uffff\1\3\1\uffff"+
            "\1\3\4\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\13\3\1\1\1"+
            "\2\12\uffff\10\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "2703:12: ( '++' | '--' )?";
        }
    }
    static final String DFA151_eotS =
        "\40\uffff";
    static final String DFA151_eofS =
        "\40\uffff";
    static final String DFA151_minS =
        "\1\72\1\4\10\0\26\uffff";
    static final String DFA151_maxS =
        "\1\72\1\161\10\0\26\uffff";
    static final String DFA151_acceptS =
        "\12\uffff\1\2\24\uffff\1\1";
    static final String DFA151_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\26\uffff}>";
    static final String[] DFA151_transitionS = {
            "\1\1",
            "\1\12\1\uffff\6\12\43\uffff\1\12\11\uffff\2\12\2\uffff\4\12"+
            "\30\uffff\2\12\2\uffff\4\12\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
            "\10\uffff\1\12",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "2709:1: castExpression returns [Expression ret] : ( '(' t1= primitiveType ')' t2= unaryExpression | '(' (t3= type | t4= expression ) ')' t5= unaryExpressionNotPlusMinus );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA151_2 = input.LA(1);

                         
                        int index151_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index151_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA151_3 = input.LA(1);

                         
                        int index151_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index151_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA151_4 = input.LA(1);

                         
                        int index151_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index151_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA151_5 = input.LA(1);

                         
                        int index151_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index151_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA151_6 = input.LA(1);

                         
                        int index151_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index151_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA151_7 = input.LA(1);

                         
                        int index151_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index151_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA151_8 = input.LA(1);

                         
                        int index151_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index151_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA151_9 = input.LA(1);

                         
                        int index151_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index151_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA150_eotS =
        "\126\uffff";
    static final String DFA150_eofS =
        "\126\uffff";
    static final String DFA150_minS =
        "\1\4\1\0\10\35\64\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0"+
        "\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff";
    static final String DFA150_maxS =
        "\1\161\1\0\10\73\64\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1"+
        "\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff";
    static final String DFA150_acceptS =
        "\12\uffff\1\2\62\uffff\1\1\30\uffff";
    static final String DFA150_specialS =
        "\1\uffff\1\0\74\uffff\1\1\2\uffff\1\2\2\uffff\1\3\2\uffff\1\4\2"+
        "\uffff\1\5\2\uffff\1\6\2\uffff\1\7\2\uffff\1\10\2\uffff}>";
    static final String[] DFA150_transitionS = {
            "\1\1\1\uffff\6\12\43\uffff\1\12\11\uffff\2\12\2\uffff\4\12\30"+
            "\uffff\2\12\2\uffff\4\12\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\10"+
            "\uffff\1\12",
            "\1\uffff",
            "\1\12\22\uffff\1\76\12\uffff\1\75",
            "\1\12\22\uffff\1\101\12\uffff\1\75",
            "\1\12\22\uffff\1\104\12\uffff\1\75",
            "\1\12\22\uffff\1\107\12\uffff\1\75",
            "\1\12\22\uffff\1\112\12\uffff\1\75",
            "\1\12\22\uffff\1\115\12\uffff\1\75",
            "\1\12\22\uffff\1\120\12\uffff\1\75",
            "\1\12\22\uffff\1\123\12\uffff\1\75",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "2714:16: (t3= type | t4= expression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA150_1 = input.LA(1);

                         
                        int index150_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index150_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA150_62 = input.LA(1);

                         
                        int index150_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index150_62);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA150_65 = input.LA(1);

                         
                        int index150_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index150_65);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA150_68 = input.LA(1);

                         
                        int index150_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index150_68);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA150_71 = input.LA(1);

                         
                        int index150_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index150_71);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA150_74 = input.LA(1);

                         
                        int index150_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index150_74);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA150_77 = input.LA(1);

                         
                        int index150_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index150_77);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA150_80 = input.LA(1);

                         
                        int index150_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index150_80);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA150_83 = input.LA(1);

                         
                        int index150_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index150_83);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA153_eotS =
        "\17\uffff";
    static final String DFA153_eofS =
        "\17\uffff";
    static final String DFA153_minS =
        "\1\50\12\uffff\1\52\1\0\2\uffff";
    static final String DFA153_maxS =
        "\1\160\12\uffff\1\52\1\0\2\uffff";
    static final String DFA153_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13"+
        "\1\14";
    static final String DFA153_specialS =
        "\1\0\13\uffff\1\1\2\uffff}>";
    static final String[] DFA153_transitionS = {
            "\1\12\1\uffff\1\13\10\uffff\1\1\65\uffff\1\2\1\3\1\4\1\5\1\6"+
            "\1\7\1\10\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "2741:1: assignmentOperator returns [AssignmentOperator ret] : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA153_0 = input.LA(1);

                         
                        int index153_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_0==51) ) {s = 1;}

                        else if ( (LA153_0==105) ) {s = 2;}

                        else if ( (LA153_0==106) ) {s = 3;}

                        else if ( (LA153_0==107) ) {s = 4;}

                        else if ( (LA153_0==108) ) {s = 5;}

                        else if ( (LA153_0==109) ) {s = 6;}

                        else if ( (LA153_0==110) ) {s = 7;}

                        else if ( (LA153_0==111) ) {s = 8;}

                        else if ( (LA153_0==112) ) {s = 9;}

                        else if ( (LA153_0==40) && (synpred226_Java())) {s = 10;}

                        else if ( (LA153_0==42) ) {s = 11;}

                         
                        input.seek(index153_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA153_12 = input.LA(1);

                         
                        int index153_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_Java()) ) {s = 13;}

                        else if ( (synpred228_Java()) ) {s = 14;}

                         
                        input.seek(index153_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA154_eotS =
        "\77\uffff";
    static final String DFA154_eofS =
        "\77\uffff";
    static final String DFA154_minS =
        "\1\50\2\4\74\uffff";
    static final String DFA154_maxS =
        "\1\52\2\161\74\uffff";
    static final String DFA154_acceptS =
        "\3\uffff\1\1\1\3\34\uffff\1\2\1\4\34\uffff";
    static final String DFA154_specialS =
        "\1\uffff\1\0\1\1\74\uffff}>";
    static final String[] DFA154_transitionS = {
            "\1\1\1\uffff\1\2",
            "\1\4\1\uffff\6\4\43\uffff\1\4\3\uffff\1\3\5\uffff\2\4\2\uffff"+
            "\4\4\30\uffff\2\4\2\uffff\14\4\10\uffff\1\4",
            "\1\42\1\uffff\6\42\43\uffff\1\42\3\uffff\1\41\5\uffff\2\42"+
            "\2\uffff\4\42\30\uffff\2\42\2\uffff\14\42\10\uffff\1\42",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "2781:1: relationalOp returns [BinaryOperator ret] : ( ( '<' '=' )=>t1= '<' t2= '=' {...}? | ( '>' '=' )=>t1= '>' t2= '=' {...}? | '<' | '>' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA154_1 = input.LA(1);

                         
                        int index154_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA154_1==51) && (synpred229_Java())) {s = 3;}

                        else if ( (LA154_1==Identifier||(LA154_1>=FloatingPointLiteral && LA154_1<=DecimalLiteral)||LA154_1==47||(LA154_1>=57 && LA154_1<=58)||(LA154_1>=61 && LA154_1<=64)||(LA154_1>=89 && LA154_1<=90)||(LA154_1>=93 && LA154_1<=104)||LA154_1==113) ) {s = 4;}

                         
                        input.seek(index154_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA154_2 = input.LA(1);

                         
                        int index154_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA154_2==51) && (synpred230_Java())) {s = 33;}

                        else if ( (LA154_2==Identifier||(LA154_2>=FloatingPointLiteral && LA154_2<=DecimalLiteral)||LA154_2==47||(LA154_2>=57 && LA154_2<=58)||(LA154_2>=61 && LA154_2<=64)||(LA154_2>=89 && LA154_2<=90)||(LA154_2>=93 && LA154_2<=104)||LA154_2==113) ) {s = 34;}

                         
                        input.seek(index154_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA161_eotS =
        "\30\uffff";
    static final String DFA161_eofS =
        "\30\uffff";
    static final String DFA161_minS =
        "\1\4\27\uffff";
    static final String DFA161_maxS =
        "\1\161\27\uffff";
    static final String DFA161_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\10\uffff\1\5\1\6\1\7\7\uffff\1\10";
    static final String DFA161_specialS =
        "\30\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\16\1\uffff\6\4\43\uffff\1\27\11\uffff\1\3\1\1\2\uffff\1\2"+
            "\3\4\40\uffff\10\17\10\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "2834:1: primary returns [Declaration ret] : (t1= parExpression | 'this' ( '.' t2= Identifier )* (t3= identifierSuffix )? | 'super' t4= superSuffix | t5= literal | 'new' t6= creator | t7= Identifier ( '.' t8= Identifier )* (t9= identifierSuffix )? | t10= primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );";
        }
    }
    static final String DFA156_eotS =
        "\55\uffff";
    static final String DFA156_eofS =
        "\1\1\54\uffff";
    static final String DFA156_minS =
        "\1\32\2\uffff\1\4\46\uffff\1\0\2\uffff";
    static final String DFA156_maxS =
        "\1\160\2\uffff\1\161\46\uffff\1\0\2\uffff";
    static final String DFA156_acceptS =
        "\1\uffff\1\2\52\uffff\1\1";
    static final String DFA156_specialS =
        "\52\uffff\1\0\2\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\1\2\uffff\1\3\1\1\11\uffff\4\1\1\uffff\1\1\2\uffff\2\1\1"+
            "\uffff\1\1\4\uffff\1\1\1\uffff\2\1\7\uffff\1\1\16\uffff\15\1"+
            "\12\uffff\10\1",
            "",
            "",
            "\1\52\40\uffff\1\1\2\uffff\1\1\20\uffff\1\1\3\uffff\1\1\63"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "()* loopback of 2847:9: ( '.' t2= Identifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_42 = input.LA(1);

                         
                        int index156_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index156_42);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA157_eotS =
        "\112\uffff";
    static final String DFA157_eofS =
        "\1\4\111\uffff";
    static final String DFA157_minS =
        "\1\32\1\4\1\uffff\1\4\43\uffff\35\0\1\uffff\3\0\1\uffff\1\0";
    static final String DFA157_maxS =
        "\1\160\1\161\1\uffff\1\161\43\uffff\35\0\1\uffff\3\0\1\uffff\1\0";
    static final String DFA157_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\105\uffff";
    static final String DFA157_specialS =
        "\47\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\uffff\1\35\1\36\1\37\1\uffff\1\40}>";
    static final String[] DFA157_transitionS = {
            "\1\4\2\uffff\1\3\1\4\11\uffff\4\4\1\uffff\1\4\2\uffff\1\1\1"+
            "\4\1\uffff\1\4\4\uffff\1\4\1\uffff\1\2\1\4\7\uffff\1\4\16\uffff"+
            "\15\4\12\uffff\10\4",
            "\1\72\1\uffff\1\63\1\64\1\65\1\60\1\61\1\62\43\uffff\1\103"+
            "\1\uffff\1\2\7\uffff\1\57\1\55\2\uffff\1\56\1\70\1\66\1\67\30"+
            "\uffff\1\47\1\50\2\uffff\1\51\1\52\1\53\1\54\1\73\1\74\1\75"+
            "\1\76\1\77\1\100\1\101\1\102\10\uffff\1\71",
            "",
            "\1\4\40\uffff\1\2\2\uffff\1\111\20\uffff\1\106\3\uffff\1\105"+
            "\63\uffff\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff"
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "2854:9: (t3= identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_39 = input.LA(1);

                         
                        int index157_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_39);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA157_40 = input.LA(1);

                         
                        int index157_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_40);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA157_41 = input.LA(1);

                         
                        int index157_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA157_42 = input.LA(1);

                         
                        int index157_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA157_43 = input.LA(1);

                         
                        int index157_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_43);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA157_44 = input.LA(1);

                         
                        int index157_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA157_45 = input.LA(1);

                         
                        int index157_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_45);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA157_46 = input.LA(1);

                         
                        int index157_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA157_47 = input.LA(1);

                         
                        int index157_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_47);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA157_48 = input.LA(1);

                         
                        int index157_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_48);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA157_49 = input.LA(1);

                         
                        int index157_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_49);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA157_50 = input.LA(1);

                         
                        int index157_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_50);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA157_51 = input.LA(1);

                         
                        int index157_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_51);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA157_52 = input.LA(1);

                         
                        int index157_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_52);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA157_53 = input.LA(1);

                         
                        int index157_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_53);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA157_54 = input.LA(1);

                         
                        int index157_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_54);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA157_55 = input.LA(1);

                         
                        int index157_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_55);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA157_56 = input.LA(1);

                         
                        int index157_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_56);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA157_57 = input.LA(1);

                         
                        int index157_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_57);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA157_58 = input.LA(1);

                         
                        int index157_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_58);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA157_59 = input.LA(1);

                         
                        int index157_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_59);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA157_60 = input.LA(1);

                         
                        int index157_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_60);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA157_61 = input.LA(1);

                         
                        int index157_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_61);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA157_62 = input.LA(1);

                         
                        int index157_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_62);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA157_63 = input.LA(1);

                         
                        int index157_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_63);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA157_64 = input.LA(1);

                         
                        int index157_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_64);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA157_65 = input.LA(1);

                         
                        int index157_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_65);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA157_66 = input.LA(1);

                         
                        int index157_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_66);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA157_67 = input.LA(1);

                         
                        int index157_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_67);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA157_69 = input.LA(1);

                         
                        int index157_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_69);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA157_70 = input.LA(1);

                         
                        int index157_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_70);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA157_71 = input.LA(1);

                         
                        int index157_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_71);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA157_73 = input.LA(1);

                         
                        int index157_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_73);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA158_eotS =
        "\55\uffff";
    static final String DFA158_eofS =
        "\1\1\54\uffff";
    static final String DFA158_minS =
        "\1\32\2\uffff\1\4\46\uffff\1\0\2\uffff";
    static final String DFA158_maxS =
        "\1\160\2\uffff\1\161\46\uffff\1\0\2\uffff";
    static final String DFA158_acceptS =
        "\1\uffff\1\2\52\uffff\1\1";
    static final String DFA158_specialS =
        "\52\uffff\1\0\2\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\1\2\uffff\1\3\1\1\11\uffff\4\1\1\uffff\1\1\2\uffff\2\1\1"+
            "\uffff\1\1\4\uffff\1\1\1\uffff\2\1\7\uffff\1\1\16\uffff\15\1"+
            "\12\uffff\10\1",
            "",
            "",
            "\1\52\40\uffff\1\1\2\uffff\1\1\20\uffff\1\1\3\uffff\1\1\63"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "()* loopback of 2882:9: ( '.' t8= Identifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA158_42 = input.LA(1);

                         
                        int index158_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_42);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA159_eotS =
        "\112\uffff";
    static final String DFA159_eofS =
        "\1\4\111\uffff";
    static final String DFA159_minS =
        "\1\32\1\4\1\uffff\1\4\43\uffff\35\0\1\uffff\3\0\1\uffff\1\0";
    static final String DFA159_maxS =
        "\1\160\1\161\1\uffff\1\161\43\uffff\35\0\1\uffff\3\0\1\uffff\1\0";
    static final String DFA159_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\105\uffff";
    static final String DFA159_specialS =
        "\47\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\uffff\1\35\1\36\1\37\1\uffff\1\40}>";
    static final String[] DFA159_transitionS = {
            "\1\4\2\uffff\1\3\1\4\11\uffff\4\4\1\uffff\1\4\2\uffff\1\1\1"+
            "\4\1\uffff\1\4\4\uffff\1\4\1\uffff\1\2\1\4\7\uffff\1\4\16\uffff"+
            "\15\4\12\uffff\10\4",
            "\1\72\1\uffff\1\63\1\64\1\65\1\60\1\61\1\62\43\uffff\1\103"+
            "\1\uffff\1\2\7\uffff\1\57\1\55\2\uffff\1\56\1\70\1\66\1\67\30"+
            "\uffff\1\47\1\50\2\uffff\1\51\1\52\1\53\1\54\1\73\1\74\1\75"+
            "\1\76\1\77\1\100\1\101\1\102\10\uffff\1\71",
            "",
            "\1\4\40\uffff\1\2\2\uffff\1\111\20\uffff\1\106\3\uffff\1\105"+
            "\63\uffff\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff"
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "2889:9: (t9= identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_39 = input.LA(1);

                         
                        int index159_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_39);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA159_40 = input.LA(1);

                         
                        int index159_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_40);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA159_41 = input.LA(1);

                         
                        int index159_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA159_42 = input.LA(1);

                         
                        int index159_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA159_43 = input.LA(1);

                         
                        int index159_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_43);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA159_44 = input.LA(1);

                         
                        int index159_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA159_45 = input.LA(1);

                         
                        int index159_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_45);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA159_46 = input.LA(1);

                         
                        int index159_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA159_47 = input.LA(1);

                         
                        int index159_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_47);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA159_48 = input.LA(1);

                         
                        int index159_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_48);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA159_49 = input.LA(1);

                         
                        int index159_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_49);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA159_50 = input.LA(1);

                         
                        int index159_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_50);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA159_51 = input.LA(1);

                         
                        int index159_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_51);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA159_52 = input.LA(1);

                         
                        int index159_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_52);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA159_53 = input.LA(1);

                         
                        int index159_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_53);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA159_54 = input.LA(1);

                         
                        int index159_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_54);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA159_55 = input.LA(1);

                         
                        int index159_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_55);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA159_56 = input.LA(1);

                         
                        int index159_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_56);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA159_57 = input.LA(1);

                         
                        int index159_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_57);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA159_58 = input.LA(1);

                         
                        int index159_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_58);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA159_59 = input.LA(1);

                         
                        int index159_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_59);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA159_60 = input.LA(1);

                         
                        int index159_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_60);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA159_61 = input.LA(1);

                         
                        int index159_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_61);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA159_62 = input.LA(1);

                         
                        int index159_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_62);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA159_63 = input.LA(1);

                         
                        int index159_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_63);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA159_64 = input.LA(1);

                         
                        int index159_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_64);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA159_65 = input.LA(1);

                         
                        int index159_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_65);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA159_66 = input.LA(1);

                         
                        int index159_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_66);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA159_67 = input.LA(1);

                         
                        int index159_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_67);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA159_69 = input.LA(1);

                         
                        int index159_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_69);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA159_70 = input.LA(1);

                         
                        int index159_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_70);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA159_71 = input.LA(1);

                         
                        int index159_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_71);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA159_73 = input.LA(1);

                         
                        int index159_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_73);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA164_eotS =
        "\47\uffff";
    static final String DFA164_eofS =
        "\47\uffff";
    static final String DFA164_minS =
        "\1\35\1\4\1\uffff\1\45\43\uffff";
    static final String DFA164_maxS =
        "\1\72\1\161\1\uffff\1\161\43\uffff";
    static final String DFA164_acceptS =
        "\2\uffff\1\3\1\uffff\1\1\1\2\34\uffff\1\4\1\6\1\7\1\10\1\5";
    static final String DFA164_specialS =
        "\47\uffff}>";
    static final String[] DFA164_transitionS = {
            "\1\3\22\uffff\1\1\11\uffff\1\2",
            "\1\5\1\uffff\6\5\43\uffff\1\5\1\uffff\1\4\7\uffff\2\5\2\uffff"+
            "\4\5\30\uffff\2\5\2\uffff\14\5\10\uffff\1\5",
            "",
            "\1\42\2\uffff\1\46\20\uffff\1\44\3\uffff\1\43\63\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "2918:1: identifierSuffix returns [Declaration ret] : ( ( '[' ']' )+ '.' 'class' | ( '[' t1= expression ']' )+ | t2= arguments | '.' 'class' | '.' t3= explicitGenericInvocation | '.' 'this' | '.' 'super' t4= arguments | '.' 'new' t5= innerCreator );";
        }
    }
    static final String DFA163_eotS =
        "\103\uffff";
    static final String DFA163_eofS =
        "\1\1\102\uffff";
    static final String DFA163_minS =
        "\1\32\1\uffff\1\4\42\uffff\35\0\1\uffff";
    static final String DFA163_maxS =
        "\1\160\1\uffff\1\161\42\uffff\35\0\1\uffff";
    static final String DFA163_acceptS =
        "\1\uffff\1\2\100\uffff\1\1";
    static final String DFA163_specialS =
        "\45\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\uffff}>";
    static final String[] DFA163_transitionS = {
            "\1\1\2\uffff\2\1\11\uffff\4\1\1\uffff\1\1\2\uffff\1\2\1\1\1"+
            "\uffff\1\1\4\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\15\1"+
            "\12\uffff\10\1",
            "",
            "\1\70\1\uffff\1\61\1\62\1\63\1\56\1\57\1\60\43\uffff\1\101"+
            "\11\uffff\1\55\1\53\2\uffff\1\54\1\66\1\64\1\65\30\uffff\1\45"+
            "\1\46\2\uffff\1\47\1\50\1\51\1\52\1\71\1\72\1\73\1\74\1\75\1"+
            "\76\1\77\1\100\10\uffff\1\67",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }
        public String getDescription() {
            return "()+ loopback of 2933:9: ( '[' t1= expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA163_37 = input.LA(1);

                         
                        int index163_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_37);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA163_38 = input.LA(1);

                         
                        int index163_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_38);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA163_39 = input.LA(1);

                         
                        int index163_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_39);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA163_40 = input.LA(1);

                         
                        int index163_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_40);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA163_41 = input.LA(1);

                         
                        int index163_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_41);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA163_42 = input.LA(1);

                         
                        int index163_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_42);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA163_43 = input.LA(1);

                         
                        int index163_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_43);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA163_44 = input.LA(1);

                         
                        int index163_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_44);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA163_45 = input.LA(1);

                         
                        int index163_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_45);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA163_46 = input.LA(1);

                         
                        int index163_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_46);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA163_47 = input.LA(1);

                         
                        int index163_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_47);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA163_48 = input.LA(1);

                         
                        int index163_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_48);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA163_49 = input.LA(1);

                         
                        int index163_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_49);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA163_50 = input.LA(1);

                         
                        int index163_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_50);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA163_51 = input.LA(1);

                         
                        int index163_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_51);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA163_52 = input.LA(1);

                         
                        int index163_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_52);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA163_53 = input.LA(1);

                         
                        int index163_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_53);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA163_54 = input.LA(1);

                         
                        int index163_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_54);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA163_55 = input.LA(1);

                         
                        int index163_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_55);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA163_56 = input.LA(1);

                         
                        int index163_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_56);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA163_57 = input.LA(1);

                         
                        int index163_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_57);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA163_58 = input.LA(1);

                         
                        int index163_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_58);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA163_59 = input.LA(1);

                         
                        int index163_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_59);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA163_60 = input.LA(1);

                         
                        int index163_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_60);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA163_61 = input.LA(1);

                         
                        int index163_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_61);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA163_62 = input.LA(1);

                         
                        int index163_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_62);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA163_63 = input.LA(1);

                         
                        int index163_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_63);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA163_64 = input.LA(1);

                         
                        int index163_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_64);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA163_65 = input.LA(1);

                         
                        int index163_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_65);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA166_eotS =
        "\13\uffff";
    static final String DFA166_eofS =
        "\13\uffff";
    static final String DFA166_minS =
        "\1\4\12\uffff";
    static final String DFA166_maxS =
        "\1\150\12\uffff";
    static final String DFA166_acceptS =
        "\1\uffff\1\1\1\2\10\uffff";
    static final String DFA166_specialS =
        "\13\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\2\43\uffff\1\1\70\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "2986:1: creator returns [Declaration ret] : (t1= nonWildcardTypeArguments t2= createdName t3= classCreatorRest | t3= createdName (t4= arrayCreatorRest | t5= classCreatorRest ) );";
        }
    }
    static final String DFA167_eotS =
        "\12\uffff";
    static final String DFA167_eofS =
        "\12\uffff";
    static final String DFA167_minS =
        "\1\4\11\uffff";
    static final String DFA167_maxS =
        "\1\150\11\uffff";
    static final String DFA167_acceptS =
        "\1\uffff\1\1\1\2\7\uffff";
    static final String DFA167_specialS =
        "\12\uffff}>";
    static final String[] DFA167_transitionS = {
            "\1\1\134\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "3043:1: createdName returns [Declaration ret] : (t1= classOrInterfaceType | t2= primitiveType );";
        }
    }
    static final String DFA172_eotS =
        "\37\uffff";
    static final String DFA172_eofS =
        "\37\uffff";
    static final String DFA172_minS =
        "\1\4\36\uffff";
    static final String DFA172_maxS =
        "\1\161\36\uffff";
    static final String DFA172_acceptS =
        "\1\uffff\1\1\1\2\34\uffff";
    static final String DFA172_specialS =
        "\37\uffff}>";
    static final String[] DFA172_transitionS = {
            "\1\2\1\uffff\6\2\43\uffff\1\2\1\uffff\1\1\7\uffff\2\2\2\uffff"+
            "\4\2\30\uffff\2\2\2\uffff\14\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA172_eot = DFA.unpackEncodedString(DFA172_eotS);
    static final short[] DFA172_eof = DFA.unpackEncodedString(DFA172_eofS);
    static final char[] DFA172_min = DFA.unpackEncodedStringToUnsignedChars(DFA172_minS);
    static final char[] DFA172_max = DFA.unpackEncodedStringToUnsignedChars(DFA172_maxS);
    static final short[] DFA172_accept = DFA.unpackEncodedString(DFA172_acceptS);
    static final short[] DFA172_special = DFA.unpackEncodedString(DFA172_specialS);
    static final short[][] DFA172_transition;

    static {
        int numStates = DFA172_transitionS.length;
        DFA172_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA172_transition[i] = DFA.unpackEncodedString(DFA172_transitionS[i]);
        }
    }

    class DFA172 extends DFA {

        public DFA172(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 172;
            this.eot = DFA172_eot;
            this.eof = DFA172_eof;
            this.min = DFA172_min;
            this.max = DFA172_max;
            this.accept = DFA172_accept;
            this.special = DFA172_special;
            this.transition = DFA172_transition;
        }
        public String getDescription() {
            return "3076:9: ( ']' ( '[' ']' )* t1= arrayInitializer | t2= expression ']' ( '[' t3= expression ']' )* ( '[' ']' )* )";
        }
    }
    static final String DFA170_eotS =
        "\104\uffff";
    static final String DFA170_eofS =
        "\1\2\103\uffff";
    static final String DFA170_minS =
        "\1\32\1\4\44\uffff\35\0\1\uffff";
    static final String DFA170_maxS =
        "\1\160\1\161\44\uffff\35\0\1\uffff";
    static final String DFA170_acceptS =
        "\2\uffff\1\2\100\uffff\1\1";
    static final String DFA170_specialS =
        "\46\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\4\2\1\uffff\1\2\2\uffff\1\1\1\2\1"+
            "\uffff\1\2\4\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\15\2"+
            "\12\uffff\10\2",
            "\1\71\1\uffff\1\62\1\63\1\64\1\57\1\60\1\61\43\uffff\1\102"+
            "\1\uffff\1\2\7\uffff\1\56\1\54\2\uffff\1\55\1\67\1\65\1\66\30"+
            "\uffff\1\46\1\47\2\uffff\1\50\1\51\1\52\1\53\1\72\1\73\1\74"+
            "\1\75\1\76\1\77\1\100\1\101\10\uffff\1\70",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "()* loopback of 3094:13: ( '[' t3= expression ']' )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_38 = input.LA(1);

                         
                        int index170_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_38);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA170_39 = input.LA(1);

                         
                        int index170_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_39);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA170_40 = input.LA(1);

                         
                        int index170_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_40);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA170_41 = input.LA(1);

                         
                        int index170_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_41);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA170_42 = input.LA(1);

                         
                        int index170_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_42);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA170_43 = input.LA(1);

                         
                        int index170_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_43);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA170_44 = input.LA(1);

                         
                        int index170_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_44);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA170_45 = input.LA(1);

                         
                        int index170_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_45);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA170_46 = input.LA(1);

                         
                        int index170_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_46);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA170_47 = input.LA(1);

                         
                        int index170_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_47);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA170_48 = input.LA(1);

                         
                        int index170_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_48);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA170_49 = input.LA(1);

                         
                        int index170_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_49);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA170_50 = input.LA(1);

                         
                        int index170_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_50);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA170_51 = input.LA(1);

                         
                        int index170_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_51);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA170_52 = input.LA(1);

                         
                        int index170_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_52);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA170_53 = input.LA(1);

                         
                        int index170_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_53);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA170_54 = input.LA(1);

                         
                        int index170_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_54);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA170_55 = input.LA(1);

                         
                        int index170_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_55);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA170_56 = input.LA(1);

                         
                        int index170_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_56);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA170_57 = input.LA(1);

                         
                        int index170_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_57);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA170_58 = input.LA(1);

                         
                        int index170_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_58);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA170_59 = input.LA(1);

                         
                        int index170_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_59);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA170_60 = input.LA(1);

                         
                        int index170_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_60);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA170_61 = input.LA(1);

                         
                        int index170_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_61);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA170_62 = input.LA(1);

                         
                        int index170_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_62);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA170_63 = input.LA(1);

                         
                        int index170_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_63);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA170_64 = input.LA(1);

                         
                        int index170_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_64);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA170_65 = input.LA(1);

                         
                        int index170_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_65);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA170_66 = input.LA(1);

                         
                        int index170_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA171_eotS =
        "\103\uffff";
    static final String DFA171_eofS =
        "\1\1\102\uffff";
    static final String DFA171_minS =
        "\1\32\1\uffff\1\4\100\uffff";
    static final String DFA171_maxS =
        "\1\160\1\uffff\1\161\100\uffff";
    static final String DFA171_acceptS =
        "\1\uffff\1\2\43\uffff\1\1\35\uffff";
    static final String DFA171_specialS =
        "\103\uffff}>";
    static final String[] DFA171_transitionS = {
            "\1\1\2\uffff\2\1\11\uffff\4\1\1\uffff\1\1\2\uffff\1\2\1\1\1"+
            "\uffff\1\1\4\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\15\1"+
            "\12\uffff\10\1",
            "",
            "\1\1\1\uffff\6\1\43\uffff\1\1\1\uffff\1\45\7\uffff\2\1\2\uffff"+
            "\4\1\30\uffff\2\1\2\uffff\14\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA171_eot = DFA.unpackEncodedString(DFA171_eotS);
    static final short[] DFA171_eof = DFA.unpackEncodedString(DFA171_eofS);
    static final char[] DFA171_min = DFA.unpackEncodedStringToUnsignedChars(DFA171_minS);
    static final char[] DFA171_max = DFA.unpackEncodedStringToUnsignedChars(DFA171_maxS);
    static final short[] DFA171_accept = DFA.unpackEncodedString(DFA171_acceptS);
    static final short[] DFA171_special = DFA.unpackEncodedString(DFA171_specialS);
    static final short[][] DFA171_transition;

    static {
        int numStates = DFA171_transitionS.length;
        DFA171_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA171_transition[i] = DFA.unpackEncodedString(DFA171_transitionS[i]);
        }
    }

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = DFA171_eot;
            this.eof = DFA171_eof;
            this.min = DFA171_min;
            this.max = DFA171_max;
            this.accept = DFA171_accept;
            this.special = DFA171_special;
            this.transition = DFA171_transition;
        }
        public String getDescription() {
            return "()* loopback of 3100:16: ( '[' ']' )*";
        }
    }
    static final String DFA173_eotS =
        "\46\uffff";
    static final String DFA173_eofS =
        "\1\2\45\uffff";
    static final String DFA173_minS =
        "\1\32\45\uffff";
    static final String DFA173_maxS =
        "\1\160\45\uffff";
    static final String DFA173_acceptS =
        "\1\uffff\1\1\1\2\43\uffff";
    static final String DFA173_specialS =
        "\46\uffff}>";
    static final String[] DFA173_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\4\2\1\1\1\2\2\uffff\2\2\1\uffff\1"+
            "\2\4\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\15\2\12\uffff"+
            "\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA173_eot = DFA.unpackEncodedString(DFA173_eotS);
    static final short[] DFA173_eof = DFA.unpackEncodedString(DFA173_eofS);
    static final char[] DFA173_min = DFA.unpackEncodedStringToUnsignedChars(DFA173_minS);
    static final char[] DFA173_max = DFA.unpackEncodedStringToUnsignedChars(DFA173_maxS);
    static final short[] DFA173_accept = DFA.unpackEncodedString(DFA173_acceptS);
    static final short[] DFA173_special = DFA.unpackEncodedString(DFA173_specialS);
    static final short[][] DFA173_transition;

    static {
        int numStates = DFA173_transitionS.length;
        DFA173_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA173_transition[i] = DFA.unpackEncodedString(DFA173_transitionS[i]);
        }
    }

    class DFA173 extends DFA {

        public DFA173(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = DFA173_eot;
            this.eof = DFA173_eof;
            this.min = DFA173_min;
            this.max = DFA173_max;
            this.accept = DFA173_accept;
            this.special = DFA173_special;
            this.transition = DFA173_transition;
        }
        public String getDescription() {
            return "3119:9: (t2= classBody )?";
        }
    }
    static final String DFA174_eotS =
        "\46\uffff";
    static final String DFA174_eofS =
        "\1\2\45\uffff";
    static final String DFA174_minS =
        "\1\32\45\uffff";
    static final String DFA174_maxS =
        "\1\160\45\uffff";
    static final String DFA174_acceptS =
        "\1\uffff\1\1\1\2\43\uffff";
    static final String DFA174_specialS =
        "\46\uffff}>";
    static final String[] DFA174_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\4\2\1\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\15\2\12"+
            "\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA174_eot = DFA.unpackEncodedString(DFA174_eotS);
    static final short[] DFA174_eof = DFA.unpackEncodedString(DFA174_eofS);
    static final char[] DFA174_min = DFA.unpackEncodedStringToUnsignedChars(DFA174_minS);
    static final char[] DFA174_max = DFA.unpackEncodedStringToUnsignedChars(DFA174_maxS);
    static final short[] DFA174_accept = DFA.unpackEncodedString(DFA174_acceptS);
    static final short[] DFA174_special = DFA.unpackEncodedString(DFA174_specialS);
    static final short[][] DFA174_transition;

    static {
        int numStates = DFA174_transitionS.length;
        DFA174_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA174_transition[i] = DFA.unpackEncodedString(DFA174_transitionS[i]);
        }
    }

    class DFA174 extends DFA {

        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = DFA174_eot;
            this.eof = DFA174_eof;
            this.min = DFA174_min;
            this.max = DFA174_max;
            this.accept = DFA174_accept;
            this.special = DFA174_special;
            this.transition = DFA174_transition;
        }
        public String getDescription() {
            return "3163:9: (t2= arguments )?";
        }
    }
    static final String DFA176_eotS =
        "\46\uffff";
    static final String DFA176_eofS =
        "\1\2\45\uffff";
    static final String DFA176_minS =
        "\1\32\45\uffff";
    static final String DFA176_maxS =
        "\1\160\45\uffff";
    static final String DFA176_acceptS =
        "\1\uffff\1\1\1\2\43\uffff";
    static final String DFA176_specialS =
        "\46\uffff}>";
    static final String[] DFA176_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\4\2\1\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\15\2\12"+
            "\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
    static final short[][] DFA176_transition;

    static {
        int numStates = DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
        }
    }

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "3209:29: (t3= arguments )?";
        }
    }
    static final String DFA178_eotS =
        "\37\uffff";
    static final String DFA178_eofS =
        "\37\uffff";
    static final String DFA178_minS =
        "\1\4\36\uffff";
    static final String DFA178_maxS =
        "\1\161\36\uffff";
    static final String DFA178_acceptS =
        "\1\uffff\1\1\34\uffff\1\2";
    static final String DFA178_specialS =
        "\37\uffff}>";
    static final String[] DFA178_transitionS = {
            "\1\1\1\uffff\6\1\43\uffff\1\1\11\uffff\2\1\1\36\1\uffff\4\1"+
            "\30\uffff\2\1\2\uffff\14\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_specialS);
    static final short[][] DFA178_transition;

    static {
        int numStates = DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_transitionS[i]);
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "3227:9: (t1= expressionList )?";
        }
    }
    static final String DFA184_eotS =
        "\15\uffff";
    static final String DFA184_eofS =
        "\15\uffff";
    static final String DFA184_minS =
        "\1\5\14\uffff";
    static final String DFA184_maxS =
        "\1\101\14\uffff";
    static final String DFA184_acceptS =
        "\1\uffff\1\1\1\2\12\uffff";
    static final String DFA184_specialS =
        "\15\uffff}>";
    static final String[] DFA184_transitionS = {
            "\1\2\23\uffff\1\1\2\uffff\1\2\2\uffff\7\2\10\uffff\1\2\22\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "534:9: (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* )";
        }
    }
    static final String DFA181_eotS =
        "\17\uffff";
    static final String DFA181_eofS =
        "\1\1\16\uffff";
    static final String DFA181_minS =
        "\1\5\16\uffff";
    static final String DFA181_maxS =
        "\1\101\16\uffff";
    static final String DFA181_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA181_specialS =
        "\17\uffff}>";
    static final String[] DFA181_transitionS = {
            "\1\1\24\uffff\1\1\1\16\1\1\2\uffff\7\1\10\uffff\1\1\22\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_eotS);
    static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_eofS);
    static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_minS);
    static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_maxS);
    static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_acceptS);
    static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_specialS);
    static final short[][] DFA181_transition;

    static {
        int numStates = DFA181_transitionS.length;
        DFA181_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA181_transition[i] = DFA.unpackEncodedString(DFA181_transitionS[i]);
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = DFA181_eot;
            this.eof = DFA181_eof;
            this.min = DFA181_min;
            this.max = DFA181_max;
            this.accept = DFA181_accept;
            this.special = DFA181_special;
            this.transition = DFA181_transition;
        }
        public String getDescription() {
            return "()* loopback of 538:13: (t3= importDeclaration )*";
        }
    }
    static final String DFA182_eotS =
        "\16\uffff";
    static final String DFA182_eofS =
        "\1\1\15\uffff";
    static final String DFA182_minS =
        "\1\5\15\uffff";
    static final String DFA182_maxS =
        "\1\101\15\uffff";
    static final String DFA182_acceptS =
        "\1\uffff\1\2\1\1\13\uffff";
    static final String DFA182_specialS =
        "\16\uffff}>";
    static final String[] DFA182_transitionS = {
            "\1\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\10\uffff\1\2\22\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_eotS);
    static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_eofS);
    static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS);
    static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS);
    static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS);
    static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_specialS);
    static final short[][] DFA182_transition;

    static {
        int numStates = DFA182_transitionS.length;
        DFA182_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA182_transition[i] = DFA.unpackEncodedString(DFA182_transitionS[i]);
        }
    }

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = DFA182_eot;
            this.eof = DFA182_eof;
            this.min = DFA182_min;
            this.max = DFA182_max;
            this.accept = DFA182_accept;
            this.special = DFA182_special;
            this.transition = DFA182_transition;
        }
        public String getDescription() {
            return "()* loopback of 543:13: (t4= typeDeclaration )*";
        }
    }
    static final String DFA183_eotS =
        "\16\uffff";
    static final String DFA183_eofS =
        "\1\1\15\uffff";
    static final String DFA183_minS =
        "\1\5\15\uffff";
    static final String DFA183_maxS =
        "\1\101\15\uffff";
    static final String DFA183_acceptS =
        "\1\uffff\1\2\1\1\13\uffff";
    static final String DFA183_specialS =
        "\16\uffff}>";
    static final String[] DFA183_transitionS = {
            "\1\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\10\uffff\1\2\22\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA183_eot = DFA.unpackEncodedString(DFA183_eotS);
    static final short[] DFA183_eof = DFA.unpackEncodedString(DFA183_eofS);
    static final char[] DFA183_min = DFA.unpackEncodedStringToUnsignedChars(DFA183_minS);
    static final char[] DFA183_max = DFA.unpackEncodedStringToUnsignedChars(DFA183_maxS);
    static final short[] DFA183_accept = DFA.unpackEncodedString(DFA183_acceptS);
    static final short[] DFA183_special = DFA.unpackEncodedString(DFA183_specialS);
    static final short[][] DFA183_transition;

    static {
        int numStates = DFA183_transitionS.length;
        DFA183_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA183_transition[i] = DFA.unpackEncodedString(DFA183_transitionS[i]);
        }
    }

    class DFA183 extends DFA {

        public DFA183(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 183;
            this.eot = DFA183_eot;
            this.eof = DFA183_eof;
            this.min = DFA183_min;
            this.max = DFA183_max;
            this.accept = DFA183_accept;
            this.special = DFA183_special;
            this.transition = DFA183_transition;
        }
        public String getDescription() {
            return "()* loopback of 552:13: (t6= typeDeclaration )*";
        }
    }
 

    public static final BitSet FOLLOW_annotations_in_translationUnit119 = new BitSet(new long[]{0x0000403F92000020L,0x0000000000000002L});
    public static final BitSet FOLLOW_packageDeclaration_in_translationUnit153 = new BitSet(new long[]{0x0000403F9E000022L,0x0000000000000002L});
    public static final BitSet FOLLOW_importDeclaration_in_translationUnit188 = new BitSet(new long[]{0x0000403F9E000022L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_translationUnit238 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_translationUnit287 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_translationUnit322 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000002L});
    public static final BitSet FOLLOW_packageDeclaration_in_translationUnit378 = new BitSet(new long[]{0x0000403F9E000022L,0x0000000000000002L});
    public static final BitSet FOLLOW_importDeclaration_in_translationUnit420 = new BitSet(new long[]{0x0000403F9E000022L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_translationUnit462 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_packageDeclaration525 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration529 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_packageDeclaration531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_importDeclaration579 = new BitSet(new long[]{0x0000000010000010L});
    public static final BitSet FOLLOW_28_in_importDeclaration582 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_importDeclaration591 = new BitSet(new long[]{0x0000000024000000L});
    public static final BitSet FOLLOW_29_in_importDeclaration594 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_importDeclaration596 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_importDeclaration603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_typeDeclaration677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceModifiers_in_classOrInterfaceDeclaration727 = new BitSet(new long[]{0x0000403F92000020L,0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceModifier_in_classOrInterfaceModifiers830 = new BitSet(new long[]{0x0000001F90000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_classOrInterfaceModifier906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_classOrInterfaceModifier933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_classOrInterfaceModifier962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_classOrInterfaceModifier988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_classOrInterfaceModifier1016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_classOrInterfaceModifier1043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_classOrInterfaceModifier1072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_classOrInterfaceModifier1102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifiers1157 = new BitSet(new long[]{0x00F0001F90000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_classDeclaration1219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classDeclaration1245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_normalClassDeclaration1294 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_normalClassDeclaration1296 = new BitSet(new long[]{0x000011C000000000L});
    public static final BitSet FOLLOW_typeParameters_in_normalClassDeclaration1324 = new BitSet(new long[]{0x000011C000000000L});
    public static final BitSet FOLLOW_38_in_normalClassDeclaration1360 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_type_in_normalClassDeclaration1364 = new BitSet(new long[]{0x000011C000000000L});
    public static final BitSet FOLLOW_39_in_normalClassDeclaration1400 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_typeList_in_normalClassDeclaration1404 = new BitSet(new long[]{0x000011C000000000L});
    public static final BitSet FOLLOW_classBody_in_normalClassDeclaration1419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_typeParameters1466 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters1470 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_41_in_typeParameters1495 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters1499 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_42_in_typeParameters1526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeParameter1573 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_38_in_typeParameter1599 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_typeBound_in_typeParameter1603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeBound1663 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_typeBound1688 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_type_in_typeBound1692 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration1752 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_enumDeclaration1754 = new BitSet(new long[]{0x0000108000000000L});
    public static final BitSet FOLLOW_39_in_enumDeclaration1757 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration1761 = new BitSet(new long[]{0x0000108000000000L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration1768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_enumBody1815 = new BitSet(new long[]{0x0000220004000010L,0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody1842 = new BitSet(new long[]{0x0000220004000000L});
    public static final BitSet FOLLOW_41_in_enumBody1879 = new BitSet(new long[]{0x0000200004000000L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody1917 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_45_in_enumBody1952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants2001 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_enumConstants2026 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants2030 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_annotations_in_enumConstant2091 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_enumConstant2118 = new BitSet(new long[]{0x040011C000000002L});
    public static final BitSet FOLLOW_arguments_in_enumConstant2122 = new BitSet(new long[]{0x000011C000000002L});
    public static final BitSet FOLLOW_classBody_in_enumConstant2127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_enumBodyDeclarations2175 = new BitSet(new long[]{0x00F0101F94000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations2203 = new BitSet(new long[]{0x00F0101F94000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration2289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_normalInterfaceDeclaration2336 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_normalInterfaceDeclaration2338 = new BitSet(new long[]{0x0000114000000000L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration2342 = new BitSet(new long[]{0x0000114000000000L});
    public static final BitSet FOLLOW_38_in_normalInterfaceDeclaration2346 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration2350 = new BitSet(new long[]{0x0000114000000000L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration2356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList2404 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_typeList2429 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_type_in_typeList2433 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_44_in_classBody2491 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody2497 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_classBody2529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_interfaceBody2580 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody2585 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_interfaceBody2616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_classBodyDeclaration2667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_classBodyDeclaration2694 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration2702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_classBodyDeclaration2728 = new BitSet(new long[]{0x0000C13F92000030L,0x000001FE00000002L});
    public static final BitSet FOLLOW_memberDecl_in_classBodyDeclaration2732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_memberDecl2781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberDeclaration_in_memberDecl2807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_memberDecl2831 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_memberDecl2833 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_memberDecl2837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_memberDecl2861 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_memberDecl2865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_memberDecl2891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_memberDecl2917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_memberDeclaration2966 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_methodDeclaration_in_memberDeclaration2971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_memberDeclaration2977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl3028 = new BitSet(new long[]{0x0000800000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl3032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest3082 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_47_in_genericMethodOrConstructorRest3086 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest3091 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest3095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest3121 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest3125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_methodDeclaration3172 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration3176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration3225 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_fieldDeclaration3227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_interfaceBodyDeclaration3276 = new BitSet(new long[]{0x0000C13F92000030L,0x000001FE00000002L});
    public static final BitSet FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration3280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_interfaceBodyDeclaration3304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl3353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl3379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_interfaceMemberDecl3403 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceMemberDecl3405 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl3409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceMemberDecl3435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceMemberDecl3461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceMethodOrFieldDecl3510 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceMethodOrFieldDecl3512 = new BitSet(new long[]{0x0409000000000000L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl3516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest3565 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_interfaceMethodOrFieldRest3567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest3593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest3642 = new BitSet(new long[]{0x0005100014000000L});
    public static final BitSet FOLLOW_48_in_methodDeclaratorRest3667 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_methodDeclaratorRest3669 = new BitSet(new long[]{0x0005100014000000L});
    public static final BitSet FOLLOW_50_in_methodDeclaratorRest3705 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_methodDeclaratorRest3709 = new BitSet(new long[]{0x0000100014000000L});
    public static final BitSet FOLLOW_methodBody_in_methodDeclaratorRest3750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_methodDeclaratorRest3778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest3837 = new BitSet(new long[]{0x0004100014000000L});
    public static final BitSet FOLLOW_50_in_voidMethodDeclaratorRest3862 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest3866 = new BitSet(new long[]{0x0000100014000000L});
    public static final BitSet FOLLOW_methodBody_in_voidMethodDeclaratorRest3907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_voidMethodDeclaratorRest3935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest3980 = new BitSet(new long[]{0x0005000004000000L});
    public static final BitSet FOLLOW_48_in_interfaceMethodDeclaratorRest4005 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_interfaceMethodDeclaratorRest4007 = new BitSet(new long[]{0x0005000004000000L});
    public static final BitSet FOLLOW_50_in_interfaceMethodDeclaratorRest4043 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest4047 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_interfaceMethodDeclaratorRest4074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl4124 = new BitSet(new long[]{0x0000800000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl4129 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_47_in_interfaceGenericMethodDecl4133 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl4136 = new BitSet(new long[]{0x0409000000000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl4140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest4189 = new BitSet(new long[]{0x0004000004000000L});
    public static final BitSet FOLLOW_50_in_voidInterfaceMethodDeclaratorRest4192 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest4196 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_voidInterfaceMethodDeclaratorRest4200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest4249 = new BitSet(new long[]{0x0004100000000000L});
    public static final BitSet FOLLOW_50_in_constructorDeclaratorRest4252 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_constructorDeclaratorRest4256 = new BitSet(new long[]{0x0004100000000000L});
    public static final BitSet FOLLOW_constructorBody_in_constructorDeclaratorRest4262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator4309 = new BitSet(new long[]{0x0009000000000000L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclarator4313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators4361 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_variableDeclarators4374 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators4378 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_variableDeclarator4419 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_51_in_variableDeclarator4422 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclarator4426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest4480 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_constantDeclaratorsRest4483 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclaratorsRest4487 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_48_in_constantDeclaratorRest4562 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_constantDeclaratorRest4564 = new BitSet(new long[]{0x0009000000000000L});
    public static final BitSet FOLLOW_51_in_constantDeclaratorRest4591 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclaratorRest4595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaratorId4643 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_variableDeclaratorId4668 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_variableDeclaratorId4670 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer4732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer4758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_arrayInitializer4807 = new BitSet(new long[]{0xE600B00000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer4812 = new BitSet(new long[]{0x0000220000000000L});
    public static final BitSet FOLLOW_41_in_arrayInitializer4824 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer4828 = new BitSet(new long[]{0x0000220000000000L});
    public static final BitSet FOLLOW_41_in_arrayInitializer4860 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_45_in_arrayInitializer4894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_modifier4947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_modifier4971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_modifier4995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_modifier5019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_modifier5043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_modifier5067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_modifier5091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_modifier5115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_modifier5139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_modifier5163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_modifier5187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_modifier5211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_packageOrTypeName5257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_enumConstantName5295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_typeName5339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_type5381 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_type5400 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_type5402 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_type5435 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_type5459 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_type5461 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_Identifier_in_classOrInterfaceType5527 = new BitSet(new long[]{0x0000010020000002L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType5532 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_29_in_classOrInterfaceType5553 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_classOrInterfaceType5557 = new BitSet(new long[]{0x0000010020000002L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType5561 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_35_in_variableModifier5619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_variableModifier5645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_typeArguments5692 = new BitSet(new long[]{0x0100000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments5696 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_41_in_typeArguments5707 = new BitSet(new long[]{0x0100000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments5711 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_42_in_typeArguments5738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument5798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_typeArgument5822 = new BitSet(new long[]{0x0200004000000002L});
    public static final BitSet FOLLOW_38_in_typeArgument5852 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_57_in_typeArgument5886 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_type_in_typeArgument5922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList5995 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_qualifiedNameList6020 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList6024 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_58_in_formalParameters6091 = new BitSet(new long[]{0x0800000800000010L,0x000001FE00000002L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters6096 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_formalParameters6139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameterDecls6197 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls6201 = new BitSet(new long[]{0x1000000000000010L});
    public static final BitSet FOLLOW_formalParameterDeclsRest_in_formalParameterDecls6205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest6263 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_formalParameterDeclsRest6288 = new BitSet(new long[]{0x0000000800000010L,0x000001FE00000002L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDeclsRest6292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_formalParameterDeclsRest6327 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest6331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody6380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_constructorBody6436 = new BitSet(new long[]{0xE620F13F96001FF0L,0x000201FFE600FBD3L});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_constructorBody6441 = new BitSet(new long[]{0xE620F03F96001FF0L,0x000201FFE600FBD3L});
    public static final BitSet FOLLOW_blockStatement_in_constructorBody6456 = new BitSet(new long[]{0xE620F03F96001FF0L,0x000201FFE600FBD3L});
    public static final BitSet FOLLOW_45_in_constructorBody6483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation6541 = new BitSet(new long[]{0x2200000000000000L});
    public static final BitSet FOLLOW_61_in_explicitConstructorInvocation6546 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_57_in_explicitConstructorInvocation6552 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation6559 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_explicitConstructorInvocation6561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_explicitConstructorInvocation6587 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_explicitConstructorInvocation6589 = new BitSet(new long[]{0x0200010000000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation6594 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_57_in_explicitConstructorInvocation6598 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation6602 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_explicitConstructorInvocation6604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName6648 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_29_in_qualifiedName6651 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName6653 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_integerLiteral_in_literal6690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_literal6716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharacterLiteral_in_literal6742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal6768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal6794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_literal6818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HexLiteral_in_integerLiteral6866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OctalLiteral_in_integerLiteral6892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DecimalLiteral_in_integerLiteral6918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_booleanLiteral6965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_booleanLiteral6989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations7050 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_annotation7119 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_annotationName_in_annotation7123 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_58_in_annotation7149 = new BitSet(new long[]{0xEE00900000000FD0L,0x000201FFE6000003L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation7185 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_elementValue_in_annotation7224 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_annotation7262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationName7319 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_29_in_annotationName7322 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_annotationName7324 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs7372 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_elementValuePairs7397 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs7401 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair7472 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_elementValuePair7474 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000003L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair7478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue7538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue7564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue7590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_elementValueArrayInitializer7648 = new BitSet(new long[]{0xE600B20000000FD0L,0x000201FFE6000003L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer7653 = new BitSet(new long[]{0x0000220000000000L});
    public static final BitSet FOLLOW_41_in_elementValueArrayInitializer7678 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000003L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer7682 = new BitSet(new long[]{0x0000220000000000L});
    public static final BitSet FOLLOW_41_in_elementValueArrayInitializer7712 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_45_in_elementValueArrayInitializer7739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_annotationTypeDeclaration7794 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_46_in_annotationTypeDeclaration7796 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_annotationTypeDeclaration7800 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration7804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_annotationTypeBody7860 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody7888 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_annotationTypeBody7915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_annotationTypeElementDeclaration7963 = new BitSet(new long[]{0x0000403F92000030L,0x000001FE00000002L});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration7967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest8015 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest8019 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest8021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_annotationTypeElementRest8047 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest8049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementRest8076 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest8078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementRest8105 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest8107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest8134 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest8136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest8186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest8212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationMethodRest8261 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_58_in_annotationMethodRest8263 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_annotationMethodRest8265 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest8269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest8318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_defaultValue8353 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000003L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue8357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_block8415 = new BitSet(new long[]{0xE620F03F96001FF0L,0x000201FFE600FBD3L});
    public static final BitSet FOLLOW_blockStatement_in_block8420 = new BitSet(new long[]{0xE620F03F96001FF0L,0x000201FFE600FBD3L});
    public static final BitSet FOLLOW_45_in_block8447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_blockStatement8482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement8508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement8534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement8593 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_localVariableDeclarationStatement8595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_localVariableDeclaration8655 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration8659 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration8663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_variableModifiers8722 = new BitSet(new long[]{0x0000000800000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement8789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement8815 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_statement8819 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_statement8822 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_statement8826 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement8830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_statement8854 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_parExpression_in_statement8858 = new BitSet(new long[]{0xE620D03F96001FF0L,0x000201FFE600FBD3L});
    public static final BitSet FOLLOW_statement_in_statement8862 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_statement8894 = new BitSet(new long[]{0xE620D03F96001FF0L,0x000201FFE600FBD3L});
    public static final BitSet FOLLOW_statement_in_statement8898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_statement8933 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_58_in_statement8935 = new BitSet(new long[]{0xE600900804000FD0L,0x000201FFE6000003L});
    public static final BitSet FOLLOW_forControl_in_statement8939 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_statement8941 = new BitSet(new long[]{0xE620D03F96001FF0L,0x000201FFE600FBD3L});
    public static final BitSet FOLLOW_statement_in_statement8945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_statement8969 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_parExpression_in_statement8973 = new BitSet(new long[]{0xE620D03F96001FF0L,0x000201FFE600FBD3L});
    public static final BitSet FOLLOW_statement_in_statement8977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_statement9001 = new BitSet(new long[]{0xE620D03F96001FF0L,0x000201FFE600FBD3L});
    public static final BitSet FOLLOW_statement_in_statement9005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_statement9007 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_parExpression_in_statement9011 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement9013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_statement9037 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_statement9041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010400L});
    public static final BitSet FOLLOW_catches_in_statement9069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_statement9071 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_statement9075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_statement9103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_statement9129 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_statement9135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_statement9169 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_parExpression_in_statement9173 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_statement9175 = new BitSet(new long[]{0x0000200000000000L,0x0000000000020004L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement9179 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_45_in_statement9181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_statement9205 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_parExpression_in_statement9209 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_statement9213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_statement9238 = new BitSet(new long[]{0xE600900004000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_statement9243 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement9249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_statement9273 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_statement9277 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement9279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_statement9303 = new BitSet(new long[]{0x0000000004000010L});
    public static final BitSet FOLLOW_Identifier_in_statement9307 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement9310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_statement9334 = new BitSet(new long[]{0x0000000004000010L});
    public static final BitSet FOLLOW_Identifier_in_statement9338 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement9341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_statement9365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementExpression_in_statement9391 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement9393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_statement9419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_statement9421 = new BitSet(new long[]{0xE620D03F96001FF0L,0x000201FFE600FBD3L});
    public static final BitSet FOLLOW_statement_in_statement9425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches9483 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_catchClause_in_catches9511 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_80_in_catchClause9578 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_58_in_catchClause9580 = new BitSet(new long[]{0x0000000800000010L,0x000001FE00000002L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause9584 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_catchClause9586 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_catchClause9590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameter9648 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_type_in_formalParameter9652 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter9656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups9717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020004L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup9788 = new BitSet(new long[]{0xE620D03F96001FF2L,0x000201FFE602FBD7L});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup9827 = new BitSet(new long[]{0xE620D03F96001FF2L,0x000201FFE600FBD3L});
    public static final BitSet FOLLOW_81_in_switchLabel9896 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_constantExpression_in_switchLabel9900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_switchLabel9902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_switchLabel9926 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_enumConstantName_in_switchLabel9930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_switchLabel9932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_switchLabel9956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_switchLabel9958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enhancedForControl_in_forControl10021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl10047 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_forControl10050 = new BitSet(new long[]{0xE600900004000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_forControl10054 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_forControl10057 = new BitSet(new long[]{0xE600900800000FD2L,0x000201FFE6000003L});
    public static final BitSet FOLLOW_forUpdate_in_forControl10061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit10111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit10137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_enhancedForControl10197 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_type_in_enhancedForControl10201 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_enhancedForControl10205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_enhancedForControl10207 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_enhancedForControl10211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate10262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_parExpression10321 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_parExpression10325 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_parExpression10349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList10395 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_expressionList10420 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_expressionList10424 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_expression_in_statementExpression10486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constantExpression10537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression10591 = new BitSet(new long[]{0x0008050000000002L,0x0001FE0000000000L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression10606 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_expression10610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression10649 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_56_in_conditionalExpression10675 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression10679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_conditionalExpression10681 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression10685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression10746 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_conditionalOrExpression10760 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression10764 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression10825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_conditionalAndExpression10839 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression10843 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10904 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_84_in_inclusiveOrExpression10930 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10936 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression10997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_exclusiveOrExpression11011 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression11017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression11078 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_andExpression11092 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression11096 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression11155 = new BitSet(new long[]{0x0000000000000002L,0x0000000000C00000L});
    public static final BitSet FOLLOW_86_in_equalityExpression11170 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_87_in_equalityExpression11175 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression11183 = new BitSet(new long[]{0x0000000000000002L,0x0000000000C00000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression11242 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_instanceOfExpression11255 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression11259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression11318 = new BitSet(new long[]{0x0000050000000002L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression11334 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression11338 = new BitSet(new long[]{0x0000050000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression11397 = new BitSet(new long[]{0x0000050000000002L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression11425 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression11429 = new BitSet(new long[]{0x0000050000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression11488 = new BitSet(new long[]{0x0000000000000002L,0x0000000006000000L});
    public static final BitSet FOLLOW_89_in_additiveExpression11503 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_90_in_additiveExpression11508 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression11515 = new BitSet(new long[]{0x0000000000000002L,0x0000000006000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression11574 = new BitSet(new long[]{0x0000000040000002L,0x0000000018000000L});
    public static final BitSet FOLLOW_30_in_multiplicativeExpression11590 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_91_in_multiplicativeExpression11596 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_92_in_multiplicativeExpression11602 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression11610 = new BitSet(new long[]{0x0000000040000002L,0x0000000018000000L});
    public static final BitSet FOLLOW_89_in_unaryExpression11667 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression11671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_unaryExpression11695 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression11699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_unaryExpression11723 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression11727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_unaryExpression11751 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression11755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression11781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_unaryExpressionNotPlusMinus11827 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_unaryExpressionNotPlusMinus11855 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus11885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus11913 = new BitSet(new long[]{0x0001000020000002L,0x0000000060000000L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus11918 = new BitSet(new long[]{0x0001000020000002L,0x0000000060000000L});
    public static final BitSet FOLLOW_93_in_unaryExpressionNotPlusMinus11946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_unaryExpressionNotPlusMinus11951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_castExpression11999 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression12003 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_castExpression12005 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression12009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_castExpression12036 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_type_in_castExpression12041 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_expression_in_castExpression12047 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_castExpression12051 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression12055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_primitiveType12107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_primitiveType12119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_primitiveType12131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_primitiveType12143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_primitiveType12155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_primitiveType12167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_primitiveType12179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_primitiveType12191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_assignmentOperator12231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_assignmentOperator12244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_assignmentOperator12256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_assignmentOperator12268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_assignmentOperator12280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_assignmentOperator12292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_assignmentOperator12304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_assignmentOperator12316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_assignmentOperator12328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_assignmentOperator12351 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_assignmentOperator12355 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_assignmentOperator12359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_assignmentOperator12407 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_assignmentOperator12411 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_assignmentOperator12415 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_assignmentOperator12419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_assignmentOperator12464 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_assignmentOperator12468 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_assignmentOperator12472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_relationalOp12539 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_relationalOp12543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_relationalOp12586 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_relationalOp12590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_relationalOp12624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_relationalOp12648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_shiftOp12705 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_shiftOp12709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_shiftOp12754 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_shiftOp12758 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_shiftOp12762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_shiftOp12805 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_shiftOp12809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary12884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_primary12908 = new BitSet(new long[]{0x0401000020000002L});
    public static final BitSet FOLLOW_29_in_primary12933 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_primary12937 = new BitSet(new long[]{0x0401000020000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary12975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_primary13027 = new BitSet(new long[]{0x0400000020000000L});
    public static final BitSet FOLLOW_superSuffix_in_primary13031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary13057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_primary13081 = new BitSet(new long[]{0x0000010000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_creator_in_primary13085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_primary13111 = new BitSet(new long[]{0x0401000020000002L});
    public static final BitSet FOLLOW_29_in_primary13136 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_primary13140 = new BitSet(new long[]{0x0401000020000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary13179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primary13233 = new BitSet(new long[]{0x0001000020000000L});
    public static final BitSet FOLLOW_48_in_primary13259 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_primary13261 = new BitSet(new long[]{0x0001000020000000L});
    public static final BitSet FOLLOW_29_in_primary13288 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_primary13290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_primary13314 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_primary13316 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_primary13318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_identifierSuffix13375 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_identifierSuffix13377 = new BitSet(new long[]{0x0001000020000000L});
    public static final BitSet FOLLOW_29_in_identifierSuffix13404 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_identifierSuffix13406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_identifierSuffix13431 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_identifierSuffix13458 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_identifierSuffix13482 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix13511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffix13535 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_identifierSuffix13537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffix13561 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_identifierSuffix13565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffix13589 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_61_in_identifierSuffix13591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffix13615 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_57_in_identifierSuffix13617 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix13621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffix13645 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_identifierSuffix13647 = new BitSet(new long[]{0x0000010000000010L});
    public static final BitSet FOLLOW_innerCreator_in_identifierSuffix13651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator13709 = new BitSet(new long[]{0x0000010000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_createdName_in_creator13713 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator13717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_creator13743 = new BitSet(new long[]{0x0401000000000000L});
    public static final BitSet FOLLOW_arrayCreatorRest_in_creator13748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator13777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_createdName13836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_createdName13862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_innerCreator13920 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_innerCreator13925 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator13929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_arrayCreatorRest13985 = new BitSet(new long[]{0xE602900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_49_in_arrayCreatorRest14017 = new BitSet(new long[]{0x0001100000000000L});
    public static final BitSet FOLLOW_48_in_arrayCreatorRest14051 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_arrayCreatorRest14053 = new BitSet(new long[]{0x0001100000000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_arrayCreatorRest14090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest14124 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_arrayCreatorRest14126 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_arrayCreatorRest14159 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest14163 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_arrayCreatorRest14165 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_arrayCreatorRest14201 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_arrayCreatorRest14203 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest14290 = new BitSet(new long[]{0x000011C000000002L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest14317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation14386 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_explicitGenericInvocation14390 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocation14394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nonWildcardTypeArguments14450 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments14454 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_nonWildcardTypeArguments14456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_selector14508 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_selector14512 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_arguments_in_selector14540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_selector14575 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_61_in_selector14577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_selector14597 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_57_in_selector14599 = new BitSet(new long[]{0x0400000020000000L});
    public static final BitSet FOLLOW_superSuffix_in_selector14603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_selector14623 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_selector14625 = new BitSet(new long[]{0x0000010000000010L});
    public static final BitSet FOLLOW_innerCreator_in_selector14629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_selector14649 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_selector14653 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_selector14655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix14709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_superSuffix14733 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_superSuffix14737 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix14741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_arguments14800 = new BitSet(new long[]{0xEE00900800000FD0L,0x000201FFE6000003L});
    public static final BitSet FOLLOW_expressionList_in_arguments14832 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_arguments14863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred5_Java119 = new BitSet(new long[]{0x0000403F92000020L,0x0000000000000002L});
    public static final BitSet FOLLOW_packageDeclaration_in_synpred5_Java153 = new BitSet(new long[]{0x0000403F9E000022L,0x0000000000000002L});
    public static final BitSet FOLLOW_importDeclaration_in_synpred5_Java188 = new BitSet(new long[]{0x0000403F9E000022L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred5_Java238 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred5_Java287 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred5_Java322 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000002L});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_synpred106_Java6441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred110_Java6541 = new BitSet(new long[]{0x2200000000000000L});
    public static final BitSet FOLLOW_set_in_synpred110_Java6545 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_arguments_in_synpred110_Java6559 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_synpred110_Java6561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred121_Java7050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_synpred144_Java8482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred145_Java8508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_synpred150_Java8894 = new BitSet(new long[]{0xE620D03F96001FF0L,0x000201FFE600FBD3L});
    public static final BitSet FOLLOW_statement_in_synpred150_Java8898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred155_Java9069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_synpred155_Java9071 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_synpred155_Java9075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred156_Java9103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchLabel_in_synpred171_Java9788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_synpred173_Java9896 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_constantExpression_in_synpred173_Java9900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_synpred173_Java9902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_synpred174_Java9926 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_enumConstantName_in_synpred174_Java9930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_synpred174_Java9932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enhancedForControl_in_synpred175_Java10021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred179_Java10111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred181_Java10606 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_synpred181_Java10610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftOp_in_synpred192_Java11425 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred192_Java11429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred204_Java11885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_synpred208_Java11999 = new BitSet(new long[]{0x0000000000000010L,0x000001FE00000000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred208_Java12003 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_synpred208_Java12005 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred208_Java12009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred209_Java12041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_synpred226_Java12341 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_synpred226_Java12343 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred226_Java12345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred227_Java12395 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred227_Java12397 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred227_Java12399 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred227_Java12401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred228_Java12454 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred228_Java12456 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred228_Java12458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_synpred229_Java12531 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred229_Java12533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred230_Java12578 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred230_Java12580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_synpred232_Java12697 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_synpred232_Java12699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred233_Java12744 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred233_Java12746 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred233_Java12748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred234_Java12797 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred234_Java12799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred236_Java12933 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred236_Java12937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred237_Java12975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred242_Java13136 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred242_Java13140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred243_Java13179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_synpred249_Java13431 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_synpred249_Java13458 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_synpred249_Java13482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_synpred262_Java14159 = new BitSet(new long[]{0xE600900000000FD0L,0x000201FFE6000001L});
    public static final BitSet FOLLOW_expression_in_synpred262_Java14163 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_synpred262_Java14165 = new BitSet(new long[]{0x0000000000000002L});

}