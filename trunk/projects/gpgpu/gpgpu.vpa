<vpa>
<path name='/afs/crhc.illinois.edu/user/yim6/clairvoyant/projects/cedp/cedp/projects/gpgpu/benchmark/parboil/'>
</path>
<benchmark>
  <program name='cp' data='default'></program>
  <program name='mri-fhd' data='large'></program>
  <program name='mri-q' data='large'></program>
  <program name='pns' data='default'></program>
  <program name='rpes' data='default'></program>
  <program name='sad' data='default'></program>
  <program name='tpacf' data='default'></program>
</benchmark>
<script>
import os
import string
import thread


def Clean():
  VpaAPI.ExecCmd("./parboil clean " + VpaAPI.GetSelectedProgram())


def Compile(target):
  VpaAPI.ExecCmd("./parboil compile " + VpaAPI.GetSelectedProgram() + " " + target)


def Execute(target):
  VpaAPI.ExecCmd("./parboil run " + VpaAPI.GetSelectedProgram() + " " + target + " " + VpaAPI.GetSelectedData())


def Profile(target, options):
  path_dst = VpaAPI.GetHomeDir() + "benchmarks/" + VpaAPI.GetSelectedProgram() + "/src/" + target + "/"
  instrHome = "projects" + VpaAPI.GetFileSeparator() + "gpgpu" + VpaAPI.GetFileSeparator() + "instr" + VpaAPI.GetFileSeparator()
  VpaAPI.TxFile(instrHome + "fi_prerun" + VpaAPI.GetFileSeparator() + "gpufi.h", path_dst + "gpufi.h")
  VpaAPI.TxFile(instrHome + "fi_prerun" + VpaAPI.GetFileSeparator() + "gpufi_kernel.cu", path_dst + "gpufi_kernel.cu")

  # Make sure no time delay is needed since those above operations are synchronous.

  VpaAPI.ExecCmd("rm " + VpaAPI.GetHomeDir() + "benchmarks/" + VpaAPI.GetSelectedProgram() + "/fi_profile.txt -f")
  VpaAPI.ExecCmd("echo profile " + options + " > " + VpaAPI.GetHomeDir() + "benchmarks/" + VpaAPI.GetSelectedProgram() + "/fi_cmd.txt")
  Execute(target)
  VpaAPI.ExecCmd("cat " + VpaAPI.GetHomeDir() + "benchmarks/" + VpaAPI.GetSelectedProgram() + "/fi_profile.txt")


def GetFileList(path):
  VpaAPI.ExecCmd("ls " + path + " > /tmp/hifi")
  VpaAPI.RxFile("/tmp/hifi", "tmp" + VpaAPI.GetFileSeparator() + "filelist")
  print "%s" % VpaAPI.GetCurrentDir()
  buffer = VpaAPI.FileRead("tmp" + VpaAPI.GetFileSeparator() + "filelist")
  buffer = str(buffer)
  return buffer.split()
  

def InstrGetFiles(dst):
  # Gets file list
  path = VpaAPI.GetHomeDir() + "benchmarks/" + VpaAPI.GetSelectedProgram() + "/src/" + dst + "/"
  fileList = GetFileList(path)
  path_dst = VpaAPI.GetHomeDir() + "benchmarks/" + VpaAPI.GetSelectedProgram() + "/src/" + dst + "/"

  instrHome = "projects" + VpaAPI.GetFileSeparator() + "gpgpu" + VpaAPI.GetFileSeparator() + "instr" + VpaAPI.GetFileSeparator()
  VpaAPI.TxFile(instrHome + "before" + VpaAPI.GetFileSeparator() + "gpufi.h", path_dst + "gpufi.h")
  VpaAPI.FileCopy(instrHome + "before" + VpaAPI.GetFileSeparator() + "gpufi.h", "gpufi.h")

  # Copies the source code from an injector node to the control server
  for fileName in fileList:
    if fileName is "gpufi.h" or fileName is "gpufi_kernel.cu":
      continue
    if fileName.endswith(".cu") or fileName.endswith(".h") or fileName.endswith(".cpp"):
      VpaAPI.RxFile(path + fileName, fileName)

  return fileList


def InstrPutFiles(folder, fileList):  
  path = VpaAPI.GetHomeDir() + "benchmarks/" + VpaAPI.GetSelectedProgram() + "/src/cuda_cetus/"
  if fileList is None:
    fileList = GetFileList(path)

  # 4: store the instrumented file back to the injector 
  # copy all files from cuda_cetus to cuda_fi 
  path_dst = VpaAPI.GetHomeDir() + "benchmarks/" + VpaAPI.GetSelectedProgram() + "/src/" + folder + "/"
  VpaAPI.ExecCmd("mkdir " + path_dst + " -p")
  VpaAPI.ExecCmd("cp " + path + "/* " + path_dst + " -rf")

  # overwrite instrumented files
  for fileName in fileList:
    if fileName is "gpufi.h" or fileName is "gpufi_kernel.cu":
      continue
    #fileName = "tmp" + File.separatorChar + fileList.elementAt(i)
    if fileName.endswith(".cu"):
      VpaAPI.TxFile("cetus_output" + VpaAPI.GetFileSeparator() + fileName + ".beauty", path_dst + fileName)

  # store FI library files
  #cmdInputStream.AddCommand("rm " + path_dst + File.separator + "/gpufi.h -f")
  instrHome = "projects" + VpaAPI.GetFileSeparator() + "gpgpu" + VpaAPI.GetFileSeparator() + "instr" + VpaAPI.GetFileSeparator()
  VpaAPI.TxFile(instrHome + folder + VpaAPI.GetFileSeparator() + "gpufi.h", path_dst + "gpufi.h")
  VpaAPI.TxFile(instrHome + folder + VpaAPI.GetFileSeparator() + "gpufi_kernel.cu", path_dst + "gpufi_kernel.cu")
  #cmdInputStream.AddCommand("touch " + path_dst + File.separator + "/gpufi.h")


def InstrRunCetus(folder, fileList):
  # new Worker(fileList)
  if fileList is None:
    path = VpaAPI.GetHomeDir() + "benchmarks/" + VpaAPI.GetSelectedProgram() + "/src/cuda_cetus/"
    fileList = GetFileList(path)

  currentPath = VpaAPI.GetCurrentLocalPath()
  # System.getProperty("user.dir");

  # 3: run CETUS for FI instr. 
  # String userDir = System.getProperty("user.dir");
  # System.setProperty("user.dir", userDir + File.separatorChar + "tmp");
  for fileName in fileList:
    #for(i=fileList.size()-1; i>=0; i--){
    if fileName is "gpufi_kernel.cu":
      continue

    if fileName.endswith(".cu"):
      #System.out.println("Instrment: " + fileName);
      if folder is "cuda_fi":
        args = ["-fault-injector"]
        args.append(fileName)
      elif folder is "cuda_ed":
        args = ["-error-detector1pt"]
        args.append(fileName)
      elif folder is "cuda_fied":
        args = ["-fault-injector"]
        args.append("-error-detector")
        args.append(fileName)
      else:
        args = ["-fault-injector"]
        args.append(fileName)

      #args[1] = "-expand-all-header";
      #args[4] = "-verbosity";
      #args[2] = "-outdir";

      VpaAPI.RunCetus(args)
      
      VpaAPI.Beautifier(fileName,fileName + ".beauty")
      VpaAPI.Beautifier("cetus_output" + VpaAPI.GetFileSeparator() + fileName, "cetus_output" + VpaAPI.GetFileSeparator() + fileName + ".beauty")


def Generate(folder):
  VpaAPI.RxFile(VpaAPI.GetHomeDir() + "benchmarks/" + VpaAPI.GetSelectedProgram() + "/fi_profile.txt", "fi_profile.txt")

  kern_id = "-"
  kern_name = "-"
  instance = "-"
  
  VpaAPI.SetFaultCommand("fi_cmd.txt", True)

  infile = open("fi_profile.txt", "r")
  line = infile.readline()
  while line:
    tokens = line.split()
    if len(tokens) > 0:
      print "%s [%s]\n" % (str(len(tokens)), tokens[0])
    if len(tokens) == 4:
      print "+ [%s]\n" % tokens[0]
#      if tokens[0] is "kernel":
      kern_id = tokens[1]
      kern_name = tokens[2]
      instance = tokens[3]
      print "fi " + kern_id + " " + instance + " " + kern_name
    elif len(tokens) == 6:
      print "+ [%s]\n" % tokens[0]
#      if tokens[0] is "variable":
      print "- [%s]\n" % tokens[0]
      var_id = tokens[1]
      var_name = tokens[2]
      call = int(tokens[3])
      loop_id = tokens[4]
      var_type = tokens[5]
      VpaAPI.AddFaultCommand("fi " + kern_id + " " + instance + " " + var_id + " " + str(call-1) + " 0x80000000 " + var_type + " " + var_name + "\n")
      VpaAPI.AddFaultCommand("fi " + kern_id + " " + instance + " " + var_id + " " + str(call-1) + " 0x40000000 " + var_type + " " + var_name + "\n")
      VpaAPI.AddFaultCommand("fi " + kern_id + " " + instance + " " + var_id + " " + str(call-1) + " 0x08000000 " + var_type + " " + var_name + "\n")
      VpaAPI.AddFaultCommand("fi " + kern_id + " " + instance + " " + var_id + " " + str(call-1) + " 0x00800000 " + var_type + " " + var_name + "\n")
      VpaAPI.AddFaultCommand("fi " + kern_id + " " + instance + " " + var_id + " " + str(call-1) + " 0x00400000 " + var_type + " " + var_name + "\n")
      VpaAPI.AddFaultCommand("fi " + kern_id + " " + instance + " " + var_id + " " + str(call-1) + " 0x00001000 " + var_type + " " + var_name + "\n")
      VpaAPI.AddFaultCommand("fi " + kern_id + " " + instance + " " + var_id + " " + str(call-1) + " 0x00000001 " + var_type + " " + var_name + "\n")
    line = infile.readline()
  infile.close()
  VpaAPI.SetFaultCommand("fi_cmd.txt", False)


def ReadCmds():
  VpaAPI.SetFaultCommand("fi_cmd.txt", True)
  fin = VpaAPI.GetCampaignText()
  i = 0
  while fin.length() > i:
    str = ""
    while True:
      if i >= fin.length():
        break
      buf = fin.substring(i, i+1)
      i += 1
      if buf is "\n":
        break
      str += buf
    print "READ CMDS: %s\n" % str

    tokens = str.split()
    print "" + str
    print "" + str(len(tokens))
    if len(tokens) == 10:
      if tokens[0] is "fi":
        kern_id = int(tokens[1])
        instance = int(tokens[2])
        var_id = int(tokens[3])
        call = int(tokens[4])
        mask = tokens[5]
        blk = int(tokens[6])
        thread = int(tokens[7])
        var_type = tokens[8]
        var_name = tokens[9]

        VpaAPI.AddFaultCommand("fi " + str(kern_id) + " " + str(instance) + " " + str(var_id) + " " + str(call) + " " + mask + " " + str(blk) + " " + str(thread) + " " + var_type + " " + var_name + "\n")
  VpaAPI.SetFaultCommand("fi_cmd.txt", False)


def FIExec(folder):
  thread.start_new_thread(FIExecMain, (folder,))


def FIExecMain(folder):
  dst = "fi.sh"

  VpaAPI.SaveFICommands(dst, folder)
  #infile = open(dst, "w")
  #infile.write("%s" % VpaAPI.GetFICommands(folder))
  #infile.close()
	
  VpaAPI.ExecCmd("rm -f " + dst)
  VpaAPI.TxFile(dst, VpaAPI.GetHomeDir() + dst)
  VpaAPI.ExecCmd("chmod 755 " + dst)
  VpaAPI.ExecCmd("./" + dst)


def FIGetFiles(folder):
  fiTable = VpaAPI.GetFITable()
  for index in range(fiTable.getRowCount()):
    id = "result-" + str(fiTable.getValueAt(index, 0)) + ".txt"
    VpaAPI.RxFile(VpaAPI.GetHomeDir() + id, id)


def FileRead(filename):
  infile = open(filename, "r")
  result = ""
  line = infile.readline()
  while line is not None:
    result += line;
    line = infile.readline()
  infile.close()
  return result


def FIAnalysis(folder):
  fiTable = VpaAPI.GetFITable()
  for index in range(fiTable.getRowCount()):
    id = "result-" + str(fiTable.getValueAt(index, 0)) + ".txt"
    output = FileRead(id)
    fiTable.setValueAt(output, index, 3)
    if output.contains("SDC Detected: 1"):
      fiTable.setValueAt("Detect-Ctrl", index, 2)
    elif output.contains("SDC Detected: 2"):
      fiTable.setValueAt("Detect-Data", index, 2)
    elif output.contains("Pass"):
      if output.contains("Injected: 0") or output.contains("injected: 0"):
        fiTable.setValueAt("NA", index, 2)
      else:
        fiTable.setValueAt("Pass", index, 2)
    elif output.contains("Mismatch"):
      fiTable.setValueAt("SDC", index, 2)
    elif output.contains("Run failed"):
      fiTable.setValueAt("Crash", index, 2)


</script>

<command>
  <item name='Original Program'>
    <item name='Compile'>
Clean()
Compile("cuda")
    </item>
    <item name='Execute'>
Execute("cuda")
    </item>
    <item name='Generate a Golden Run'>
Execute("cuda")
VpaAPI.ExecCmd("cp " + VpaAPI.GetHomeDir() + "benchmarks/" + VpaAPI.GetSelectedProgram() + "/run/" + VpaAPI.GetSelectedData() + "/* " + VpaAPI.GetHomeDir() + "benchmarks/" + VpaAPI.GetSelectedProgram() + "/output/ -f")
    </item>
    <item name='Execute /wo Loop'>
Compile("cuda_wo_loop")
Execute("cuda_wo_loop")
    </item>
  </item>
  <item name='Profiling'>
    <item name='Instrument'>
fileList = InstrGetFiles("cuda_cetus")
InstrRunCetus("cuda_profile", fileList)
InstrPutFiles("cuda_profile", fileList)
      <item name='Get Files'>
fileList = InstrGetFiles("cuda_cetus")
      </item>
      <item name='Run CETUS'>
InstrRunCetus("cuda_profile", None)
      </item>
      <item name='Put Files'>
InstrPutFiles("cuda_profile", None)
      </item>
    </item>
    <item name='Compile'>
Compile("cuda_profile")
    </item>
    <item name='Get Result'>
VpaAPI.RxFile(VpaAPI.GetHomeDir() + "benchmarks/" + VpaAPI.GetSelectedProgram() + "/fi_profile.txt", "fi_profile.txt")
    </item>
    <item name='Value'>
      <item name='Loop Iterations'>
Profile("cuda_profile", "value loop")   
      </item>
      <item name='Kernel Instances'>
Profile("cuda_profile", "value kernel")   
      </item>
      <item name='Threads'>
Profile("cuda_profile", "value kernel " + VpaAPI.InputDialog("Thread #:"))
      </item>
      <item name='Blocks'>
Profile("cuda_profile", "value block")
      </item>
    </item>
    <item name='Control Flow'>
      <item name='Base'>
      </item>
      <item name='Loop Iterations'>
      </item>
      <item name='Kernel Instances'>
      </item>
      <item name='Threads'>
      </item>
      <item name='Blocks'>
      </item>
    </item>
  </item>
  <item name='Fault Injection'>
  
    <item name='Instrument'>
fileList = InstrGetFiles("cuda_cetus")
InstrRunCetus("cuda_fi", fileList)
InstrPutFiles("cuda_fi", fileList)
InstrPutFiles("cuda_fi_prerun", fileList)
      <item name='Get Files'>
InstrGetFiles("cuda_cetus")
      </item>
      <item name='Run CETUS'>
InstrRunCetus("cuda_fi", None)
      </item>
      <item name='Put Files'>
InstrPutFiles("cuda_fi", None)
InstrPutFiles("cuda_fi_prerun", None)
      </item>
    </item>
    <item name='Compile Prerun'>
Compile("cuda_fi_prerun")
    </item>
    <item name='Extract FI Targets'>
Profile("cuda_fi_prerun", "none")
    </item>
    <item name='Generate FI Cmds'>
Generate("cuda_fi_prerun")
    </item>
    <item name='Read FI Cmds'>
ReadCmds()
    </item>
    <item name='Compile FI'>
Compile("cuda_fi")
    </item>
    <item name='FI'>
FIExec("cuda_fi")
FIGetFiles("cuda_fi")
FIAnalysis("cuda_fi")
      <item name='FI Exp'>
FIExec("cuda_fi")
      </item>
      <item name='Get Files'>
FIGetFiles("cuda_fi")
      </item>
      <item name='Analysis'>
FIAnalysis("cuda_fi")
      </item>
    </item>
    </item>
    <item name='Error Detector'>
        <item name='Instrument'>
Vector fileList
fileList = InstrGetFiles("cuda_cetus")
InstrRunCetus("cuda_ed", fileList)
InstrPutFiles("cuda_ed", fileList)
System.out.println("FI Instr Done")
        <item name='Get Files'>
Vector fileList
fileList = InstrGetFiles("cuda_cetus")
        </item>
        <item name='Run CETUS'>
InstrRunCetus("cuda_ed", null)
        </item>
        <item name='Put Files'>
InstrPutFiles("cuda_ed", null)
        </item>
      </item>
      <item name='Compile'>
Compile("cuda_ed")
      </item>
      <item name='Extract FI Targets'>
Profile("cuda_ed", "none")
      </item>
      <item name='Generate FI Cmds'>
Generate("cuda_ed")
      </item>
      <item name='Execute'>
ED_Exec("cuda_ed")
      </item>
    </item>
    <item name='Fault Injection & Error Detector'>
  
      <item name='Instrument'>
  
        <item name='Get Files'>
  
        </item>
        <item name='Run CETUS'>
  
        </item>
        <item name='Put Files'>
  
        </item>
      </item>
      <item name='Compile Prerun'>
  
      </item>
      <item name='Extract FI Targets'>
  
      </item>
      <item name='Generate FI Cmds'>
  
      </item>
      <item name='Read FI Cmds'>
  
      </item>
      <item name='Compile FI'>
  
      </item>
      <item name='FI'>
   
        <item name='FI Exp'>
  
        </item>
        <item name='Get Files'>
  
        </item>
        <item name='Analysis'>
  
        </item>
        <item name='Test'>
  
        </item>
      </item>
    </item>
    <item name='Setup'>
        <item name='Install CUDA SDK'>
#for ubuntu
#sudo apt-get install envyng-gtk -y
#sudo envyng -t
        <item name='Install Parboil'>
# cd common/src
# make parboil=$HOME clean
# make parboil=$HOME
# cd ../..
        </item>
    </item>
  </item>
</command>
</vpa>
