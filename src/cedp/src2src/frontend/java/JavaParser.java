// $ANTLR 3.2 Sep 23, 2009 12:02:23 src/cedp/src2src/frontend/java/Java.g 2010-06-10 14:29:43

package cedp.src2src.frontend.java;

import java.io.*;
import antlr.CommonAST;
import antlr.DumpASTVisitor;
import java.util.*;
import cetus.hir.*;
import cetus.hir.java.*;
import org.antlr.runtime.BitSet;
import cetus.base.grammars.PreprocessorInfoChannel;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created
 *          elementValuePair and elementValuePairs rules, then used them in the
 *          annotation rule.  Allows it to recognize annotation references with
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which
 *          has the Identifier portion in it, the parser would fail on constants in
 *          annotation definitions because it expected two identifiers.
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 *
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *  Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *  and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *  --a[i].foo didn't work. Fixed unaryExpression
 *
 *  Version 1.0.6 -- John Ridgway, March 17, 2008
 *      Made "assert" a switchable keyword like "enum".
 *      Fixed compilationUnit to disallow "annotation importDeclaration ...".
 *      Changed "Identifier ('.' Identifier)*" to "qualifiedName" in more
 *          places.
 *      Changed modifier* and/or variableModifier* to classOrInterfaceModifiers,
 *          modifiers or variableModifiers, as appropriate.
 *      Renamed "bound" to "typeBound" to better match language in the JLS.
 *      Added "memberDeclaration" which rewrites to methodDeclaration or
 *      fieldDeclaration and pulled type into memberDeclaration.  So we parse
 *          type and then move on to decide whether we're dealing with a field
 *          or a method.
 *      Modified "constructorDeclaration" to use "constructorBody" instead of
 *          "methodBody".  constructorBody starts with explicitConstructorInvocation,
 *          then goes on to blockStatement*.  Pulling explicitConstructorInvocation
 *          out of expressions allowed me to simplify "primary".
 *      Changed variableDeclarator to simplify it.
 *      Changed type to use classOrInterfaceType, thus simplifying it; of course
 *          I then had to add classOrInterfaceType, but it is used in several
 *          places.
 *      Fixed annotations, old version allowed "@X(y,z)", which is illegal.
 *      Added optional comma to end of "elementValueArrayInitializer"; as per JLS.
 *      Changed annotationTypeElementRest to use normalClassDeclaration and
 *          normalInterfaceDeclaration rather than classDeclaration and
 *          interfaceDeclaration, thus getting rid of a couple of grammar ambiguities.
 *      Split localVariableDeclaration into localVariableDeclarationStatement
 *          (includes the terminating semi-colon) and localVariableDeclaration.
 *          This allowed me to use localVariableDeclaration in "forInit" clauses,
 *           simplifying them.
 *      Changed switchBlockStatementGroup to use multiple labels.  This adds an
 *          ambiguity, but if one uses appropriately greedy parsing it yields the
 *           parse that is closest to the meaning of the switch statement.
 *      Renamed "forVarControl" to "enhancedForControl" -- JLS language.
 *      Added semantic predicates to test for shift operations rather than other
 *          things.  Thus, for instance, the string "< <" will never be treated
 *          as a left-shift operator.
 *      In "creator" we rule out "nonWildcardTypeArguments" on arrayCreation,
 *          which are illegal.
 *      Moved "nonWildcardTypeArguments into innerCreator.
 *      Removed 'super' superSuffix from explicitGenericInvocation, since that
 *          is only used in explicitConstructorInvocation at the beginning of a
 *           constructorBody.  (This is part of the simplification of expressions
 *           mentioned earlier.)
 *      Simplified primary (got rid of those things that are only used in
 *          explicitConstructorInvocation).
 *      Lexer -- removed "Exponent?" from FloatingPointLiteral choice 4, since it
 *          led to an ambiguity.
 *
 *      This grammar successfully parses every .java file in the JDK 1.5 source
 *          tree (excluding those whose file names include '-', which are not
 *          valid Java compilation units).
 *
 *  Known remaining problems:
 *      "Letter" and "JavaIDDigit" are wrong.  The actual specification of
 *      "Letter" should be "a character for which the method
 *      Character.isJavaIdentifierStart(int) returns true."  A "Java
 *      letter-or-digit is a character for which the method
 *      Character.isJavaIdentifierPart(int) returns true."
 */
public class JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Identifier", "ENUM", "FloatingPointLiteral", "CharacterLiteral", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "ASSERT", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'package'", "';'", "'import'", "'static'", "'.'", "'*'", "'public'", "'protected'", "'private'", "'abstract'", "'final'", "'strictfp'", "'class'", "'extends'", "'implements'", "'<'", "','", "'>'", "'&'", "'{'", "'}'", "'interface'", "'void'", "'['", "']'", "'throws'", "'='", "'native'", "'synchronized'", "'transient'", "'volatile'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'?'", "'super'", "'('", "')'", "'...'", "'this'", "'null'", "'true'", "'false'", "'@'", "'default'", "':'", "'if'", "'else'", "'for'", "'while'", "'do'", "'try'", "'finally'", "'switch'", "'return'", "'throw'", "'break'", "'continue'", "'catch'", "'case'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'||'", "'&&'", "'|'", "'^'", "'=='", "'!='", "'instanceof'", "'+'", "'-'", "'/'", "'%'", "'++'", "'--'", "'~'", "'!'", "'new'"
    };
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int FloatTypeSuffix=16;
    public static final int T__25=25;
    public static final int OctalLiteral=10;
    public static final int EOF=-1;
    public static final int Identifier=4;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__90=90;
    public static final int COMMENT=23;
    public static final int T__99=99;
    public static final int T__98=98;
    public static final int T__97=97;
    public static final int T__96=96;
    public static final int T__95=95;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int LINE_COMMENT=24;
    public static final int IntegerTypeSuffix=14;
    public static final int T__85=85;
    public static final int T__84=84;
    public static final int ASSERT=12;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__89=89;
    public static final int T__88=88;
    public static final int WS=22;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__70=70;
    public static final int FloatingPointLiteral=6;
    public static final int JavaIDDigit=21;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__74=74;
    public static final int Letter=20;
    public static final int EscapeSequence=17;
    public static final int T__73=73;
    public static final int T__79=79;
    public static final int T__78=78;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int CharacterLiteral=7;
    public static final int Exponent=15;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int HexDigit=13;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int HexLiteral=9;
    public static final int T__43=43;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int DecimalLiteral=11;
    public static final int StringLiteral=8;
    public static final int T__30=30;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int T__33=33;
    public static final int ENUM=5;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__36=36;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int UnicodeEscape=18;
    public static final int OctalEscape=19;

    // delegates
    // delegators


        public JavaParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JavaParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[407+1];
             
             
        }
        

    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "src/cedp/src2src/frontend/java/Java.g"; }


    // Copied following options from java grammar.
    int codeGenMakeSwitchThreshold = 2;
    int codeGenBitsetTestThreshold = 3;

    Expression baseEnum = null,curEnum = null;
    JavaLexer curLexer=null;
    boolean isFuncDef = false;
    boolean isExtern = false;
    PreprocessorInfoChannel preprocessorInfoChannel = null;
    SymbolTable symtab = null;
    CompoundStatement curr_cstmt = null;
    boolean hastypedef = false;
    HashMap typetable = null;
    LinkedList currproc = new LinkedList();
    Declaration prev_decl = null;
    boolean old_style_func = false;
    HashMap func_decl_list = new HashMap();

    public List MergeList(List a, List b)
    {
        List ret = new LinkedList();

        for(int i=0; i<a.size(); i++)
            ret.add(a.get(i));

        for(int i=0; i<b.size(); i++)
            ret.add(b.get(i));

        return ret;
    }

    public void getPreprocessorInfoChannel(PreprocessorInfoChannel preprocChannel)
    {
      preprocessorInfoChannel = preprocChannel;
    }

    public void setLexer(JavaLexer lexer)
    {
      curLexer=lexer;
      curLexer.setParser(this);
    }

    public JavaLexer getLexer()
    {
      return curLexer;
    }

    public LinkedList getPragma(int a)
    {
      return
          preprocessorInfoChannel.extractLinesPrecedingTokenNumber(new Integer(a));
    }

    public void putPragma(Token sline, SymbolTable sym)
    {
      LinkedList v  = null;
      v = getPragma(((JavaToken)sline).getTokenNumber());
      Iterator iter = v.iterator();
      Pragma p = null;
      PreAnnotation anote = null;
      while(iter.hasNext()) {
        p = (Pragma)iter.next();
        anote = new PreAnnotation(p.str);
        if (p.type ==Pragma.pragma)
          anote.setPrintMethod(PreAnnotation.print_raw_method);
        else if(p.type ==Pragma.comment)
          anote.setPrintMethod(PreAnnotation.print_raw_method);
        //sym.addStatement(new DeclarationStatement(anote));
        if (sym instanceof CompoundStatement)
          ((CompoundStatement)sym).addStatement(new DeclarationStatement(anote));
        else
          sym.addDeclaration(anote);
      }
    }

    // Suppport C++-style single-line comments?
    public static boolean CPPComments = true;
    public Stack symtabstack = new Stack();
    public Stack typestack = new Stack();

    public void enterSymtab(SymbolTable curr_symtab)
    {
      symtabstack.push(symtab);
      typetable = new HashMap();
      typestack.push(typetable);
      symtab = curr_symtab;
    }

    public void exitSymtab()
    {
      Object o = symtabstack.pop();
      if (o != null) {
        typestack.pop();
        typetable = (HashMap)(typestack.peek());
        symtab = (SymbolTable)o;
      }
    }

    public boolean isTypedefName(String name)
    {
      //System.err.println("Typename "+name);
      int n = typestack.size()-1;
      Object d = null;
      while(n>=0) {
        d = ((HashMap)(typestack.get(n))).get(name);
        if (d != null )
          return true;
        n--;
      }
      if (name.equals("__builtin_va_list"))
        return true;

      //System.err.println("Typename "+name+" not found");
      return false;
    }

    int traceDepth = 0;

    public void reportError(RecognitionException ex)
    {
      try {
        System.err.println("ANTLR Parsing Error: " + "Exception Type: "
            + ex.getClass().getName());
        System.err.println("Source: " + getLexer().lineObject.getSource()
            + " Line:" + ex.getLine() + " Column: " + ex.getColumn()
            + " token name:" + tokenNames[LA(1)]);
        ex.printStackTrace(System.err);
        System.exit(1);
      } catch (TokenStreamException e) {
        System.err.println("ANTLR Parsing Error: "+ex);
        ex.printStackTrace(System.err);
        System.exit(1);
      }
    }

    public void reportError(String s)
    {
      System.err.println("ANTLR Parsing Error from String: " + s);
    }

    public void reportWarning(String s)
    {
      System.err.println("ANTLR Parsing Warning from String: " + s);
    }

    public void match(int t) throws MismatchedTokenException
    {
      boolean debugging = false;
      if ( debugging ) {
        for (int x=0; x<traceDepth; x++)
          System.out.print(" ");
        try {
          System.out.println("Match(" + tokenNames[t] + ") with LA(1)="
              + tokenNames[LA(1)] + ((inputState.guessing>0)?
              " [inputState.guessing " + inputState.guessing + "]":""));
        } catch (TokenStreamException e) {
          System.out.println("Match("+tokenNames[t]+") "
              + ((inputState.guessing>0)?
              " [inputState.guessing "+ inputState.guessing + "]":""));
        }
      }
      try {
        if ( LA(1)!=t ) {
          if ( debugging ) {
            for (int x=0; x<traceDepth; x++)
              System.out.print(" ");
            System.out.println("token mismatch: "+tokenNames[LA(1)]
                + "!=" + tokenNames[t]);
          }
          throw new MismatchedTokenException
              (tokenNames, LT(1), t, false, getFilename());
        } else {
          // mark token as consumed -- fetch next token deferred until LA/LT
          consume();
        }
      } catch (TokenStreamException e) {
      }
    }

    public void traceIn(String rname)
    {
      traceDepth += 1;
      for (int x=0; x<traceDepth; x++)
        System.out.print(" ");
      try {
        System.out.println("> "+rname+"; LA(1)==("+ tokenNames[LT(1).getType()]
            + ") " + LT(1).getText() + " [inputState.guessing "
            + inputState.guessing + "]");
      } catch (TokenStreamException e) {
      }
    }

    public void traceOut(String rname)
    {
      for (int x=0; x<traceDepth; x++)
        System.out.print(" ");
      try {
        System.out.println("< "+rname+"; LA(1)==("+ tokenNames[LT(1).getType()]
            + ") " + LT(1).getText() + " [inputState.guessing "
            + inputState.guessing + "]");
      } catch (TokenStreamException e) {
      }
      traceDepth -= 1;
    }

    boolean dFlag = true;
    Expression prev_expr;



    // $ANTLR start "translationUnit"
    // src/cedp/src2src/frontend/java/Java.g:517:1: translationUnit[TranslationUnit init_tunit] returns [TranslationUnit tunit] : (t1= annotations (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* ) | (t7= packageDeclaration )? (t8= importDeclaration )* (t9= typeDeclaration )* );
    public final TranslationUnit translationUnit(TranslationUnit init_tunit) throws RecognitionException {
        TranslationUnit tunit = null;
        int translationUnit_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;

        Declaration t6 = null;

        Declaration t7 = null;

        Declaration t8 = null;

        Declaration t9 = null;



                if(dFlag) System.out.println("translationUnit");
                /* build a new Translation Unit */
                if (init_tunit == null)
                  tunit = new TranslationUnit(getLexer().originalSource);
                else
                  tunit = init_tunit;
                enterSymtab(tunit);
            
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return tunit; }
            // src/cedp/src2src/frontend/java/Java.g:530:5: (t1= annotations (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* ) | (t7= packageDeclaration )? (t8= importDeclaration )* (t9= typeDeclaration )* )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:530:9: t1= annotations (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* )
                    {
                    pushFollow(FOLLOW_annotations_in_translationUnit119);
                    t1=annotations();

                    state._fsp--;
                    if (state.failed) return tunit;
                    if ( state.backtracking==0 ) {

                                          tunit.addDeclaration(t1);
                                      
                    }
                    // src/cedp/src2src/frontend/java/Java.g:534:9: (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* )
                    int alt4=2;
                    alt4 = dfa4.predict(input);
                    switch (alt4) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:534:13: t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )*
                            {
                            pushFollow(FOLLOW_packageDeclaration_in_translationUnit153);
                            t2=packageDeclaration();

                            state._fsp--;
                            if (state.failed) return tunit;
                            if ( state.backtracking==0 ) {

                                                  tunit.addDeclaration(t2);
                                              
                            }
                            // src/cedp/src2src/frontend/java/Java.g:538:13: (t3= importDeclaration )*
                            loop1:
                            do {
                                int alt1=2;
                                alt1 = dfa1.predict(input);
                                switch (alt1) {
                            	case 1 :
                            	    // src/cedp/src2src/frontend/java/Java.g:538:14: t3= importDeclaration
                            	    {
                            	    pushFollow(FOLLOW_importDeclaration_in_translationUnit188);
                            	    t3=importDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return tunit;
                            	    if ( state.backtracking==0 ) {

                            	                          tunit.addDeclaration(t3);
                            	                      
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop1;
                                }
                            } while (true);

                            // src/cedp/src2src/frontend/java/Java.g:543:13: (t4= typeDeclaration )*
                            loop2:
                            do {
                                int alt2=2;
                                alt2 = dfa2.predict(input);
                                switch (alt2) {
                            	case 1 :
                            	    // src/cedp/src2src/frontend/java/Java.g:543:14: t4= typeDeclaration
                            	    {
                            	    pushFollow(FOLLOW_typeDeclaration_in_translationUnit238);
                            	    t4=typeDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return tunit;
                            	    if ( state.backtracking==0 ) {

                            	                          tunit.addDeclaration(t4);
                            	                      
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop2;
                                }
                            } while (true);


                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:548:13: t5= classOrInterfaceDeclaration (t6= typeDeclaration )*
                            {
                            pushFollow(FOLLOW_classOrInterfaceDeclaration_in_translationUnit287);
                            t5=classOrInterfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return tunit;
                            if ( state.backtracking==0 ) {

                                                  tunit.addDeclaration(t5);
                                              
                            }
                            // src/cedp/src2src/frontend/java/Java.g:552:13: (t6= typeDeclaration )*
                            loop3:
                            do {
                                int alt3=2;
                                alt3 = dfa3.predict(input);
                                switch (alt3) {
                            	case 1 :
                            	    // src/cedp/src2src/frontend/java/Java.g:552:14: t6= typeDeclaration
                            	    {
                            	    pushFollow(FOLLOW_typeDeclaration_in_translationUnit322);
                            	    t6=typeDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return tunit;
                            	    if ( state.backtracking==0 ) {

                            	                              tunit.addDeclaration(t6);
                            	                      
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop3;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:558:9: (t7= packageDeclaration )? (t8= importDeclaration )* (t9= typeDeclaration )*
                    {
                    // src/cedp/src2src/frontend/java/Java.g:558:9: (t7= packageDeclaration )?
                    int alt5=2;
                    alt5 = dfa5.predict(input);
                    switch (alt5) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:558:10: t7= packageDeclaration
                            {
                            pushFollow(FOLLOW_packageDeclaration_in_translationUnit378);
                            t7=packageDeclaration();

                            state._fsp--;
                            if (state.failed) return tunit;
                            if ( state.backtracking==0 ) {

                                                  tunit.addDeclaration(t7);
                                              
                            }

                            }
                            break;

                    }

                    // src/cedp/src2src/frontend/java/Java.g:563:9: (t8= importDeclaration )*
                    loop6:
                    do {
                        int alt6=2;
                        alt6 = dfa6.predict(input);
                        switch (alt6) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:563:10: t8= importDeclaration
                    	    {
                    	    pushFollow(FOLLOW_importDeclaration_in_translationUnit420);
                    	    t8=importDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return tunit;
                    	    if ( state.backtracking==0 ) {

                    	                          tunit.addDeclaration(t8);
                    	                      
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop6;
                        }
                    } while (true);

                    // src/cedp/src2src/frontend/java/Java.g:568:9: (t9= typeDeclaration )*
                    loop7:
                    do {
                        int alt7=2;
                        alt7 = dfa7.predict(input);
                        switch (alt7) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:568:10: t9= typeDeclaration
                    	    {
                    	    pushFollow(FOLLOW_typeDeclaration_in_translationUnit462);
                    	    t9=typeDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return tunit;
                    	    if ( state.backtracking==0 ) {

                    	                          tunit.addDeclaration(t9);
                    	                      
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop7;
                        }
                    } while (true);


                    }
                    break;

            }
            if ( state.backtracking==0 ) {

                      exitSymtab();
                  
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, translationUnit_StartIndex); }
        }
        return tunit;
    }
    // $ANTLR end "translationUnit"


    // $ANTLR start "packageDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:576:1: packageDeclaration returns [Declaration ret_decl] : 'package' qualifiedName ';' ;
    public final Declaration packageDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int packageDeclaration_StartIndex = input.index();
        JavaParser.qualifiedName_return qualifiedName1 = null;


         if(dFlag) System.out.println("packageDeclaration"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:578:5: ( 'package' qualifiedName ';' )
            // src/cedp/src2src/frontend/java/Java.g:578:9: 'package' qualifiedName ';'
            {
            match(input,25,FOLLOW_25_in_packageDeclaration525); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration527);
            qualifiedName1=qualifiedName();

            state._fsp--;
            if (state.failed) return ret_decl;
            match(input,26,FOLLOW_26_in_packageDeclaration529); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("package"));
                              list.add(new StringDeclaration((qualifiedName1!=null?input.toString(qualifiedName1.start,qualifiedName1.stop):null)));
                              list.add(new StringDeclaration(";"));
                              ret_decl = new StringDeclaration(list);

                              //CodeAnnotation anno = new CodeAnnotation("package " + (qualifiedName1!=null?input.toString(qualifiedName1.start,qualifiedName1.stop):null));
                              //ret_decl = new AnnotationDeclaration(anno);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, packageDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "packageDeclaration"


    // $ANTLR start "importDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:591:1: importDeclaration returns [Declaration ret_decl] : 'import' ( 'static' )? t1= qualifiedName ( '.' '*' )? ';' ;
    public final Declaration importDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int importDeclaration_StartIndex = input.index();
        JavaParser.qualifiedName_return t1 = null;


         if(dFlag) System.out.println("importDeclaration"); List list = new LinkedList();
                    // int check1=0, check2=0;
                  
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:595:5: ( 'import' ( 'static' )? t1= qualifiedName ( '.' '*' )? ';' )
            // src/cedp/src2src/frontend/java/Java.g:595:9: 'import' ( 'static' )? t1= qualifiedName ( '.' '*' )? ';'
            {
            match(input,27,FOLLOW_27_in_importDeclaration577); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("import"));
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:599:9: ( 'static' )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==28) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:599:10: 'static'
                    {
                    match(input,28,FOLLOW_28_in_importDeclaration603); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      //check1 = 1;
                                      list.add(new StringDeclaration("static"));
                                  
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifiedName_in_importDeclaration640);
            t1=qualifiedName();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:609:9: ( '.' '*' )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==29) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:609:10: '.' '*'
                    {
                    match(input,29,FOLLOW_29_in_importDeclaration665); if (state.failed) return ret_decl;
                    match(input,30,FOLLOW_30_in_importDeclaration667); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      //check2 = 1;
                                      list.add(new StringDeclaration(".*");
                                  
                    }

                    }
                    break;

            }

            match(input,26,FOLLOW_26_in_importDeclaration694); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration(";");
                              ret_decl = new StringDeclaration(list);

                              //CodeAnnotation anno = new CodeAnnotation("import " + ((check1==1)?"static ":"") + (t1!=null?input.toString(t1.start,t1.stop):null) + ((check2==1)?".*":"") + ";");
                              //ret_decl = new AnnotationDeclaration(anno);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, importDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "importDeclaration"


    // $ANTLR start "typeDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:625:1: typeDeclaration returns [Declaration ret_decl] : (t1= classOrInterfaceDeclaration | ';' );
    public final Declaration typeDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int typeDeclaration_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("typeDeclaration"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:627:5: (t1= classOrInterfaceDeclaration | ';' )
            int alt11=2;
            alt11 = dfa11.predict(input);
            switch (alt11) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:627:9: t1= classOrInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration744);
                    t1=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:631:9: ';'
                    {
                    match(input,26,FOLLOW_26_in_typeDeclaration768); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      //ret_decl = null;
                                      ret_decl = new StringDeclaration(";");
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, typeDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "typeDeclaration"


    // $ANTLR start "classOrInterfaceDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:639:1: classOrInterfaceDeclaration returns [Declaration ret_decl] : t1= classOrInterfaceModifiers (t2= classDeclaration | t3= interfaceDeclaration ) ;
    public final Declaration classOrInterfaceDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int classOrInterfaceDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("classOrInterfaceDeclaration"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:641:5: (t1= classOrInterfaceModifiers (t2= classDeclaration | t3= interfaceDeclaration ) )
            // src/cedp/src2src/frontend/java/Java.g:641:9: t1= classOrInterfaceModifiers (t2= classDeclaration | t3= interfaceDeclaration )
            {
            pushFollow(FOLLOW_classOrInterfaceModifiers_in_classOrInterfaceDeclaration818);
            t1=classOrInterfaceModifiers();

            state._fsp--;
            if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:642:9: (t2= classDeclaration | t3= interfaceDeclaration )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ENUM||LA12_0==37) ) {
                alt12=1;
            }
            else if ( (LA12_0==46||LA12_0==73) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:642:10: t2= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration831);
                    t2=classDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      list.add(t2);
                                      ret_decl = new StringDeclaration(list);
                      //                t2.SetClassSpec(t1);
                      //                ret_decl = (Declaration) t2;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:650:11: t3= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration859);
                    t3=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      list.add(t3);
                                      ret_decl = new StringDeclaration(list);
                      //                t3.SetClassSpec(t1);
                      //                ret_decl = (Declaration) t3;
                                  
                    }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, classOrInterfaceDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "classOrInterfaceDeclaration"


    // $ANTLR start "classOrInterfaceModifiers"
    // src/cedp/src2src/frontend/java/Java.g:662:1: classOrInterfaceModifiers returns [Declaration ret_decl] : (t1= classOrInterfaceModifier )* ;
    public final Declaration classOrInterfaceModifiers() throws RecognitionException {
        Declaration ret_decl = null;
        int classOrInterfaceModifiers_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("classOrInterfaceModifiers");  List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:664:5: ( (t1= classOrInterfaceModifier )* )
            // src/cedp/src2src/frontend/java/Java.g:664:9: (t1= classOrInterfaceModifier )*
            {
            // src/cedp/src2src/frontend/java/Java.g:664:9: (t1= classOrInterfaceModifier )*
            loop13:
            do {
                int alt13=2;
                alt13 = dfa13.predict(input);
                switch (alt13) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:664:10: t1= classOrInterfaceModifier
            	    {
            	    pushFollow(FOLLOW_classOrInterfaceModifier_in_classOrInterfaceModifiers921);
            	    t1=classOrInterfaceModifier();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1); // original
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, classOrInterfaceModifiers_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "classOrInterfaceModifiers"


    // $ANTLR start "classOrInterfaceModifier"
    // src/cedp/src2src/frontend/java/Java.g:675:1: classOrInterfaceModifier returns [Declaration ret_decl] : (t1= annotation | 'public' | 'protected' | 'private' | 'abstract' | 'static' | 'final' | 'strictfp' );
    public final Declaration classOrInterfaceModifier() throws RecognitionException {
        Declaration ret_decl = null;
        int classOrInterfaceModifier_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("classOrInterfaceModifier"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:677:5: (t1= annotation | 'public' | 'protected' | 'private' | 'abstract' | 'static' | 'final' | 'strictfp' )
            int alt14=8;
            switch ( input.LA(1) ) {
            case 73:
                {
                alt14=1;
                }
                break;
            case 31:
                {
                alt14=2;
                }
                break;
            case 32:
                {
                alt14=3;
                }
                break;
            case 33:
                {
                alt14=4;
                }
                break;
            case 34:
                {
                alt14=5;
                }
                break;
            case 28:
                {
                alt14=6;
                }
                break;
            case 35:
                {
                alt14=7;
                }
                break;
            case 36:
                {
                alt14=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }

            switch (alt14) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:677:9: t1= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_classOrInterfaceModifier997);
                    t1=annotation();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                  //    type = t1;
                                      ret_decl = 51;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:682:9: 'public'
                    {
                    match(input,31,FOLLOW_31_in_classOrInterfaceModifier1024); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      //type = Specifier.PUBLIC;
                                      ret_decl = new StringDeclaration("public");
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:687:9: 'protected'
                    {
                    match(input,32,FOLLOW_32_in_classOrInterfaceModifier1053); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      //type = Specifier.PROTECTED;
                                      ret_decl = new StringDeclaration("protected");
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:692:9: 'private'
                    {
                    match(input,33,FOLLOW_33_in_classOrInterfaceModifier1079); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      //type = Specifier.PRIVATE;
                                      ret_decl = new StringDeclaration("private");
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:697:9: 'abstract'
                    {
                    match(input,34,FOLLOW_34_in_classOrInterfaceModifier1107); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      //type = Specifier.ABSTRACT;
                                      ret_decl = new StringDeclaration("abstract");
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:702:9: 'static'
                    {
                    match(input,28,FOLLOW_28_in_classOrInterfaceModifier1134); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      //type = Specifier.STATIC;
                                      ret_decl = new StringDeclaration("static");
                                  
                    }

                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:707:9: 'final'
                    {
                    match(input,35,FOLLOW_35_in_classOrInterfaceModifier1163); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      //type = Specifier.FINAL;
                                      ret_decl = new StringDeclaration("final");
                                  
                    }

                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:712:9: 'strictfp'
                    {
                    match(input,36,FOLLOW_36_in_classOrInterfaceModifier1193); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      //type = Specifier.STRICTFP;
                                      ret_decl = new StringDeclaration("strictfp");
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, classOrInterfaceModifier_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "classOrInterfaceModifier"


    // $ANTLR start "modifiers"
    // src/cedp/src2src/frontend/java/Java.g:720:1: modifiers returns [Declaration ret_decl] : (t1= modifier )* ;
    public final Declaration modifiers() throws RecognitionException {
        Declaration ret_decl = null;
        int modifiers_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("modifiers"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:722:5: ( (t1= modifier )* )
            // src/cedp/src2src/frontend/java/Java.g:722:9: (t1= modifier )*
            {
            // src/cedp/src2src/frontend/java/Java.g:722:9: (t1= modifier )*
            loop15:
            do {
                int alt15=2;
                alt15 = dfa15.predict(input);
                switch (alt15) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:722:10: t1= modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifiers1248);
            	    t1=modifier();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      //list.add(t1);
            	                      ret_decl = t1;
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, modifiers_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "modifiers"


    // $ANTLR start "classDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:731:1: classDeclaration returns [Declaration ret_decl] : (t1= normalClassDeclaration | t2= enumDeclaration );
    public final Declaration classDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int classDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("classDeclaration"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:733:5: (t1= normalClassDeclaration | t2= enumDeclaration )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==37) ) {
                alt16=1;
            }
            else if ( (LA16_0==ENUM) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:733:9: t1= normalClassDeclaration
                    {
                    pushFollow(FOLLOW_normalClassDeclaration_in_classDeclaration1310);
                    t1=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:737:9: t2= enumDeclaration
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_classDeclaration1336);
                    t2=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t2;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, classDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "classDeclaration"


    // $ANTLR start "normalClassDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:744:1: normalClassDeclaration returns [Declaration ret_decl] : 'class' Identifier (t1= typeParameters )? ( 'extends' t2= type )? ( 'implements' t3= typeList )? t4= classBody ;
    public final Declaration normalClassDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int normalClassDeclaration_StartIndex = input.index();
        Token Identifier2=null;
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;


         if(dFlag) System.out.println("normalClassDeclaration"); int check1 = 0; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:746:5: ( 'class' Identifier (t1= typeParameters )? ( 'extends' t2= type )? ( 'implements' t3= typeList )? t4= classBody )
            // src/cedp/src2src/frontend/java/Java.g:746:9: 'class' Identifier (t1= typeParameters )? ( 'extends' t2= type )? ( 'implements' t3= typeList )? t4= classBody
            {
            match(input,37,FOLLOW_37_in_normalClassDeclaration1385); if (state.failed) return ret_decl;
            Identifier2=(Token)match(input,Identifier,FOLLOW_Identifier_in_normalClassDeclaration1387); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("class"));
                              list.add(new StringDeclaration((Identifier2!=null?Identifier2.getText():null)));
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:751:9: (t1= typeParameters )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==40) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:751:10: t1= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalClassDeclaration1415);
                    t1=typeParameters();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                  
                    }

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:756:9: ( 'extends' t2= type )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==38) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:756:10: 'extends' t2= type
                    {
                    match(input,38,FOLLOW_38_in_normalClassDeclaration1451); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_type_in_normalClassDeclaration1455);
                    t2=type();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      //check1 = 1;
                                      list.add(new StringDeclaration("extends"));
                                      list.add(t2);
                                  
                    }

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:763:9: ( 'implements' t3= typeList )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==39) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:763:10: 'implements' t3= typeList
                    {
                    match(input,39,FOLLOW_39_in_normalClassDeclaration1491); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_typeList_in_normalClassDeclaration1495);
                    t3=typeList();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      //check1 = 1;
                                      list.add(new StringDeclaration("implements"));
                                      list.add(t3);
                                  
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalClassDeclaration1532);
            t4=classBody();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t4);
                              ret_decl = new StringDeclaration(list);
                              //ret_decl = new ClassDeclaration(ClassDeclaration.CLASS, new NameID((Identifier2!=null?Identifier2.getText():null)));
                              //ret_decl.SetBodyStatement(t1);
                              /* TODO extends and implments supports */
                              //if(check1 == 1)
                              //    ret_decl.addBaseInterface(t2); // t2 is List of Specifier
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, normalClassDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "normalClassDeclaration"


    // $ANTLR start "typeParameters"
    // src/cedp/src2src/frontend/java/Java.g:782:1: typeParameters returns [Declaration ret_decl] : '<' t1= typeParameter ( ',' t2= typeParameter )* '>' ;
    public final Declaration typeParameters() throws RecognitionException {
        Declaration ret_decl = null;
        int typeParameters_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("typeParameters"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:784:5: ( '<' t1= typeParameter ( ',' t2= typeParameter )* '>' )
            // src/cedp/src2src/frontend/java/Java.g:784:9: '<' t1= typeParameter ( ',' t2= typeParameter )* '>'
            {
            match(input,40,FOLLOW_40_in_typeParameters1579); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_typeParameter_in_typeParameters1583);
            t1=typeParameter();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("<"));
                              list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:789:9: ( ',' t2= typeParameter )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==41) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:789:10: ',' t2= typeParameter
            	    {
            	    match(input,41,FOLLOW_41_in_typeParameters1608); if (state.failed) return ret_decl;
            	    pushFollow(FOLLOW_typeParameter_in_typeParameters1612);
            	    t2=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration(","));
            	                      list.add(t2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            match(input,42,FOLLOW_42_in_typeParameters1639); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration(">"));
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, typeParameters_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "typeParameters"


    // $ANTLR start "typeParameter"
    // src/cedp/src2src/frontend/java/Java.g:801:1: typeParameter returns [Declaration ret_decl] : Identifier ( 'extends' t1= typeBound )? ;
    public final Declaration typeParameter() throws RecognitionException {
        Declaration ret_decl = null;
        int typeParameter_StartIndex = input.index();
        Token Identifier3=null;
        Declaration t1 = null;


         if(dFlag) System.out.println("typeParameter"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:803:5: ( Identifier ( 'extends' t1= typeBound )? )
            // src/cedp/src2src/frontend/java/Java.g:803:9: Identifier ( 'extends' t1= typeBound )?
            {
            Identifier3=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeParameter1686); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              ret_decl = new StringDeclaration((Identifier3!=null?Identifier3.getText():null))
                              list.add(ret_decl);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:808:9: ( 'extends' t1= typeBound )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==38) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:808:10: 'extends' t1= typeBound
                    {
                    match(input,38,FOLLOW_38_in_typeParameter1712); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_typeBound_in_typeParameter1716);
                    t1=typeBound();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("extends");
                                      list.add(t1);
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, typeParameter_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "typeParameter"


    // $ANTLR start "typeBound"
    // src/cedp/src2src/frontend/java/Java.g:817:1: typeBound returns [Declaration ret_decl] : t1= type ( '&' t2= type )* ;
    public final Declaration typeBound() throws RecognitionException {
        Declaration ret_decl = null;
        int typeBound_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("typeBound"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:819:5: (t1= type ( '&' t2= type )* )
            // src/cedp/src2src/frontend/java/Java.g:819:9: t1= type ( '&' t2= type )*
            {
            pushFollow(FOLLOW_type_in_typeBound1776);
            t1=type();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              ret_decl = t1;
                              list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:824:9: ( '&' t2= type )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==43) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:824:10: '&' t2= type
            	    {
            	    match(input,43,FOLLOW_43_in_typeBound1801); if (state.failed) return ret_decl;
            	    pushFollow(FOLLOW_type_in_typeBound1805);
            	    t2=type();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration("&"));
            	                      list.add(t2);
            	                      ret_decl = new StringDeclaration(list);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, typeBound_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "typeBound"


    // $ANTLR start "enumDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:833:1: enumDeclaration returns [Declaration ret_decl] : t1= ENUM Identifier ( 'implements' t2= typeList )? t3= enumBody ;
    public final Declaration enumDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int enumDeclaration_StartIndex = input.index();
        Token t1=null;
        Token Identifier4=null;
        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("enumDeclaration"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:835:5: (t1= ENUM Identifier ( 'implements' t2= typeList )? t3= enumBody )
            // src/cedp/src2src/frontend/java/Java.g:835:9: t1= ENUM Identifier ( 'implements' t2= typeList )? t3= enumBody
            {
            t1=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration1865); if (state.failed) return ret_decl;
            Identifier4=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumDeclaration1867); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(new StringDeclaration((Identifier4!=null?Identifier4.getText():null)));
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:840:9: ( 'implements' t2= typeList )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==39) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:840:10: 'implements' t2= typeList
                    {
                    match(input,39,FOLLOW_39_in_enumDeclaration1892); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_typeList_in_enumDeclaration1896);
                    t2=typeList();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("implements");
                                      list.add(t2);
                                  
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration1925);
            t3=enumBody();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t3);
                              ret_decl = new StringDeclaration(list);
                              //ret_decl = new ClassDeclaration(Specifier.ENUM, new NameID((Identifier4!=null?Identifier4.getText():null)));
                              //for(int i=0; i<t1.size(); i++)
                              //    ret_decl.addDeclaration(t1.get(i));
                              /* TODO implements support */
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, enumDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "enumDeclaration"


    // $ANTLR start "enumBody"
    // src/cedp/src2src/frontend/java/Java.g:856:1: enumBody returns [Declaration ret_decl] : '{' (t1= enumConstants )? ( ',' )? (t2= enumBodyDeclarations )? '}' ;
    public final Declaration enumBody() throws RecognitionException {
        Declaration ret_decl = null;
        int enumBody_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("enumBody"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:858:5: ( '{' (t1= enumConstants )? ( ',' )? (t2= enumBodyDeclarations )? '}' )
            // src/cedp/src2src/frontend/java/Java.g:858:9: '{' (t1= enumConstants )? ( ',' )? (t2= enumBodyDeclarations )? '}'
            {
            match(input,44,FOLLOW_44_in_enumBody1972); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("{"));
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:862:9: (t1= enumConstants )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==Identifier||LA24_0==73) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:862:10: t1= enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody1999);
                    t1=enumConstants();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      //for(int i=0; i<t1.size(); i++)
                                      //    list.add(t1.get(i));
                                  
                    }

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:869:9: ( ',' )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==41) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:869:10: ','
                    {
                    match(input,41,FOLLOW_41_in_enumBody2036); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration(","));
                                  
                    }

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:874:9: (t2= enumBodyDeclarations )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==26) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:874:10: t2= enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody2074);
                    t2=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t2);
                                      /* TODO */
                                      //list = new LinkedList();
                                  
                    }

                    }
                    break;

            }

            match(input,45,FOLLOW_45_in_enumBody2109); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("}"));
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, enumBody_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "enumBody"


    // $ANTLR start "enumConstants"
    // src/cedp/src2src/frontend/java/Java.g:888:1: enumConstants returns [Declaration ret_decl] : t1= enumConstant ( ',' t2= enumConstant )* ;
    public final Declaration enumConstants() throws RecognitionException {
        Declaration ret_decl = null;
        int enumConstants_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("enumConstants"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:890:5: (t1= enumConstant ( ',' t2= enumConstant )* )
            // src/cedp/src2src/frontend/java/Java.g:890:9: t1= enumConstant ( ',' t2= enumConstant )*
            {
            pushFollow(FOLLOW_enumConstant_in_enumConstants2158);
            t1=enumConstant();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              ret_decl = t1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:895:9: ( ',' t2= enumConstant )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==41) ) {
                    int LA27_1 = input.LA(2);

                    if ( (LA27_1==Identifier||LA27_1==73) ) {
                        alt27=1;
                    }


                }


                switch (alt27) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:895:10: ',' t2= enumConstant
            	    {
            	    match(input,41,FOLLOW_41_in_enumConstants2183); if (state.failed) return ret_decl;
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants2187);
            	    t2=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration(","));
            	                      list.add(t2);
            	                      ret_decl = new StringDeclaration(list);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, enumConstants_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "enumConstants"


    // $ANTLR start "enumConstant"
    // src/cedp/src2src/frontend/java/Java.g:904:1: enumConstant returns [Declaration ret_decl] : (t1= annotations )? Identifier (t2= arguments )? (t3= classBody )? ;
    public final Declaration enumConstant() throws RecognitionException {
        Declaration ret_decl = null;
        int enumConstant_StartIndex = input.index();
        Token Identifier5=null;
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("enumConstant"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:906:5: ( (t1= annotations )? Identifier (t2= arguments )? (t3= classBody )? )
            // src/cedp/src2src/frontend/java/Java.g:906:9: (t1= annotations )? Identifier (t2= arguments )? (t3= classBody )?
            {
            // src/cedp/src2src/frontend/java/Java.g:906:9: (t1= annotations )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==73) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:906:10: t1= annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant2248);
                    t1=annotations();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                  
                    }

                    }
                    break;

            }

            Identifier5=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstant2275); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:910:25: (t2= arguments )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==66) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:0:0: t2= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant2279);
                    t2=arguments();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:910:39: (t3= classBody )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==44) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:0:0: t3= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant2284);
                    t3=classBody();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration((Identifier5!=null?Identifier5.getText():null)));
                              if(t2 != null)
                                  list.add(t2);
                              if(t3 != null)
                                  list.add(t3);
                              ret_decl = new StringDeclaration(list);
                              //ret_decl = new VariableDeclarator((Identifier5!=null?Identifier5.getText():null));
                              /* TODO */
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, enumConstant_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "enumConstant"


    // $ANTLR start "enumBodyDeclarations"
    // src/cedp/src2src/frontend/java/Java.g:923:1: enumBodyDeclarations returns [Declaration ret_decl] : ';' (t1= classBodyDeclaration )* ;
    public final Declaration enumBodyDeclarations() throws RecognitionException {
        Declaration ret_decl = null;
        int enumBodyDeclarations_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("enumBodyDeclarations"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:925:5: ( ';' (t1= classBodyDeclaration )* )
            // src/cedp/src2src/frontend/java/Java.g:925:9: ';' (t1= classBodyDeclaration )*
            {
            match(input,26,FOLLOW_26_in_enumBodyDeclarations2332); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              ret_decl = new StringDeclaration(";");
                              list.add(ret_decl);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:930:9: (t1= classBodyDeclaration )*
            loop31:
            do {
                int alt31=2;
                alt31 = dfa31.predict(input);
                switch (alt31) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:930:10: t1= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations2360);
            	    t1=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1);
            	                      ret_decl = new StringDeclaration(list);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, enumBodyDeclarations_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "enumBodyDeclarations"


    // $ANTLR start "interfaceDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:938:1: interfaceDeclaration returns [Declaration ret_decl] : (t1= normalInterfaceDeclaration | t2= annotationTypeDeclaration );
    public final Declaration interfaceDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("interfaceDeclaration"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:940:5: (t1= normalInterfaceDeclaration | t2= annotationTypeDeclaration )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==46) ) {
                alt32=1;
            }
            else if ( (LA32_0==73) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:940:9: t1= normalInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration2420);
                    t1=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:944:9: t2= annotationTypeDeclaration
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration2446);
                    t2=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t2;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, interfaceDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceDeclaration"


    // $ANTLR start "normalInterfaceDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:950:1: normalInterfaceDeclaration returns [Declaration ret_decl] : 'interface' Identifier (t1= typeParameters )? ( 'extends' t2= typeList )? t3= interfaceBody ;
    public final Declaration normalInterfaceDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int normalInterfaceDeclaration_StartIndex = input.index();
        Token Identifier6=null;
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("normalInterfaceDeclaration"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:952:5: ( 'interface' Identifier (t1= typeParameters )? ( 'extends' t2= typeList )? t3= interfaceBody )
            // src/cedp/src2src/frontend/java/Java.g:952:9: 'interface' Identifier (t1= typeParameters )? ( 'extends' t2= typeList )? t3= interfaceBody
            {
            match(input,46,FOLLOW_46_in_normalInterfaceDeclaration2493); if (state.failed) return ret_decl;
            Identifier6=(Token)match(input,Identifier,FOLLOW_Identifier_in_normalInterfaceDeclaration2495); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:952:34: (t1= typeParameters )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==40) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:0:0: t1= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration2499);
                    t1=typeParameters();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:952:51: ( 'extends' t2= typeList )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==38) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:952:52: 'extends' t2= typeList
                    {
                    match(input,38,FOLLOW_38_in_normalInterfaceDeclaration2503); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration2507);
                    t2=typeList();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration2513);
            t3=interfaceBody();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("interface"));
                              list.add(new StringDeclaration((Identifier6!=null?Identifier6.getText():null)));
                              if(t1 != null)
                                  list.add(t1);
                              if(t2 != null){
                                  list.add(new StringDeclaration("extends"));
                                  list.add(t2);
                              }
                              list.add(t3);
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, normalInterfaceDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "normalInterfaceDeclaration"


    // $ANTLR start "typeList"
    // src/cedp/src2src/frontend/java/Java.g:967:1: typeList returns [Declaration ret_decl] : t1= type ( ',' t2= type )* ;
    public final Declaration typeList() throws RecognitionException {
        Declaration ret_decl = null;
        int typeList_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("typeList"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:969:5: (t1= type ( ',' t2= type )* )
            // src/cedp/src2src/frontend/java/Java.g:969:9: t1= type ( ',' t2= type )*
            {
            pushFollow(FOLLOW_type_in_typeList2562);
            t1=type();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              ret_decl = t1;
                              list.add(t1);
                              //list = t1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:975:9: ( ',' t2= type )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==41) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:975:10: ',' t2= type
            	    {
            	    match(input,41,FOLLOW_41_in_typeList2587); if (state.failed) return ret_decl;
            	    pushFollow(FOLLOW_type_in_typeList2591);
            	    t2=type();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration(","));
            	                      list.add(t2);
            	                      ret_decl = new StringDeclaration(list);
            	                      //for(int i=0; i<t2.size(); i++)
            	                      //    list.add(t2.get(i));
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, typeList_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "typeList"


    // $ANTLR start "classBody"
    // src/cedp/src2src/frontend/java/Java.g:986:1: classBody returns [Declaration ret_decl] : '{' (t1= classBodyDeclaration )* '}' ;
    public final Declaration classBody() throws RecognitionException {
        Declaration ret_decl = null;
        int classBody_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("classBody"); ret_stat = new CompoundStatement(); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:988:5: ( '{' (t1= classBodyDeclaration )* '}' )
            // src/cedp/src2src/frontend/java/Java.g:988:9: '{' (t1= classBodyDeclaration )* '}'
            {
            match(input,44,FOLLOW_44_in_classBody2649); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:988:13: (t1= classBodyDeclaration )*
            loop36:
            do {
                int alt36=2;
                alt36 = dfa36.predict(input);
                switch (alt36) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:988:15: t1= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody2655);
            	    t1=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                          list.add(t1);
            	                          //if(t1 != null)
            	                          //    ret_stat.addDeclaration((Declaration)t1);
            	                      
            	    }

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);

            match(input,45,FOLLOW_45_in_classBody2687); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                                  list.addFirst(new StringDeclaration("{"));
                                  list.addLast(new StringDeclaration("}"));
                                  ret_decl = new StringDeclaration(list);
                              
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, classBody_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "classBody"


    // $ANTLR start "interfaceBody"
    // src/cedp/src2src/frontend/java/Java.g:1002:1: interfaceBody returns [Declaration ret_decl] : '{' (t1= interfaceBodyDeclaration )* '}' ;
    public final Declaration interfaceBody() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceBody_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("interfaceBody"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1004:5: ( '{' (t1= interfaceBodyDeclaration )* '}' )
            // src/cedp/src2src/frontend/java/Java.g:1004:9: '{' (t1= interfaceBodyDeclaration )* '}'
            {
            match(input,44,FOLLOW_44_in_interfaceBody2738); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1004:13: (t1= interfaceBodyDeclaration )*
            loop37:
            do {
                int alt37=2;
                alt37 = dfa37.predict(input);
                switch (alt37) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1004:14: t1= interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody2743);
            	    t1=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                          list.add(t1);
            	                      
            	    }

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);

            match(input,45,FOLLOW_45_in_interfaceBody2774); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                                  list.addFirst(new StringDeclaration("{"));
                                  list.addLast(new StringDeclaration("}"));
                                  ret_decl = new StringDeclaration(list);
                              
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, interfaceBody_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceBody"


    // $ANTLR start "classBodyDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:1016:1: classBodyDeclaration returns [Declaration ret_decl] : ( ';' | ( 'static' )? t1= block | t3= modifiers t4= memberDecl );
    public final Declaration classBodyDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int classBodyDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t3 = null;

        Declaration t4 = null;


         if(dFlag) System.out.println("classBodyDeclaration"); int check; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1018:5: ( ';' | ( 'static' )? t1= block | t3= modifiers t4= memberDecl )
            int alt39=3;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1018:9: ';'
                    {
                    match(input,26,FOLLOW_26_in_classBodyDeclaration2825); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration(";");
                                      //ret_decl = null;
                                      //ret_decl = new NullStatement();
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1024:9: ( 'static' )? t1= block
                    {
                    if ( state.backtracking==0 ) {
                      check=0;
                    }
                    // src/cedp/src2src/frontend/java/Java.g:1024:20: ( 'static' )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==28) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1024:21: 'static'
                            {
                            match(input,28,FOLLOW_28_in_classBodyDeclaration2852); if (state.failed) return ret_decl;
                            if ( state.backtracking==0 ) {
                              check=1;
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration2860);
                    t1=block();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      if(check == 1){
                                          list.add(new StringDeclaration("static"));
                                          list.add(t1);
                                          ret_decl = new StringDeclaration(list);
                                          //ret_decl = t1;  /* Need to handle 'static' */
                                      }
                                      else
                                          ret_decl = t1;
                                          //ret_decl = t2;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:1036:9: t3= modifiers t4= memberDecl
                    {
                    pushFollow(FOLLOW_modifiers_in_classBodyDeclaration2886);
                    t3=modifiers();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_memberDecl_in_classBodyDeclaration2890);
                    t4=memberDecl();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t3);
                                      list.add(t4);
                                      ret_decl = new StringDeclaration(list);
                                      //ret_decl = t4;
                                      /* TODO t3? */
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, classBodyDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "classBodyDeclaration"


    // $ANTLR start "memberDecl"
    // src/cedp/src2src/frontend/java/Java.g:1046:1: memberDecl returns [Declaration ret_decl] : (t1= genericMethodOrConstructorDecl | t2= memberDeclaration | 'void' Identifier t3= voidMethodDeclaratorRest | Identifier t4= constructorDeclaratorRest | t5= interfaceDeclaration | t6= classDeclaration );
    public final Declaration memberDecl() throws RecognitionException {
        Declaration ret_decl = null;
        int memberDecl_StartIndex = input.index();
        Token Identifier7=null;
        Token Identifier8=null;
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;

        Declaration t6 = null;


         if(dFlag) System.out.println("memberDecl"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1048:5: (t1= genericMethodOrConstructorDecl | t2= memberDeclaration | 'void' Identifier t3= voidMethodDeclaratorRest | Identifier t4= constructorDeclaratorRest | t5= interfaceDeclaration | t6= classDeclaration )
            int alt40=6;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1048:9: t1= genericMethodOrConstructorDecl
                    {
                    pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_memberDecl2939);
                    t1=genericMethodOrConstructorDecl();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1052:9: t2= memberDeclaration
                    {
                    pushFollow(FOLLOW_memberDeclaration_in_memberDecl2965);
                    t2=memberDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t2;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:1056:9: 'void' Identifier t3= voidMethodDeclaratorRest
                    {
                    match(input,47,FOLLOW_47_in_memberDecl2989); if (state.failed) return ret_decl;
                    Identifier7=(Token)match(input,Identifier,FOLLOW_Identifier_in_memberDecl2991); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_voidMethodDeclaratorRest_in_memberDecl2995);
                    t3=voidMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("void"));
                                      list.add(new StringDeclaration((Identifier7!=null?Identifier7.getText():null)));
                                      list.add(t3);
                                      ret_decl = new StringDeclaration(list);

                                      //List l1 = new LinkedList();
                                      //li.add(Specifier.VOID);
                                      //ProcedureDeclarator pdecl = new ProcedureDeclarator(l1, new NameID((Identifier7!=null?Identifier7.getText():null)), (List)t3.get(0));
                                      //ret_decl = new Procedure(Specifier.VOID, pdecl, (t3.size()>1)?t3.get(1):null);
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:1068:9: Identifier t4= constructorDeclaratorRest
                    {
                    Identifier8=(Token)match(input,Identifier,FOLLOW_Identifier_in_memberDecl3019); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_memberDecl3023);
                    t4=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration((Identifier8!=null?Identifier8.getText():null)));
                                      list.add(t4);
                                      ret_decl = new StringDeclaration(list);
                                     // ProcedureDeclarator pdecl = new ProcedureDeclarator(new NameID((Identifier8!=null?Identifier8.getText():null)), (List)t4.get("param"));
                                     // ret_decl = new Procedure(pdecl, (CompoundStatement)t4.get("body"));
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:1076:9: t5= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl3049);
                    t5=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t5;
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:1080:9: t6= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_memberDecl3075);
                    t6=classDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t6;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, memberDecl_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "memberDecl"


    // $ANTLR start "memberDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:1086:1: memberDeclaration returns [Declaration ret_decl] : t1= type (t2= methodDeclaration | t3= fieldDeclaration ) ;
    public final Declaration memberDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int memberDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("memberDeclaration"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1088:5: (t1= type (t2= methodDeclaration | t3= fieldDeclaration ) )
            // src/cedp/src2src/frontend/java/Java.g:1088:9: t1= type (t2= methodDeclaration | t3= fieldDeclaration )
            {
            pushFollow(FOLLOW_type_in_memberDeclaration3124);
            t1=type();

            state._fsp--;
            if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1088:17: (t2= methodDeclaration | t3= fieldDeclaration )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==Identifier) ) {
                int LA41_1 = input.LA(2);

                if ( (LA41_1==66) ) {
                    alt41=1;
                }
                else if ( (LA41_1==26||LA41_1==41||LA41_1==48||LA41_1==51) ) {
                    alt41=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ret_decl;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1088:18: t2= methodDeclaration
                    {
                    pushFollow(FOLLOW_methodDeclaration_in_memberDeclaration3129);
                    t2=methodDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1088:41: t3= fieldDeclaration
                    {
                    pushFollow(FOLLOW_fieldDeclaration_in_memberDeclaration3135);
                    t3=fieldDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                                  list.add(t1);
                                  if(t2 != null)
                                      list.add(t2);
                                  if(t3 != null)
                                      list.add(t3);
                                  ret_decl = new StringDeclaration(list);

                                  //if(t2.containsKey("body")){
                                  //    ProcedureDeclarator pdec = new ProcedureDeclarator((IDExpression)t2.get("id"), (List)t2.get("param"));
                                  //    ret_decl = new Procedure(t1, pdec, (CompoundStatement)t2.get("body"));
                                  //}
                                  //else{
                                  //    VariableDeclarator vdec = new VariableDeclarator((IDExpression)t2.get("id"));
                                  //    ret_decl = new VariableDeclaration(t1, vdec);
                                  //}
                                  //if(t3.getNumDeclarators() > 0){
                                  //    VariableDeclaration temp = new VariableDeclaration(t1, (Declarator)t3.getDeclarator(0));
                                  //    for(int i=1; i<t3.getNumDeclarators(); i++)
                                  //        temp.addDeclarator((Declarator)t3.getDeclarator(i));
                                  //   ret_decl = temp;
                                  //}
                                  //else
                                  //    ret_decl = t3;
                              
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, memberDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "memberDeclaration"


    // $ANTLR start "genericMethodOrConstructorDecl"
    // src/cedp/src2src/frontend/java/Java.g:1116:1: genericMethodOrConstructorDecl returns [Declaration ret_decl] : t1= typeParameters t2= genericMethodOrConstructorRest ;
    public final Declaration genericMethodOrConstructorDecl() throws RecognitionException {
        Declaration ret_decl = null;
        int genericMethodOrConstructorDecl_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("genericMethodOrConstructorDecl"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1118:5: (t1= typeParameters t2= genericMethodOrConstructorRest )
            // src/cedp/src2src/frontend/java/Java.g:1118:9: t1= typeParameters t2= genericMethodOrConstructorRest
            {
            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl3190);
            t1=typeParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl3194);
            t2=genericMethodOrConstructorRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(t2);
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, genericMethodOrConstructorDecl_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "genericMethodOrConstructorDecl"


    // $ANTLR start "genericMethodOrConstructorRest"
    // src/cedp/src2src/frontend/java/Java.g:1126:1: genericMethodOrConstructorRest returns [Declaration ret_decl] : ( (t1= type | 'void' ) t2= Identifier t3= methodDeclaratorRest | t4= Identifier t5= constructorDeclaratorRest );
    public final Declaration genericMethodOrConstructorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int genericMethodOrConstructorRest_StartIndex = input.index();
        Token t2=null;
        Token t4=null;
        Declaration t1 = null;

        Declaration t3 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("genericMethodOrConstructorRest"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1128:5: ( (t1= type | 'void' ) t2= Identifier t3= methodDeclaratorRest | t4= Identifier t5= constructorDeclaratorRest )
            int alt43=2;
            alt43 = dfa43.predict(input);
            switch (alt43) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1128:9: (t1= type | 'void' ) t2= Identifier t3= methodDeclaratorRest
                    {
                    // src/cedp/src2src/frontend/java/Java.g:1128:9: (t1= type | 'void' )
                    int alt42=2;
                    alt42 = dfa42.predict(input);
                    switch (alt42) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1128:10: t1= type
                            {
                            pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest3244);
                            t1=type();

                            state._fsp--;
                            if (state.failed) return ret_decl;

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:1128:20: 'void'
                            {
                            match(input,47,FOLLOW_47_in_genericMethodOrConstructorRest3248); if (state.failed) return ret_decl;

                            }
                            break;

                    }

                    t2=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest3253); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest3257);
                    t3=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      if(t1 != null)
                                          list.add(t1);
                                      else
                                          list.add(new StringDeclaration("void"));
                                      list.add(new StringDeclaration((t2!=null?t2.getText():null)));
                                      list.add(t3);
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1138:9: t4= Identifier t5= constructorDeclaratorRest
                    {
                    t4=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest3283); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest3287);
                    t5=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration((t4!=null?t4.getText():null)));
                                      list.add(t5);
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, genericMethodOrConstructorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "genericMethodOrConstructorRest"


    // $ANTLR start "methodDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:1146:1: methodDeclaration returns [Declaration ret_decl] : Identifier t1= methodDeclaratorRest ;
    public final Declaration methodDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int methodDeclaration_StartIndex = input.index();
        Token Identifier9=null;
        Declaration t1 = null;


         if(dFlag) System.out.println("methodDeclaration"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1148:5: ( Identifier t1= methodDeclaratorRest )
            // src/cedp/src2src/frontend/java/Java.g:1148:9: Identifier t1= methodDeclaratorRest
            {
            Identifier9=(Token)match(input,Identifier,FOLLOW_Identifier_in_methodDeclaration3334); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration3338);
            t1=methodDeclaratorRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              //hash = t1;
                              //hash.put("id", new NameID((Identifier9!=null?Identifier9.getText():null)));
                              list.add(new StringDeclaration((Identifier9!=null?Identifier9.getText():null)));
                              list.add(t1);
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, methodDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "methodDeclaration"


    // $ANTLR start "fieldDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:1158:1: fieldDeclaration returns [Declaration ret_decl] : t1= variableDeclarators ';' ;
    public final Declaration fieldDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int fieldDeclaration_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("fieldDeclaration"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1160:5: (t1= variableDeclarators ';' )
            // src/cedp/src2src/frontend/java/Java.g:1160:9: t1= variableDeclarators ';'
            {
            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration3387);
            t1=variableDeclarators();

            state._fsp--;
            if (state.failed) return ret_decl;
            match(input,26,FOLLOW_26_in_fieldDeclaration3389); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              //ret_decl = new VariableDeclaration((Declarator)t1.get(0));
                              //for(int i=1; i<t1.size(); i++)
                              //    ret_decl.addDeclarator((Declarator)t1.get(i));
                              list.add(t1);
                              list.add(new StringDeclaration(";"));
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, fieldDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "fieldDeclaration"


    // $ANTLR start "interfaceBodyDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:1171:1: interfaceBodyDeclaration returns [Declaration ret_decl] : (t1= modifiers t2= interfaceMemberDecl | ';' );
    public final Declaration interfaceBodyDeclaration() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceBodyDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("interfaceBodyDeclaration"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1173:5: (t1= modifiers t2= interfaceMemberDecl | ';' )
            int alt44=2;
            alt44 = dfa44.predict(input);
            switch (alt44) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1173:9: t1= modifiers t2= interfaceMemberDecl
                    {
                    pushFollow(FOLLOW_modifiers_in_interfaceBodyDeclaration3438);
                    t1=modifiers();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration3442);
                    t2=interfaceMemberDecl();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      list.add(t2);
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1179:9: ';'
                    {
                    match(input,26,FOLLOW_26_in_interfaceBodyDeclaration3466); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration(";");
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, interfaceBodyDeclaration_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceBodyDeclaration"


    // $ANTLR start "interfaceMemberDecl"
    // src/cedp/src2src/frontend/java/Java.g:1185:1: interfaceMemberDecl returns [Declaration ret_decl] : (t1= interfaceMethodOrFieldDecl | t2= interfaceGenericMethodDecl | 'void' Identifier t3= voidInterfaceMethodDeclaratorRest | t4= interfaceDeclaration | t5= classDeclaration );
    public final Declaration interfaceMemberDecl() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceMemberDecl_StartIndex = input.index();
        Token Identifier10=null;
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("interfaceMemberDecl"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1187:5: (t1= interfaceMethodOrFieldDecl | t2= interfaceGenericMethodDecl | 'void' Identifier t3= voidInterfaceMethodDeclaratorRest | t4= interfaceDeclaration | t5= classDeclaration )
            int alt45=5;
            alt45 = dfa45.predict(input);
            switch (alt45) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1187:9: t1= interfaceMethodOrFieldDecl
                    {
                    pushFollow(FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl3515);
                    t1=interfaceMethodOrFieldDecl();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1191:9: t2= interfaceGenericMethodDecl
                    {
                    pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl3541);
                    t2=interfaceGenericMethodDecl();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t2;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:1195:9: 'void' Identifier t3= voidInterfaceMethodDeclaratorRest
                    {
                    match(input,47,FOLLOW_47_in_interfaceMemberDecl3565); if (state.failed) return ret_decl;
                    Identifier10=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceMemberDecl3567); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl3571);
                    t3=voidInterfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("void"));
                                      list.add(new StringDeclaration((Identifier10!=null?Identifier10.getText():null)));
                                      list.add(t3);
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:1202:9: t4= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_interfaceMemberDecl3597);
                    t4=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t4;
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:1206:9: t5= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_interfaceMemberDecl3623);
                    t5=classDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t5;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, interfaceMemberDecl_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceMemberDecl"


    // $ANTLR start "interfaceMethodOrFieldDecl"
    // src/cedp/src2src/frontend/java/Java.g:1212:1: interfaceMethodOrFieldDecl returns [Declaration ret_decl] : t1= type Identifier t2= interfaceMethodOrFieldRest ;
    public final Declaration interfaceMethodOrFieldDecl() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceMethodOrFieldDecl_StartIndex = input.index();
        Token Identifier11=null;
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("interfaceMethodOrFieldDecl"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1214:5: (t1= type Identifier t2= interfaceMethodOrFieldRest )
            // src/cedp/src2src/frontend/java/Java.g:1214:9: t1= type Identifier t2= interfaceMethodOrFieldRest
            {
            pushFollow(FOLLOW_type_in_interfaceMethodOrFieldDecl3672);
            t1=type();

            state._fsp--;
            if (state.failed) return ret_decl;
            Identifier11=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceMethodOrFieldDecl3674); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl3678);
            t2=interfaceMethodOrFieldRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(new StringDeclaration((Identifier11!=null?Identifier11.getText():null)));
                              list.add(t3);
                              ret_decl = new StringDeclaration(list);
                              //new Declarator()
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, interfaceMethodOrFieldDecl_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceMethodOrFieldDecl"


    // $ANTLR start "interfaceMethodOrFieldRest"
    // src/cedp/src2src/frontend/java/Java.g:1224:1: interfaceMethodOrFieldRest returns [Declaration ret_decl] : (t1= constantDeclaratorsRest ';' | t2= interfaceMethodDeclaratorRest );
    public final Declaration interfaceMethodOrFieldRest() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceMethodOrFieldRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("interfaceMethodOrFieldRest"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1226:5: (t1= constantDeclaratorsRest ';' | t2= interfaceMethodDeclaratorRest )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==48||LA46_0==51) ) {
                alt46=1;
            }
            else if ( (LA46_0==66) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1226:9: t1= constantDeclaratorsRest ';'
                    {
                    pushFollow(FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest3727);
                    t1=constantDeclaratorsRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    match(input,26,FOLLOW_26_in_interfaceMethodOrFieldRest3729); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      list.add(new StringDeclaration(";"));
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1232:9: t2= interfaceMethodDeclaratorRest
                    {
                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest3755);
                    t2=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t2;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, interfaceMethodOrFieldRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceMethodOrFieldRest"


    // $ANTLR start "methodDeclaratorRest"
    // src/cedp/src2src/frontend/java/Java.g:1238:1: methodDeclaratorRest returns [Declaration ret_decl] : t1= formalParameters ( '[' ']' )* ( 'throws' t2= qualifiedNameList )? (t3= methodBody | ';' ) ;
    public final Declaration methodDeclaratorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int methodDeclaratorRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("methodDeclaratorRest"); hash = new Hashtable(); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1240:5: (t1= formalParameters ( '[' ']' )* ( 'throws' t2= qualifiedNameList )? (t3= methodBody | ';' ) )
            // src/cedp/src2src/frontend/java/Java.g:1240:9: t1= formalParameters ( '[' ']' )* ( 'throws' t2= qualifiedNameList )? (t3= methodBody | ';' )
            {
            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest3804);
            t1=formalParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:1244:9: ( '[' ']' )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==48) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1244:10: '[' ']'
            	    {
            	    match(input,48,FOLLOW_48_in_methodDeclaratorRest3829); if (state.failed) return ret_decl;
            	    match(input,49,FOLLOW_49_in_methodDeclaratorRest3831); if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration("[]"));
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);

            // src/cedp/src2src/frontend/java/Java.g:1249:9: ( 'throws' t2= qualifiedNameList )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==50) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1249:10: 'throws' t2= qualifiedNameList
                    {
                    match(input,50,FOLLOW_50_in_methodDeclaratorRest3867); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_qualifiedNameList_in_methodDeclaratorRest3871);
                    t2=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("throws"));
                                      list.add(t2);
                      //                hash.put("throw", ExceptionSpecifier = new ExceptionSpecification(t2));
                                  
                    }

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:1256:9: (t3= methodBody | ';' )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==44) ) {
                alt49=1;
            }
            else if ( (LA49_0==26) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1256:13: t3= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_methodDeclaratorRest3912);
                    t3=methodBody();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t3);
                      //                hash.put("body", t3);
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1262:13: ';'
                    {
                    match(input,26,FOLLOW_26_in_methodDeclaratorRest3940); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration(";"));
                                      ret_decl = new StringDeclaration(list);
                                  
                    }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, methodDeclaratorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "methodDeclaratorRest"


    // $ANTLR start "voidMethodDeclaratorRest"
    // src/cedp/src2src/frontend/java/Java.g:1270:1: voidMethodDeclaratorRest returns [Declaration ret_decl] : t1= formalParameters ( 'throws' t2= qualifiedNameList )? (t3= methodBody | ';' ) ;
    public final Declaration voidMethodDeclaratorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int voidMethodDeclaratorRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("voidMethodDeclaratorRest"); hash = new Hashtable(); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1272:5: (t1= formalParameters ( 'throws' t2= qualifiedNameList )? (t3= methodBody | ';' ) )
            // src/cedp/src2src/frontend/java/Java.g:1272:9: t1= formalParameters ( 'throws' t2= qualifiedNameList )? (t3= methodBody | ';' )
            {
            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest3999);
            t1=formalParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
              //                hash.put("param", t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:1277:9: ( 'throws' t2= qualifiedNameList )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==50) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1277:10: 'throws' t2= qualifiedNameList
                    {
                    match(input,50,FOLLOW_50_in_voidMethodDeclaratorRest4024); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest4028);
                    t2=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("throws"));
                                      list.add(t2);
                                      //hash.put("throw", ExceptionSpecifier = new ExceptionSpecification(t2));
                                  
                    }

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:1284:9: (t3= methodBody | ';' )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==44) ) {
                alt51=1;
            }
            else if ( (LA51_0==26) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1284:13: t3= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_voidMethodDeclaratorRest4069);
                    t3=methodBody();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t3);
                                      ret_decl = new StringDeclaration(list);
                      //                hash.put("body", t3);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1290:13: ';'
                    {
                    match(input,26,FOLLOW_26_in_voidMethodDeclaratorRest4097); if (state.failed) return ret_decl;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, voidMethodDeclaratorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "voidMethodDeclaratorRest"


    // $ANTLR start "interfaceMethodDeclaratorRest"
    // src/cedp/src2src/frontend/java/Java.g:1294:1: interfaceMethodDeclaratorRest returns [Declaration ret_decl] : t1= formalParameters ( '[' ']' )* ( 'throws' t2= qualifiedNameList )? ';' ;
    public final Declaration interfaceMethodDeclaratorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceMethodDeclaratorRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("interfaceMethodDeclaratorRest"); hash = new Hashtable(); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1296:5: (t1= formalParameters ( '[' ']' )* ( 'throws' t2= qualifiedNameList )? ';' )
            // src/cedp/src2src/frontend/java/Java.g:1296:9: t1= formalParameters ( '[' ']' )* ( 'throws' t2= qualifiedNameList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest4142);
            t1=formalParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              //hash.put("param", t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:1301:9: ( '[' ']' )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==48) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1301:10: '[' ']'
            	    {
            	    match(input,48,FOLLOW_48_in_interfaceMethodDeclaratorRest4167); if (state.failed) return ret_decl;
            	    match(input,49,FOLLOW_49_in_interfaceMethodDeclaratorRest4169); if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration("[]"));
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);

            // src/cedp/src2src/frontend/java/Java.g:1306:9: ( 'throws' t2= qualifiedNameList )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==50) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1306:10: 'throws' t2= qualifiedNameList
                    {
                    match(input,50,FOLLOW_50_in_interfaceMethodDeclaratorRest4205); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest4209);
                    t2=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("throws"));
                                      list.add(t2);
                                      //hash.put("throw", ExceptionSpecifier = new ExceptionSpecification(t2));
                                  
                    }

                    }
                    break;

            }

            match(input,26,FOLLOW_26_in_interfaceMethodDeclaratorRest4236); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration(";"));
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, interfaceMethodDeclaratorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceMethodDeclaratorRest"


    // $ANTLR start "interfaceGenericMethodDecl"
    // src/cedp/src2src/frontend/java/Java.g:1320:1: interfaceGenericMethodDecl returns [Declaration ret_decl] : t1= typeParameters (t2= type | 'void' ) Identifier t3= interfaceMethodDeclaratorRest ;
    public final Declaration interfaceGenericMethodDecl() throws RecognitionException {
        Declaration ret_decl = null;
        int interfaceGenericMethodDecl_StartIndex = input.index();
        Token Identifier12=null;
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("interfaceGenericMethodDecl"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1322:5: (t1= typeParameters (t2= type | 'void' ) Identifier t3= interfaceMethodDeclaratorRest )
            // src/cedp/src2src/frontend/java/Java.g:1322:9: t1= typeParameters (t2= type | 'void' ) Identifier t3= interfaceMethodDeclaratorRest
            {
            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl4286);
            t1=typeParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1322:27: (t2= type | 'void' )
            int alt54=2;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1322:28: t2= type
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl4291);
                    t2=type();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1322:38: 'void'
                    {
                    match(input,47,FOLLOW_47_in_interfaceGenericMethodDecl4295); if (state.failed) return ret_decl;

                    }
                    break;

            }

            Identifier12=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl4298); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl4302);
            t3=interfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              if(t2 != null)
                                  list.add(t2);
                              else
                                  list.add(new StringDeclaration("void"));
                              list.add(new StringDeclaration((Identifier12!=null?Identifier12.getText():null)));
                              list.add(t3);
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, interfaceGenericMethodDecl_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "interfaceGenericMethodDecl"


    // $ANTLR start "voidInterfaceMethodDeclaratorRest"
    // src/cedp/src2src/frontend/java/Java.g:1335:1: voidInterfaceMethodDeclaratorRest returns [Declaration ret_decl] : t1= formalParameters ( 'throws' t2= qualifiedNameList )? ';' ;
    public final Declaration voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int voidInterfaceMethodDeclaratorRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("voidInterfaceMethodDeclaratorRest"); hash = new Hashtable(); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1337:5: (t1= formalParameters ( 'throws' t2= qualifiedNameList )? ';' )
            // src/cedp/src2src/frontend/java/Java.g:1337:9: t1= formalParameters ( 'throws' t2= qualifiedNameList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest4351);
            t1=formalParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1337:29: ( 'throws' t2= qualifiedNameList )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==50) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1337:30: 'throws' t2= qualifiedNameList
                    {
                    match(input,50,FOLLOW_50_in_voidInterfaceMethodDeclaratorRest4354); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest4358);
                    t2=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            match(input,26,FOLLOW_26_in_voidInterfaceMethodDeclaratorRest4362); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              if(t2 != null)
                                  list.add(t2);
                              else
                                  list.add(new StringDeclaration("throws"));
                              list.add(new StringDeclaration(";"));
                              ret_decl = new StringDeclaration(list);
                              //hash.put("param", t1);
                              //hash.put("throw", ExceptionSpecifier = new ExceptionSpecification(t2));
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, voidInterfaceMethodDeclaratorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "voidInterfaceMethodDeclaratorRest"


    // $ANTLR start "constructorDeclaratorRest"
    // src/cedp/src2src/frontend/java/Java.g:1352:1: constructorDeclaratorRest returns [Declaration ret_decl] : t1= formalParameters ( 'throws' t2= qualifiedNameList )? t3= constructorBody ;
    public final Declaration constructorDeclaratorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int constructorDeclaratorRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("constructorDeclaratorRest"); hash = new Hashtable(); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1354:5: (t1= formalParameters ( 'throws' t2= qualifiedNameList )? t3= constructorBody )
            // src/cedp/src2src/frontend/java/Java.g:1354:9: t1= formalParameters ( 'throws' t2= qualifiedNameList )? t3= constructorBody
            {
            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest4412);
            t1=formalParameters();

            state._fsp--;
            if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1354:29: ( 'throws' t2= qualifiedNameList )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==50) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1354:30: 'throws' t2= qualifiedNameList
                    {
                    match(input,50,FOLLOW_50_in_constructorDeclaratorRest4415); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_qualifiedNameList_in_constructorDeclaratorRest4419);
                    t2=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            pushFollow(FOLLOW_constructorBody_in_constructorDeclaratorRest4425);
            t3=constructorBody();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              if(t2 != null)
                                  list.add(t2);
                              else
                                  list.add(new StringDeclaration("throws"));
                              list.add(new StringDeclaration(";"));
                              ret_decl = new StringDeclaration(list);

                              //hash.put("param", t1);
                              //hash.put("throw", t2);
                              //if(t3 != null)
                              //    hash.put("body", t3);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, constructorDeclaratorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "constructorDeclaratorRest"


    // $ANTLR start "constantDeclarator"
    // src/cedp/src2src/frontend/java/Java.g:1371:1: constantDeclarator returns [Declaration ret_decl] : Identifier t1= constantDeclaratorRest ;
    public final Declaration constantDeclarator() throws RecognitionException {
        Declaration ret_decl = null;
        int constantDeclarator_StartIndex = input.index();
        Token Identifier13=null;
        Declaration t1 = null;


         if(dFlag) System.out.println("constantDeclarator"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1373:5: ( Identifier t1= constantDeclaratorRest )
            // src/cedp/src2src/frontend/java/Java.g:1373:9: Identifier t1= constantDeclaratorRest
            {
            Identifier13=(Token)match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator4472); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclarator4476);
            t1=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration((Identifier13!=null?Identifier13.getText():null)));
                              list.add(t1);
                              ret_decl = new StringDeclaration(list);
                              //ret_decl = new VariableDeclarator(new NameID((Identifier13!=null?Identifier13.getText():null)));
                              //ret_decl.setInitializer(t1);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, constantDeclarator_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "constantDeclarator"


    // $ANTLR start "variableDeclarators"
    // src/cedp/src2src/frontend/java/Java.g:1383:1: variableDeclarators returns [Declaration ret_decl] : t1= variableDeclarator ( ',' t2= variableDeclarator )* ;
    public final Declaration variableDeclarators() throws RecognitionException {
        Declaration ret_decl = null;
        int variableDeclarators_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("variableDeclarators"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1385:5: (t1= variableDeclarator ( ',' t2= variableDeclarator )* )
            // src/cedp/src2src/frontend/java/Java.g:1385:9: t1= variableDeclarator ( ',' t2= variableDeclarator )*
            {
            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators4525);
            t1=variableDeclarator();

            state._fsp--;
            if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1386:9: ( ',' t2= variableDeclarator )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==41) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1386:10: ',' t2= variableDeclarator
            	    {
            	    match(input,41,FOLLOW_41_in_variableDeclarators4536); if (state.failed) return ret_decl;
            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators4540);
            	    t2=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                              list.addFirst(t1);
                              ret_decl = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, variableDeclarators_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "variableDeclarators"


    // $ANTLR start "variableDeclarator"
    // src/cedp/src2src/frontend/java/Java.g:1398:1: variableDeclarator returns [Declaration ret] : t1= variableDeclaratorId ( '=' t2= variableInitializer )? ;
    public final Declaration variableDeclarator() throws RecognitionException {
        Declaration ret = null;
        int variableDeclarator_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("variableDeclarator"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1401:5: (t1= variableDeclaratorId ( '=' t2= variableInitializer )? )
            // src/cedp/src2src/frontend/java/Java.g:1401:9: t1= variableDeclaratorId ( '=' t2= variableInitializer )?
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_variableDeclarator4625);
            t1=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:1405:9: ( '=' t2= variableInitializer )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==51) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1405:10: '=' t2= variableInitializer
                    {
                    match(input,51,FOLLOW_51_in_variableDeclarator4650); if (state.failed) return ret;
                    pushFollow(FOLLOW_variableInitializer_in_variableDeclarator4654);
                    t2=variableInitializer();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("="));
                                      list.add(t2);
                                      //ret_decl = new VariableDeclarator(t1);
                                      //if(t2 != null) ret_decl.setInitializer(t2);
                                  
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, variableDeclarator_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "variableDeclarator"


    // $ANTLR start "constantDeclaratorsRest"
    // src/cedp/src2src/frontend/java/Java.g:1416:1: constantDeclaratorsRest returns [Declaration ret_decl] : t1= constantDeclaratorRest ( ',' t2= constantDeclarator )* ;
    public final Declaration constantDeclaratorsRest() throws RecognitionException {
        Declaration ret_decl = null;
        int constantDeclaratorsRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("constantDeclaratorsRest"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1418:5: (t1= constantDeclaratorRest ( ',' t2= constantDeclarator )* )
            // src/cedp/src2src/frontend/java/Java.g:1418:9: t1= constantDeclaratorRest ( ',' t2= constantDeclarator )*
            {
            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest4716);
            t1=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1418:35: ( ',' t2= constantDeclarator )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==41) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1418:36: ',' t2= constantDeclarator
            	    {
            	    match(input,41,FOLLOW_41_in_constantDeclaratorsRest4719); if (state.failed) return ret_decl;
            	    pushFollow(FOLLOW_constantDeclarator_in_constantDeclaratorsRest4723);
            	    t2=constantDeclarator();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration(","));
            	                      list.add(t2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                              list.addFirst(t1);
                              ret_decl = new StringDeclaration(list);
                              //list.add(new Initializer(t1));
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, constantDeclaratorsRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "constantDeclaratorsRest"


    // $ANTLR start "constantDeclaratorRest"
    // src/cedp/src2src/frontend/java/Java.g:1432:1: constantDeclaratorRest returns [Declaration ret_decl] : ( '[' ']' )* '=' t1= variableInitializer ;
    public final Declaration constantDeclaratorRest() throws RecognitionException {
        Declaration ret_decl = null;
        int constantDeclaratorRest_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("constantDeclaratorRest"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1434:5: ( ( '[' ']' )* '=' t1= variableInitializer )
            // src/cedp/src2src/frontend/java/Java.g:1434:9: ( '[' ']' )* '=' t1= variableInitializer
            {
            // src/cedp/src2src/frontend/java/Java.g:1434:9: ( '[' ']' )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==48) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1434:10: '[' ']'
            	    {
            	    match(input,48,FOLLOW_48_in_constantDeclaratorRest4798); if (state.failed) return ret_decl;
            	    match(input,49,FOLLOW_49_in_constantDeclaratorRest4800); if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration("[]"));
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            match(input,51,FOLLOW_51_in_constantDeclaratorRest4827); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_variableInitializer_in_constantDeclaratorRest4831);
            t1=variableInitializer();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("="));
                              list.add(t1);
                              ret_decl = new StringDeclaration(list);
                              //ret_init = new Initializer(t1);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, constantDeclaratorRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "constantDeclaratorRest"


    // $ANTLR start "variableDeclaratorId"
    // src/cedp/src2src/frontend/java/Java.g:1448:1: variableDeclaratorId returns [Declaration ret_decl] : Identifier ( '[' ']' )* ;
    public final Declaration variableDeclaratorId() throws RecognitionException {
        Declaration ret_decl = null;
        int variableDeclaratorId_StartIndex = input.index();
        Token Identifier14=null;

         if(dFlag) System.out.println("variableDeclaratorId"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1450:5: ( Identifier ( '[' ']' )* )
            // src/cedp/src2src/frontend/java/Java.g:1450:9: Identifier ( '[' ']' )*
            {
            Identifier14=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaratorId4880); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1451:9: ( '[' ']' )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==48) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1451:10: '[' ']'
            	    {
            	    match(input,48,FOLLOW_48_in_variableDeclaratorId4891); if (state.failed) return ret_decl;
            	    match(input,49,FOLLOW_49_in_variableDeclaratorId4893); if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration("[]"));
            	                      //ret_id = ret_id;
            	                      /* TODO */
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                              list.addFirst(new StringDeclaration((Identifier14!=null?Identifier14.getText():null)));
                              ret_decl = new StringDeclaration(list);
                              //ret_id = new NameID((Identifier14!=null?Identifier14.getText():null));
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, variableDeclaratorId_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "variableDeclaratorId"


    // $ANTLR start "variableInitializer"
    // src/cedp/src2src/frontend/java/Java.g:1466:1: variableInitializer returns [Declaration ret_decl] : (t1= arrayInitializer | t2= expression );
    public final Declaration variableInitializer() throws RecognitionException {
        Declaration ret_decl = null;
        int variableInitializer_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("variableInitializer"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1468:5: (t1= arrayInitializer | t2= expression )
            int alt62=2;
            alt62 = dfa62.predict(input);
            switch (alt62) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1468:9: t1= arrayInitializer
                    {
                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer4970);
                    t1=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t1;
                                      //init = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1473:9: t2= expression
                    {
                    pushFollow(FOLLOW_expression_in_variableInitializer4996);
                    t2=expression();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      ret_decl = t2;
                                      //if(t2 != null) init = new Initializer(t2);
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, variableInitializer_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "variableInitializer"


    // $ANTLR start "arrayInitializer"
    // src/cedp/src2src/frontend/java/Java.g:1481:1: arrayInitializer returns [Declaration ret_decl] : '{' (t1= variableInitializer ( ',' t2= variableInitializer )* ( ',' )? )? '}' ;
    public final Declaration arrayInitializer() throws RecognitionException {
        Declaration ret_decl = null;
        int arrayInitializer_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("arrayInitializer"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1483:5: ( '{' (t1= variableInitializer ( ',' t2= variableInitializer )* ( ',' )? )? '}' )
            // src/cedp/src2src/frontend/java/Java.g:1483:9: '{' (t1= variableInitializer ( ',' t2= variableInitializer )* ( ',' )? )? '}'
            {
            match(input,44,FOLLOW_44_in_arrayInitializer5045); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1483:13: (t1= variableInitializer ( ',' t2= variableInitializer )* ( ',' )? )?
            int alt65=2;
            alt65 = dfa65.predict(input);
            switch (alt65) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1483:14: t1= variableInitializer ( ',' t2= variableInitializer )* ( ',' )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer5050);
                    t1=variableInitializer();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    // src/cedp/src2src/frontend/java/Java.g:1484:10: ( ',' t2= variableInitializer )*
                    loop63:
                    do {
                        int alt63=2;
                        alt63 = dfa63.predict(input);
                        switch (alt63) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:1484:11: ',' t2= variableInitializer
                    	    {
                    	    match(input,41,FOLLOW_41_in_arrayInitializer5062); if (state.failed) return ret_decl;
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer5066);
                    	    t2=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return ret_decl;
                    	    if ( state.backtracking==0 ) {

                    	                          list.add(new StringDeclaration(","));
                    	                          list.add(t2);
                    	                          //List tlist = variableInitializer.getChildren();
                    	                          //for(int i=0; i<tlist.size(); i++)
                    	                          //list.add(tlist.get(i));
                    	                      
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop63;
                        }
                    } while (true);

                    // src/cedp/src2src/frontend/java/Java.g:1492:12: ( ',' )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==41) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1492:13: ','
                            {
                            match(input,41,FOLLOW_41_in_arrayInitializer5098); if (state.failed) return ret_decl;
                            if ( state.backtracking==0 ) {

                                                  list.add(new StringDeclaration(","));
                                              
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            match(input,45,FOLLOW_45_in_arrayInitializer5132); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                                  if(t1 != null)
                                      list.addFirst(t1);
                                  list.addFirst(new StringDeclaration("{"));
                                  list.addLast(new StringDeclaration("}"));
                                  ret_decl = new StringDeclaration(list);

                                  //List tlist = variableInitializer.getChildren();
                                  //for(int i=0; i<tlist.size(); i++)
                                  //    list.add(tlist.get(i));
                                  //init = new Initializer(list);
                              
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, arrayInitializer_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "arrayInitializer"


    // $ANTLR start "modifier"
    // src/cedp/src2src/frontend/java/Java.g:1511:1: modifier returns [Declaration ret_decl] : (t1= annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );
    public final Declaration modifier() throws RecognitionException {
        Declaration ret_decl = null;
        int modifier_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("modifier"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1513:5: (t1= annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )
            int alt66=12;
            alt66 = dfa66.predict(input);
            switch (alt66) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1513:9: t1= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_modifier5185);
                    t1=annotation();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = t1;
                                      //type = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1518:9: 'public'
                    {
                    match(input,31,FOLLOW_31_in_modifier5209); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.PUBLIC;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:1523:9: 'protected'
                    {
                    match(input,32,FOLLOW_32_in_modifier5233); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.PROTECTED;
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:1528:9: 'private'
                    {
                    match(input,33,FOLLOW_33_in_modifier5257); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.PRIVATE;
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:1533:9: 'static'
                    {
                    match(input,28,FOLLOW_28_in_modifier5281); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.STATIC;
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:1538:9: 'abstract'
                    {
                    match(input,34,FOLLOW_34_in_modifier5305); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.ABSTRACT;
                                  
                    }

                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:1543:9: 'final'
                    {
                    match(input,35,FOLLOW_35_in_modifier5329); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.FINAL;
                                  
                    }

                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:1548:9: 'native'
                    {
                    match(input,52,FOLLOW_52_in_modifier5353); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.NATIVE;
                                  
                    }

                    }
                    break;
                case 9 :
                    // src/cedp/src2src/frontend/java/Java.g:1553:9: 'synchronized'
                    {
                    match(input,53,FOLLOW_53_in_modifier5377); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.SYNCHRONIZED;
                                  
                    }

                    }
                    break;
                case 10 :
                    // src/cedp/src2src/frontend/java/Java.g:1558:9: 'transient'
                    {
                    match(input,54,FOLLOW_54_in_modifier5401); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.TRANSIENT;
                                  
                    }

                    }
                    break;
                case 11 :
                    // src/cedp/src2src/frontend/java/Java.g:1563:9: 'volatile'
                    {
                    match(input,55,FOLLOW_55_in_modifier5425); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.VOLATILE;
                                  
                    }

                    }
                    break;
                case 12 :
                    // src/cedp/src2src/frontend/java/Java.g:1568:9: 'strictfp'
                    {
                    match(input,36,FOLLOW_36_in_modifier5449); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("public");
                                      //type = Specifier.STRICTFP;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, modifier_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "modifier"


    // $ANTLR start "packageOrTypeName"
    // src/cedp/src2src/frontend/java/Java.g:1575:1: packageOrTypeName returns [Declaration ret] : t1= qualifiedName ;
    public final Declaration packageOrTypeName() throws RecognitionException {
        Declaration ret = null;
        int packageOrTypeName_StartIndex = input.index();
        JavaParser.qualifiedName_return t1 = null;


         if(dFlag) System.out.println("packageOrTypeName"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1577:5: (t1= qualifiedName )
            // src/cedp/src2src/frontend/java/Java.g:1577:9: t1= qualifiedName
            {
            pushFollow(FOLLOW_qualifiedName_in_packageOrTypeName5498);
            t1=qualifiedName();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                          ret = t1;
                      
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, packageOrTypeName_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "packageOrTypeName"


    // $ANTLR start "enumConstantName"
    // src/cedp/src2src/frontend/java/Java.g:1585:1: enumConstantName returns [Declaration ret_decl] : t1= Identifier ;
    public final Declaration enumConstantName() throws RecognitionException {
        Declaration ret_decl = null;
        int enumConstantName_StartIndex = input.index();
        Token t1=null;

         if(dFlag) System.out.println("enumConstantName"); Identifier id_temp = null; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1587:5: (t1= Identifier )
            // src/cedp/src2src/frontend/java/Java.g:1587:9: t1= Identifier
            {
            t1=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstantName5546); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {
               
                              ret_decl = new StringDeclaration((t1!=null?t1.getText():null));
                              //id = new Identifier(id_temp);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, enumConstantName_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "enumConstantName"


    // $ANTLR start "typeName"
    // src/cedp/src2src/frontend/java/Java.g:1594:1: typeName returns [Declaration ret] : t1= qualifiedName ;
    public final Declaration typeName() throws RecognitionException {
        Declaration ret = null;
        int typeName_StartIndex = input.index();
        JavaParser.qualifiedName_return t1 = null;


         if(dFlag) System.out.println("typeName"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1596:5: (t1= qualifiedName )
            // src/cedp/src2src/frontend/java/Java.g:1596:9: t1= qualifiedName
            {
            pushFollow(FOLLOW_qualifiedName_in_typeName5595);
            t1=qualifiedName();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                          ret = t1;
                      
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, typeName_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "typeName"


    // $ANTLR start "type"
    // src/cedp/src2src/frontend/java/Java.g:1602:1: type returns [Declaration ret_decl] : (t1= classOrInterfaceType ( '[' ']' )* | t2= primitiveType ( '[' ']' )* );
    public final Declaration type() throws RecognitionException {
        Declaration ret_decl = null;
        int type_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("type"); types = new LinkedList(); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1605:5: (t1= classOrInterfaceType ( '[' ']' )* | t2= primitiveType ( '[' ']' )* )
            int alt69=2;
            alt69 = dfa69.predict(input);
            switch (alt69) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1605:7: t1= classOrInterfaceType ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_classOrInterfaceType_in_type5647);
                    t1=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                  list.add(t1);
                                  //if(t1 != null)
                                  //    types.add(t1);
                              
                    }
                    // src/cedp/src2src/frontend/java/Java.g:1611:7: ( '[' ']' )*
                    loop67:
                    do {
                        int alt67=2;
                        alt67 = dfa67.predict(input);
                        switch (alt67) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:1611:8: '[' ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_type5666); if (state.failed) return ret_decl;
                    	    match(input,49,FOLLOW_49_in_type5668); if (state.failed) return ret_decl;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("[]"));
                    	                      //types.add(new ArraySpecifier());
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1617:7: t2= primitiveType ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type5701);
                    t2=primitiveType();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t2);
                                      //types.add(t2); /* TODO ('[' ']')* */
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:1622:8: ( '[' ']' )*
                    loop68:
                    do {
                        int alt68=2;
                        alt68 = dfa68.predict(input);
                        switch (alt68) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:1622:9: '[' ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_type5725); if (state.failed) return ret_decl;
                    	    match(input,49,FOLLOW_49_in_type5727); if (state.failed) return ret_decl;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("[]"));
                    	      //                types.add(new ArraySpecifier());
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop68;
                        }
                    } while (true);


                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret_decl = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, type_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "type"


    // $ANTLR start "classOrInterfaceType"
    // src/cedp/src2src/frontend/java/Java.g:1630:1: classOrInterfaceType returns [Declaration ret] : t1= Identifier (t2= typeArguments )? ( '.' t3= Identifier (t4= typeArguments )? )* ;
    public final Declaration classOrInterfaceType() throws RecognitionException {
        Declaration ret = null;
        int classOrInterfaceType_StartIndex = input.index();
        Token t1=null;
        Token t3=null;
        Declaration t2 = null;

        Declaration t4 = null;


         if(dFlag) System.out.println("classOrInterfaceType"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1633:5: (t1= Identifier (t2= typeArguments )? ( '.' t3= Identifier (t4= typeArguments )? )* )
            // src/cedp/src2src/frontend/java/Java.g:1633:7: t1= Identifier (t2= typeArguments )? ( '.' t3= Identifier (t4= typeArguments )? )*
            {
            t1=(Token)match(input,Identifier,FOLLOW_Identifier_in_classOrInterfaceType5793); if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:1633:21: (t2= typeArguments )?
            int alt70=2;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1633:22: t2= typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType5798);
                    t2=typeArguments();

                    state._fsp--;
                    if (state.failed) return ret;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                          list.add(new StringDeclaration((t1!=null?t1.getText():null)));
                          list.add(t2);
                      
            }
            // src/cedp/src2src/frontend/java/Java.g:1638:7: ( '.' t3= Identifier (t4= typeArguments )? )*
            loop72:
            do {
                int alt72=2;
                alt72 = dfa72.predict(input);
                switch (alt72) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1638:8: '.' t3= Identifier (t4= typeArguments )?
            	    {
            	    match(input,29,FOLLOW_29_in_classOrInterfaceType5819); if (state.failed) return ret;
            	    t3=(Token)match(input,Identifier,FOLLOW_Identifier_in_classOrInterfaceType5823); if (state.failed) return ret;
            	    // src/cedp/src2src/frontend/java/Java.g:1638:28: (t4= typeArguments )?
            	    int alt71=2;
            	    alt71 = dfa71.predict(input);
            	    switch (alt71) {
            	        case 1 :
            	            // src/cedp/src2src/frontend/java/Java.g:0:0: t4= typeArguments
            	            {
            	            pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType5827);
            	            t4=typeArguments();

            	            state._fsp--;
            	            if (state.failed) return ret;

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {

            	                  list.add(new StringDeclaration("."));
            	                  list.add(new StringDeclaration((t3!=null?t3.getText():null)));
            	                  if(t4 != null)
            	                      list.add(t4);
            	                  //ret_expr = new AccessExpression(ret_expr, AccessOperator.MEMBER_ACCESS, new NameID((t3!=null?t3.getText():null)));
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, classOrInterfaceType_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "classOrInterfaceType"


    // $ANTLR start "primitiveType"
    // src/cedp/src2src/frontend/java/Java.g:1665:1: primitiveType returns [Declaration ret_decl] : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final Declaration primitiveType() throws RecognitionException {
        Declaration ret_decl = null;
        int primitiveType_StartIndex = input.index();
         if(dFlag) System.out.println("primitiveType"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1667:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            int alt73=8;
            switch ( input.LA(1) ) {
            case 56:
                {
                alt73=1;
                }
                break;
            case 57:
                {
                alt73=2;
                }
                break;
            case 58:
                {
                alt73=3;
                }
                break;
            case 59:
                {
                alt73=4;
                }
                break;
            case 60:
                {
                alt73=5;
                }
                break;
            case 61:
                {
                alt73=6;
                }
                break;
            case 62:
                {
                alt73=7;
                }
                break;
            case 63:
                {
                alt73=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1667:9: 'boolean'
                    {
                    match(input,56,FOLLOW_56_in_primitiveType5884); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret_decl = new StringDeclaration("boolean");
                                      //type = Specifier.BOOLEAN;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1672:9: 'char'
                    {
                    match(input,57,FOLLOW_57_in_primitiveType5908); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      ret_decl = new StringDeclaration("char");
                                      //type = Specifier.CHAR;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:1677:9: 'byte'
                    {
                    match(input,58,FOLLOW_58_in_primitiveType5932); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      ret_decl = new StringDeclaration("byte");
                                      //type = Specifier.BYTE;
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:1682:9: 'short'
                    {
                    match(input,59,FOLLOW_59_in_primitiveType5956); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      ret_decl = new StringDeclaration("short");
                                      //type = Specifier.SHORT;
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:1687:9: 'int'
                    {
                    match(input,60,FOLLOW_60_in_primitiveType5980); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      ret_decl = new StringDeclaration("int");
                                      //type = Specifier.INT;
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:1692:9: 'long'
                    {
                    match(input,61,FOLLOW_61_in_primitiveType6004); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      ret_decl = new StringDeclaration("long");
                                      //type = Specifier.LONG;
                                  
                    }

                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:1697:9: 'float'
                    {
                    match(input,62,FOLLOW_62_in_primitiveType6028); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      ret_decl = new StringDeclaration("float");
                                      //type = Specifier.FLOAT;
                                  
                    }

                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:1702:9: 'double'
                    {
                    match(input,63,FOLLOW_63_in_primitiveType6052); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {
                       
                                      ret_decl = new StringDeclaration("double");
                                      //type = Specifier.DOUBLE;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, primitiveType_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "primitiveType"


    // $ANTLR start "variableModifier"
    // src/cedp/src2src/frontend/java/Java.g:1709:1: variableModifier returns [Declaration ret] : ( 'final' | t1= annotation );
    public final Declaration variableModifier() throws RecognitionException {
        Declaration ret = null;
        int variableModifier_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("variableModifier"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1711:5: ( 'final' | t1= annotation )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==35) ) {
                alt74=1;
            }
            else if ( (LA74_0==73) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1711:9: 'final'
                    {
                    match(input,35,FOLLOW_35_in_variableModifier6099); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("final");
                                      //anno = Specifier.final;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1716:9: t1= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_variableModifier6125);
                    t1=annotation();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t1;
                                      //anno = t1;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, variableModifier_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "variableModifier"


    // $ANTLR start "typeArguments"
    // src/cedp/src2src/frontend/java/Java.g:1723:1: typeArguments returns [Declaration ret] : '<' t1= typeArgument ( ',' t2= typeArgument )* '>' ;
    public final Declaration typeArguments() throws RecognitionException {
        Declaration ret = null;
        int typeArguments_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("typeArguments"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1725:5: ( '<' t1= typeArgument ( ',' t2= typeArgument )* '>' )
            // src/cedp/src2src/frontend/java/Java.g:1725:9: '<' t1= typeArgument ( ',' t2= typeArgument )* '>'
            {
            match(input,40,FOLLOW_40_in_typeArguments6172); if (state.failed) return ret;
            pushFollow(FOLLOW_typeArgument_in_typeArguments6176);
            t1=typeArgument();

            state._fsp--;
            if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:1726:9: ( ',' t2= typeArgument )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==41) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1726:10: ',' t2= typeArgument
            	    {
            	    match(input,41,FOLLOW_41_in_typeArguments6187); if (state.failed) return ret;
            	    pushFollow(FOLLOW_typeArgument_in_typeArguments6191);
            	    t2=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration(","));
            	                      list.add(t2);
            	                      //list.add(t2);
            	                      //ret_expr = new TypeParamExpression(list);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);

            match(input,42,FOLLOW_42_in_typeArguments6218); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.addFirst(t1);
                              list.addFirst(new StringDeclaration("<"));
                              list.addLast(new StringDeclaration(">"));
                              ret = new StringDeclaration(list);
                              //list.add(t1);
                              //ret_expr = new TypeParamExpression(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, typeArguments_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "typeArguments"


    // $ANTLR start "typeArgument"
    // src/cedp/src2src/frontend/java/Java.g:1745:1: typeArgument returns [Declaration ret_decl] : (t1= type | '?' ( ( 'extends' | 'super' ) t2= type )? );
    public final Declaration typeArgument() throws RecognitionException {
        Declaration ret_decl = null;
        int typeArgument_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("typeArgument"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1748:5: (t1= type | '?' ( ( 'extends' | 'super' ) t2= type )? )
            int alt78=2;
            alt78 = dfa78.predict(input);
            switch (alt78) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1748:9: t1= type
                    {
                    pushFollow(FOLLOW_type_in_typeArgument6278);
                    t1=type();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      //List list = new LinkedList();
                                      //for(int i=0; i<t1.size(); i++)
                                      //    list.add(new StringExpression(t1.get(i).toString()));
                                      //ret_expr = new StringExpression(list);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1756:9: '?' ( ( 'extends' | 'super' ) t2= type )?
                    {
                    match(input,64,FOLLOW_64_in_typeArgument6302); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                          list.add(new StringDeclaration("?"));
                                      
                    }
                    // src/cedp/src2src/frontend/java/Java.g:1760:9: ( ( 'extends' | 'super' ) t2= type )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==38||LA77_0==65) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1760:10: ( 'extends' | 'super' ) t2= type
                            {
                            // src/cedp/src2src/frontend/java/Java.g:1760:10: ( 'extends' | 'super' )
                            int alt76=2;
                            int LA76_0 = input.LA(1);

                            if ( (LA76_0==38) ) {
                                alt76=1;
                            }
                            else if ( (LA76_0==65) ) {
                                alt76=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 76, 0, input);

                                throw nvae;
                            }
                            switch (alt76) {
                                case 1 :
                                    // src/cedp/src2src/frontend/java/Java.g:1760:11: 'extends'
                                    {
                                    match(input,38,FOLLOW_38_in_typeArgument6332); if (state.failed) return ret_decl;
                                    if ( state.backtracking==0 ) {

                                                          list.add(new StringDeclaration("extends"));
                                                          //ret_expr.addExpression(new StringExpression("?"));
                                                          //ret_expr.addExpression(new StringExpression("extends"));
                                                      
                                    }

                                    }
                                    break;
                                case 2 :
                                    // src/cedp/src2src/frontend/java/Java.g:1766:15: 'super'
                                    {
                                    match(input,65,FOLLOW_65_in_typeArgument6366); if (state.failed) return ret_decl;
                                    if ( state.backtracking==0 ) {

                                                          list.add(new StringDeclaration("super"));
                                                          //ret_expr.addExpression(new StringExpression("?"));
                                                          //ret_expr.addExpression(new StringExpression("super"));
                                                      
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_type_in_typeArgument6402);
                            t2=type();

                            state._fsp--;
                            if (state.failed) return ret_decl;
                            if ( state.backtracking==0 ) {

                                                  list.add(t2);
                                                  //List list = new LinkedList();
                                                  //for(int i=0; i<t2.size(); i++)
                                                  //    ret_expr.addExpression(new StringExpression(t2.get(i).toString()));
                                              
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret_decl = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, typeArgument_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "typeArgument"


    // $ANTLR start "qualifiedNameList"
    // src/cedp/src2src/frontend/java/Java.g:1782:1: qualifiedNameList returns [Declaration ret] : t1= qualifiedName ( ',' t2= qualifiedName )* ;
    public final Declaration qualifiedNameList() throws RecognitionException {
        Declaration ret = null;
        int qualifiedNameList_StartIndex = input.index();
        JavaParser.qualifiedName_return t1 = null;

        JavaParser.qualifiedName_return t2 = null;


         if(dFlag) System.out.println("qualifiedNameList"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1785:5: (t1= qualifiedName ( ',' t2= qualifiedName )* )
            // src/cedp/src2src/frontend/java/Java.g:1785:9: t1= qualifiedName ( ',' t2= qualifiedName )*
            {
            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList6475);
            t1=qualifiedName();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:1789:9: ( ',' t2= qualifiedName )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==41) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1789:10: ',' t2= qualifiedName
            	    {
            	    match(input,41,FOLLOW_41_in_qualifiedNameList6500); if (state.failed) return ret;
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList6504);
            	    t2=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringExpression(","));
            	                      list.add(t2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, qualifiedNameList_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "qualifiedNameList"


    // $ANTLR start "formalParameters"
    // src/cedp/src2src/frontend/java/Java.g:1797:1: formalParameters returns [Declaration ret_decl] : '(' (t1= formalParameterDecls )? ')' ;
    public final Declaration formalParameters() throws RecognitionException {
        Declaration ret_decl = null;
        int formalParameters_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("formalParameters"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1800:5: ( '(' (t1= formalParameterDecls )? ')' )
            // src/cedp/src2src/frontend/java/Java.g:1800:9: '(' (t1= formalParameterDecls )? ')'
            {
            match(input,66,FOLLOW_66_in_formalParameters6571); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1800:13: (t1= formalParameterDecls )?
            int alt80=2;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1800:14: t1= formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters6576);
                    t1=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                          list.add(t1);
                                          //list = t1;
                                      
                    }

                    }
                    break;

            }

            match(input,67,FOLLOW_67_in_formalParameters6619); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.addFirst(new StringExpression("("));
                              list.addLast(new StringExpression(")"));
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret_decl = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, formalParameters_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "formalParameters"


    // $ANTLR start "formalParameterDecls"
    // src/cedp/src2src/frontend/java/Java.g:1813:1: formalParameterDecls returns [Declaration ret_decl] : t1= variableModifiers t2= type t3= formalParameterDeclsRest ;
    public final Declaration formalParameterDecls() throws RecognitionException {
        Declaration ret_decl = null;
        int formalParameterDecls_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("formalParameterDecls"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1816:5: (t1= variableModifiers t2= type t3= formalParameterDeclsRest )
            // src/cedp/src2src/frontend/java/Java.g:1816:9: t1= variableModifiers t2= type t3= formalParameterDeclsRest
            {
            pushFollow(FOLLOW_variableModifiers_in_formalParameterDecls6677);
            t1=variableModifiers();

            state._fsp--;
            if (state.failed) return ret_decl;
            pushFollow(FOLLOW_type_in_formalParameterDecls6681);
            t2=type();

            state._fsp--;
            if (state.failed) return ret_decl;
            pushFollow(FOLLOW_formalParameterDeclsRest_in_formalParameterDecls6685);
            t3=formalParameterDeclsRest();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(t2);
                              list.add(t3);
                              //List tlist = new LinkedList();
                              //VariableDeclarator var_decl = new VariableDeclarator((IDExpression)t3.get(0));
                              //VariableDeclaration vdec = new VariableDeclaration(MergeList(t1, t2), var_decl);
                              //tlist.add(vdec);
                              //t3.remove(0);
                              //list = MergeList(tlist, t3);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret_decl = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, formalParameterDecls_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "formalParameterDecls"


    // $ANTLR start "formalParameterDeclsRest"
    // src/cedp/src2src/frontend/java/Java.g:1830:1: formalParameterDeclsRest returns [Declaration ret_decl] : (t1= variableDeclaratorId ( ',' t2= formalParameterDecls )? | '...' t3= variableDeclaratorId );
    public final Declaration formalParameterDeclsRest() throws RecognitionException {
        Declaration ret_decl = null;
        int formalParameterDeclsRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("formalParameterDeclsRest"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1833:5: (t1= variableDeclaratorId ( ',' t2= formalParameterDecls )? | '...' t3= variableDeclaratorId )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==Identifier) ) {
                alt82=1;
            }
            else if ( (LA82_0==68) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret_decl;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1833:9: t1= variableDeclaratorId ( ',' t2= formalParameterDecls )?
                    {
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest6743);
                    t1=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:1837:9: ( ',' t2= formalParameterDecls )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==41) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1837:10: ',' t2= formalParameterDecls
                            {
                            match(input,41,FOLLOW_41_in_formalParameterDeclsRest6768); if (state.failed) return ret_decl;
                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDeclsRest6772);
                            t2=formalParameterDecls();

                            state._fsp--;
                            if (state.failed) return ret_decl;
                            if ( state.backtracking==0 ) {

                                              list.add(new StringDeclaration(","));
                                              list.add(t2);
                                              //for(int i=0; i<t2.size(); i++)
                                              //    list.add(t2.get(i));
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1845:9: '...' t3= variableDeclaratorId
                    {
                    match(input,68,FOLLOW_68_in_formalParameterDeclsRest6807); if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest6811);
                    t3=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("..."));
                                      list.add(t3);
                                      //System.err.println("Supported ... argument\n");
                                      //System.exit(-1);
                                      /* TODO SUPPORT! */
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret_decl = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, formalParameterDeclsRest_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "formalParameterDeclsRest"


    // $ANTLR start "methodBody"
    // src/cedp/src2src/frontend/java/Java.g:1855:1: methodBody returns [Declaration ret_decl] : t1= block ;
    public final Declaration methodBody() throws RecognitionException {
        Declaration ret_decl = null;
        int methodBody_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("methodBody"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1857:5: (t1= block )
            // src/cedp/src2src/frontend/java/Java.g:1857:9: t1= block
            {
            pushFollow(FOLLOW_block_in_methodBody6860);
            t1=block();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              ret_decl = t1;
                              //stat = t1;
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, methodBody_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "methodBody"


    // $ANTLR start "constructorBody"
    // src/cedp/src2src/frontend/java/Java.g:1864:1: constructorBody returns [Declaration ret_decl] : '{' (t1= explicitConstructorInvocation )? (t2= blockStatement )* '}' ;
    public final Declaration constructorBody() throws RecognitionException {
        Declaration ret_decl = null;
        int constructorBody_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("constructorBody"); ret_stat = new CompoundStatement(); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:1867:5: ( '{' (t1= explicitConstructorInvocation )? (t2= blockStatement )* '}' )
            // src/cedp/src2src/frontend/java/Java.g:1867:9: '{' (t1= explicitConstructorInvocation )? (t2= blockStatement )* '}'
            {
            match(input,44,FOLLOW_44_in_constructorBody6916); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:1867:13: (t1= explicitConstructorInvocation )?
            int alt83=2;
            alt83 = dfa83.predict(input);
            switch (alt83) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1867:14: t1= explicitConstructorInvocation
                    {
                    pushFollow(FOLLOW_explicitConstructorInvocation_in_constructorBody6921);
                    t1=explicitConstructorInvocation();

                    state._fsp--;
                    if (state.failed) return ret_decl;

                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:1868:9: (t2= blockStatement )*
            loop84:
            do {
                int alt84=2;
                alt84 = dfa84.predict(input);
                switch (alt84) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1868:10: t2= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_constructorBody6936);
            	    t2=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t2);
            	                     //ret_stat.addStatement(t2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            match(input,45,FOLLOW_45_in_constructorBody6963); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              if(t1 != null)
                                  list.addFirst(t1);
                              list.addFirst(new StringDeclaration("{"));
                              list.addLast(new StringDeclaration("}"));
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret_decl = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, constructorBody_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "constructorBody"


    // $ANTLR start "explicitConstructorInvocation"
    // src/cedp/src2src/frontend/java/Java.g:1882:1: explicitConstructorInvocation returns [Declaration ret] : ( (t1= nonWildcardTypeArguments )? ( 'this' | 'super' ) t2= arguments ';' | t3= primary '.' (t4= nonWildcardTypeArguments )? 'super' t5= arguments ';' );
    public final Declaration explicitConstructorInvocation() throws RecognitionException {
        Declaration ret = null;
        int explicitConstructorInvocation_StartIndex = input.index();
        JavaParser.nonWildcardTypeArguments_return t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        JavaParser.nonWildcardTypeArguments_return t4 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("explicitConstructorInvocation"); List list = new LinkedList(); int c1, c2; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1885:5: ( (t1= nonWildcardTypeArguments )? ( 'this' | 'super' ) t2= arguments ';' | t3= primary '.' (t4= nonWildcardTypeArguments )? 'super' t5= arguments ';' )
            int alt88=2;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1885:9: (t1= nonWildcardTypeArguments )? ( 'this' | 'super' ) t2= arguments ';'
                    {
                    // src/cedp/src2src/frontend/java/Java.g:1885:9: (t1= nonWildcardTypeArguments )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==40) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1885:10: t1= nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation7021);
                            t1=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    // src/cedp/src2src/frontend/java/Java.g:1885:40: ( 'this' | 'super' )
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==69) ) {
                        alt86=1;
                    }
                    else if ( (LA86_0==65) ) {
                        alt86=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 86, 0, input);

                        throw nvae;
                    }
                    switch (alt86) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1885:41: 'this'
                            {
                            match(input,69,FOLLOW_69_in_explicitConstructorInvocation7026); if (state.failed) return ret;
                            if ( state.backtracking==0 ) {
                              c1=1;
                            }

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:1885:58: 'super'
                            {
                            match(input,65,FOLLOW_65_in_explicitConstructorInvocation7032); if (state.failed) return ret;
                            if ( state.backtracking==0 ) {
                              c1=2;
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation7039);
                    t2=arguments();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,26,FOLLOW_26_in_explicitConstructorInvocation7041); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      if(c1==1)
                                          list.add(new StringDeclaration("this"));
                                      if(c1==2)
                                          list.add(new StringDeclaration("super"));
                                      list.add(t2);
                                      list.add(new StringDeclaration(";"));

                                      /*
                                      if(c1==1)
                                          list.add(new OperatorID("this"));
                                      if(c1==2)
                                          list.add(new OperatorID("super"));
                                      for(int i=0; i<t2.size(); i++)
                                          list.add(t2.get(i));
                                      */
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1904:9: t3= primary '.' (t4= nonWildcardTypeArguments )? 'super' t5= arguments ';'
                    {
                    pushFollow(FOLLOW_primary_in_explicitConstructorInvocation7067);
                    t3=primary();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,29,FOLLOW_29_in_explicitConstructorInvocation7069); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:1904:24: (t4= nonWildcardTypeArguments )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==40) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:1904:25: t4= nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation7074);
                            t4=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    match(input,65,FOLLOW_65_in_explicitConstructorInvocation7078); if (state.failed) return ret;
                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation7082);
                    t5=arguments();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,26,FOLLOW_26_in_explicitConstructorInvocation7084); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t3);
                                      list.add(new StringDeclaration("."));
                                      if(t4 != null)
                                          list.add(t4);
                                      list.add(new StringDeclaration("super"));
                                      list.add(t5);
                                      list.add(new StringDeclaration(";"));
                                      //list.add(t3);
                                      //list.add(new OperatorID("super"));
                                      //for(int i=0; i<t5.size(); i++)
                                      //    list.add(t5.get(i));
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret_decl = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, explicitConstructorInvocation_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "explicitConstructorInvocation"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        public Declaration ret;
    };

    // $ANTLR start "qualifiedName"
    // src/cedp/src2src/frontend/java/Java.g:1920:1: qualifiedName returns [Declaration ret] : id1= Identifier ( '.' id2= Identifier )* ;
    public final JavaParser.qualifiedName_return qualifiedName() throws RecognitionException {
        JavaParser.qualifiedName_return retval = new JavaParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Token id1=null;
        Token id2=null;

         if(dFlag) System.out.println("qualifiedName"); String str = ""; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // src/cedp/src2src/frontend/java/Java.g:1926:5: (id1= Identifier ( '.' id2= Identifier )* )
            // src/cedp/src2src/frontend/java/Java.g:1926:9: id1= Identifier ( '.' id2= Identifier )*
            {
            id1=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName7141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration((id1!=null?id1.getText():null)));
                              //str += "" + id1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:1931:9: ( '.' id2= Identifier )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==29) ) {
                    int LA89_2 = input.LA(2);

                    if ( (LA89_2==Identifier) ) {
                        alt89=1;
                    }


                }


                switch (alt89) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:1931:10: '.' id2= Identifier
            	    {
            	    match(input,29,FOLLOW_29_in_qualifiedName7166); if (state.failed) return retval;
            	    id2=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName7170); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration("."));
            	                      list.add(new StringDeclaration((id2!=null?id2.getText():null)));
            	                      //str += "." + id2;
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

                      //retval.ret_id = new NameID(str);
                      retval.ret = new StringDeclaration(list);
                  
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class literal_return extends ParserRuleReturnScope {
        public Declaration ret;
    };

    // $ANTLR start "literal"
    // src/cedp/src2src/frontend/java/Java.g:1940:1: literal returns [Declaration ret] : (t1= integerLiteral | t2= FloatingPointLiteral | t3= CharacterLiteral | t4= StringLiteral | t5= booleanLiteral | 'null' );
    public final JavaParser.literal_return literal() throws RecognitionException {
        JavaParser.literal_return retval = new JavaParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Token t2=null;
        Token t3=null;
        Token t4=null;
        Declaration t1 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("literal"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // src/cedp/src2src/frontend/java/Java.g:1942:5: (t1= integerLiteral | t2= FloatingPointLiteral | t3= CharacterLiteral | t4= StringLiteral | t5= booleanLiteral | 'null' )
            int alt90=6;
            alt90 = dfa90.predict(input);
            switch (alt90) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1942:9: t1= integerLiteral
                    {
                    pushFollow(FOLLOW_integerLiteral_in_literal7230);
                    t1=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       
                                      ret = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1946:9: t2= FloatingPointLiteral
                    {
                    t2=(Token)match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal7256); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       
                                      ret = t2;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:1950:9: t3= CharacterLiteral
                    {
                    t3=(Token)match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal7282); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       
                                      ret = t3;
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:1954:9: t4= StringLiteral
                    {
                    t4=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal7308); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       
                                      ret = t4;
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:1958:9: t5= booleanLiteral
                    {
                    pushFollow(FOLLOW_booleanLiteral_in_literal7334);
                    t5=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       
                                      ret = t5;
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:1962:9: 'null'
                    {
                    match(input,70,FOLLOW_70_in_literal7358); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       
                                      ret = null;
                                  
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"


    // $ANTLR start "integerLiteral"
    // src/cedp/src2src/frontend/java/Java.g:1968:1: integerLiteral returns [Declaration ret] : (t1= HexLiteral | t2= OctalLiteral | t3= DecimalLiteral );
    public final Declaration integerLiteral() throws RecognitionException {
        Declaration ret = null;
        int integerLiteral_StartIndex = input.index();
        Token t1=null;
        Token t2=null;
        Token t3=null;

         if(dFlag) System.out.println("integerLiteral"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1970:5: (t1= HexLiteral | t2= OctalLiteral | t3= DecimalLiteral )
            int alt91=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
                {
                alt91=1;
                }
                break;
            case OctalLiteral:
                {
                alt91=2;
                }
                break;
            case DecimalLiteral:
                {
                alt91=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }

            switch (alt91) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1970:8: t1= HexLiteral
                    {
                    t1=(Token)match(input,HexLiteral,FOLLOW_HexLiteral_in_integerLiteral7406); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      //System.out.println("Hex " + (t1!=null?t1.getText():null));
                                      //ret_lit = new IntegerLiteral((t1!=null?t1.getText():null));
                                      ret = new StringDeclaration((t1!=null?t1.getText():null));
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1976:9: t2= OctalLiteral
                    {
                    t2=(Token)match(input,OctalLiteral,FOLLOW_OctalLiteral_in_integerLiteral7432); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      //System.out.println("Oct " + (t2!=null?t2.getText():null));
                                      //ret_lit = new IntegerLiteral((t2!=null?t2.getText():null));
                                      ret = new StringDeclaration((t2!=null?t2.getText():null));
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:1982:9: t3= DecimalLiteral
                    {
                    t3=(Token)match(input,DecimalLiteral,FOLLOW_DecimalLiteral_in_integerLiteral7458); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      //System.out.println("Deci " + (t3!=null?t3.getText():null));
                                      //ret_lit = new IntegerLiteral((t3!=null?t3.getText():null));
                                      //if(ret_lit == null) System.out.println("*");
                                      ret = new StringDeclaration((t3!=null?t3.getText():null));
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, integerLiteral_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "integerLiteral"


    // $ANTLR start "booleanLiteral"
    // src/cedp/src2src/frontend/java/Java.g:1991:1: booleanLiteral returns [Declaration ret] : ( 'true' | 'false' );
    public final Declaration booleanLiteral() throws RecognitionException {
        Declaration ret = null;
        int booleanLiteral_StartIndex = input.index();
         if(dFlag) System.out.println("booleanLiteral"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:1993:5: ( 'true' | 'false' )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==71) ) {
                alt92=1;
            }
            else if ( (LA92_0==72) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:1993:9: 'true'
                    {
                    match(input,71,FOLLOW_71_in_booleanLiteral7505); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = new StringDeclaration("true");
                                      //ret_lit = new BooleanLiteral(true);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:1998:9: 'false'
                    {
                    match(input,72,FOLLOW_72_in_booleanLiteral7529); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("false");
                                      //ret_lit = new BooleanLiteral(false);
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, booleanLiteral_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "booleanLiteral"


    // $ANTLR start "annotations"
    // src/cedp/src2src/frontend/java/Java.g:2007:1: annotations returns [Declaration ret] : (t1= annotation )+ ;
    public final Declaration annotations() throws RecognitionException {
        Declaration ret = null;
        int annotations_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("annotations"); list = new LinkedList(); ret_decl = new AnnotationDeclaration(); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2010:5: ( (t1= annotation )+ )
            // src/cedp/src2src/frontend/java/Java.g:2010:9: (t1= annotation )+
            {
            // src/cedp/src2src/frontend/java/Java.g:2010:9: (t1= annotation )+
            int cnt93=0;
            loop93:
            do {
                int alt93=2;
                alt93 = dfa93.predict(input);
                switch (alt93) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2010:10: t1= annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations7590);
            	    t1=annotation();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1);
            	                      //ret_decl.annotate(t1);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt93 >= 1 ) break loop93;
            	    if (state.backtracking>0) {state.failed=true; return ret;}
                        EarlyExitException eee =
                            new EarlyExitException(93, input);
                        throw eee;
                }
                cnt93++;
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, annotations_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotations"


    // $ANTLR start "annotation"
    // src/cedp/src2src/frontend/java/Java.g:2019:1: annotation returns [Declaration ret] : '@' t1= annotationName ( '(' (t2= elementValuePairs | t3= elementValue )? ')' )? ;
    public final Declaration annotation() throws RecognitionException {
        Declaration ret = null;
        int annotation_StartIndex = input.index();
        JavaParser.annotationName_return t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("annotation"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2022:5: ( '@' t1= annotationName ( '(' (t2= elementValuePairs | t3= elementValue )? ')' )? )
            // src/cedp/src2src/frontend/java/Java.g:2022:9: '@' t1= annotationName ( '(' (t2= elementValuePairs | t3= elementValue )? ')' )?
            {
            match(input,73,FOLLOW_73_in_annotation7659); if (state.failed) return ret;
            pushFollow(FOLLOW_annotationName_in_annotation7663);
            t1=annotationName();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("@"));
                              list.add((t1!=null?input.toString(t1.start,t1.stop):null));
                              //ret_anno = new JavaAnnotation(new NameID((t1!=null?input.toString(t1.start,t1.stop):null)));
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2028:9: ( '(' (t2= elementValuePairs | t3= elementValue )? ')' )?
            int alt95=2;
            alt95 = dfa95.predict(input);
            switch (alt95) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2028:11: '(' (t2= elementValuePairs | t3= elementValue )? ')'
                    {
                    match(input,66,FOLLOW_66_in_annotation7689); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                          list.add(new StringDeclaration("{"));
                                       
                    }
                    // src/cedp/src2src/frontend/java/Java.g:2032:17: (t2= elementValuePairs | t3= elementValue )?
                    int alt94=3;
                    alt94 = dfa94.predict(input);
                    switch (alt94) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:2032:19: t2= elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation7730);
                            t2=elementValuePairs();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                                      list.add(t2);
                                                      //ret.anno.SetParenthesis();
                                                      //ret_anno.SetExpression(t2);
                                                  
                            }

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:2038:17: t3= elementValue
                            {
                            pushFollow(FOLLOW_elementValue_in_annotation7772);
                            t3=elementValue();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                                      list.add(t3);
                                                      //ret.anno.SetParenthesis();
                                                      //ret_anno.SetExpression(t3);
                                                  
                            }

                            }
                            break;

                    }

                    match(input,67,FOLLOW_67_in_annotation7809); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                          list.add(new StringDeclaration("}"));
                                      
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, annotation_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotation"

    public static class annotationName_return extends ParserRuleReturnScope {
    };

    // $ANTLR start "annotationName"
    // src/cedp/src2src/frontend/java/Java.g:2052:1: annotationName : Identifier ( '.' Identifier )* ;
    public final JavaParser.annotationName_return annotationName() throws RecognitionException {
        JavaParser.annotationName_return retval = new JavaParser.annotationName_return();
        retval.start = input.LT(1);
        int annotationName_StartIndex = input.index();
         if(dFlag) System.out.println("annotationName"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // src/cedp/src2src/frontend/java/Java.g:2054:5: ( Identifier ( '.' Identifier )* )
            // src/cedp/src2src/frontend/java/Java.g:2054:7: Identifier ( '.' Identifier )*
            {
            match(input,Identifier,FOLLOW_Identifier_in_annotationName7867); if (state.failed) return retval;
            // src/cedp/src2src/frontend/java/Java.g:2054:18: ( '.' Identifier )*
            loop96:
            do {
                int alt96=2;
                alt96 = dfa96.predict(input);
                switch (alt96) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2054:19: '.' Identifier
            	    {
            	    match(input,29,FOLLOW_29_in_annotationName7870); if (state.failed) return retval;
            	    match(input,Identifier,FOLLOW_Identifier_in_annotationName7872); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, annotationName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationName"


    // $ANTLR start "elementValuePairs"
    // src/cedp/src2src/frontend/java/Java.g:2058:1: elementValuePairs returns [Declaration ret] : t1= elementValuePair ( ',' t2= elementValuePair )* ;
    public final Declaration elementValuePairs() throws RecognitionException {
        Declaration ret = null;
        int elementValuePairs_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("elementValuePairs"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2061:5: (t1= elementValuePair ( ',' t2= elementValuePair )* )
            // src/cedp/src2src/frontend/java/Java.g:2061:9: t1= elementValuePair ( ',' t2= elementValuePair )*
            {
            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs7920);
            t1=elementValuePair();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              //ret_expr = t1;
                              //list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2067:9: ( ',' t2= elementValuePair )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==41) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2067:10: ',' t2= elementValuePair
            	    {
            	    match(input,41,FOLLOW_41_in_elementValuePairs7945); if (state.failed) return ret;
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs7949);
            	    t2=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration(","));
            	                      list.add(t2);
            	                      //list.add(t2);
            	                      //ret_expr = new CommaExpression(list);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, elementValuePairs_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "elementValuePairs"


    // $ANTLR start "elementValuePair"
    // src/cedp/src2src/frontend/java/Java.g:2078:1: elementValuePair returns [Declaration ret] : t1= Identifier '=' t2= elementValue ;
    public final Declaration elementValuePair() throws RecognitionException {
        Declaration ret = null;
        int elementValuePair_StartIndex = input.index();
        Token t1=null;
        Declaration t2 = null;


         if(dFlag) System.out.println("elementValuePair"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2081:5: (t1= Identifier '=' t2= elementValue )
            // src/cedp/src2src/frontend/java/Java.g:2081:9: t1= Identifier '=' t2= elementValue
            {
            t1=(Token)match(input,Identifier,FOLLOW_Identifier_in_elementValuePair8020); if (state.failed) return ret;
            match(input,51,FOLLOW_51_in_elementValuePair8022); if (state.failed) return ret;
            pushFollow(FOLLOW_elementValue_in_elementValuePair8026);
            t2=elementValue();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add((t1!=null?t1.getText():null));
                              list.add(new StringDeclaration("="));
                              list.add(t2);
                              ret = new StringDeclaration(list);
                              //ret_expr = new AssignmentExpression(new NameID((t1!=null?t1.getText():null)), AssignmentOperator.NORMAL, t1);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, elementValuePair_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "elementValuePair"


    // $ANTLR start "elementValue"
    // src/cedp/src2src/frontend/java/Java.g:2092:1: elementValue returns [Declaration ret] : (t1= conditionalExpression | t2= annotation | t3= elementValueArrayInitializer );
    public final Declaration elementValue() throws RecognitionException {
        Declaration ret = null;
        int elementValue_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("elementValue"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2095:5: (t1= conditionalExpression | t2= annotation | t3= elementValueArrayInitializer )
            int alt98=3;
            alt98 = dfa98.predict(input);
            switch (alt98) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2095:9: t1= conditionalExpression
                    {
                    pushFollow(FOLLOW_conditionalExpression_in_elementValue8086);
                    t1=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2099:9: t2= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_elementValue8112);
                    t2=annotation();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t2;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2103:9: t3= elementValueArrayInitializer
                    {
                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue8138);
                    t3=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t2;
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, elementValue_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "elementValue"


    // $ANTLR start "elementValueArrayInitializer"
    // src/cedp/src2src/frontend/java/Java.g:2110:1: elementValueArrayInitializer returns [Declaration ret_decl] : '{' (t1= elementValue ( ',' t2= elementValue )* )? ( ',' )? '}' ;
    public final Declaration elementValueArrayInitializer() throws RecognitionException {
        Declaration ret_decl = null;
        int elementValueArrayInitializer_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("elementValueArrayInitializer"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:2113:5: ( '{' (t1= elementValue ( ',' t2= elementValue )* )? ( ',' )? '}' )
            // src/cedp/src2src/frontend/java/Java.g:2113:9: '{' (t1= elementValue ( ',' t2= elementValue )* )? ( ',' )? '}'
            {
            match(input,44,FOLLOW_44_in_elementValueArrayInitializer8196); if (state.failed) return ret_decl;
            // src/cedp/src2src/frontend/java/Java.g:2113:13: (t1= elementValue ( ',' t2= elementValue )* )?
            int alt100=2;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2113:14: t1= elementValue ( ',' t2= elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer8201);
                    t1=elementValue();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("{"));
                                      list.add(t1);
                                      //ret_expr = new Initializer(list);
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:2119:9: ( ',' t2= elementValue )*
                    loop99:
                    do {
                        int alt99=2;
                        alt99 = dfa99.predict(input);
                        switch (alt99) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:2119:10: ',' t2= elementValue
                    	    {
                    	    match(input,41,FOLLOW_41_in_elementValueArrayInitializer8226); if (state.failed) return ret_decl;
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer8230);
                    	    t2=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return ret_decl;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration(","));
                    	                      list.add(t2);
                    	                      //ret_expr = new Initializer(list);
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop99;
                        }
                    } while (true);


                    }
                    break;

            }

            // src/cedp/src2src/frontend/java/Java.g:2125:14: ( ',' )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==41) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2125:15: ','
                    {
                    match(input,41,FOLLOW_41_in_elementValueArrayInitializer8260); if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration(","));
                                      //ret_expr.SetLastComma();
                                  
                    }

                    }
                    break;

            }

            match(input,45,FOLLOW_45_in_elementValueArrayInitializer8287); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("}"));
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, elementValueArrayInitializer_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "elementValueArrayInitializer"


    // $ANTLR start "annotationTypeDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:2136:1: annotationTypeDeclaration returns [Declaration ret] : '@' 'interface' t1= Identifier t2= annotationTypeBody ;
    public final Declaration annotationTypeDeclaration() throws RecognitionException {
        Declaration ret = null;
        int annotationTypeDeclaration_StartIndex = input.index();
        Token t1=null;
        Declaration t2 = null;


         if(dFlag) System.out.println("annotationTypeDeclaration"); ret_decl = new AnnotationDeclaration(); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2139:5: ( '@' 'interface' t1= Identifier t2= annotationTypeBody )
            // src/cedp/src2src/frontend/java/Java.g:2139:9: '@' 'interface' t1= Identifier t2= annotationTypeBody
            {
            match(input,73,FOLLOW_73_in_annotationTypeDeclaration8342); if (state.failed) return ret;
            match(input,46,FOLLOW_46_in_annotationTypeDeclaration8344); if (state.failed) return ret;
            t1=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationTypeDeclaration8348); if (state.failed) return ret;
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration8352);
            t2=annotationTypeBody();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("@"));
                              list.add(new StringDeclaration("interface"));
                              list.add((t1!=null?t1.getText():null));
                              list.add(t2);
                              //JavaAnnotation anno = new JavaAnnotation(new NameID((t1!=null?t1.getText():null)), t1);
                              //anno.SetType("Interface");
                              //ret_decl.annotate(anno);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, annotationTypeDeclaration_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotationTypeDeclaration"


    // $ANTLR start "annotationTypeBody"
    // src/cedp/src2src/frontend/java/Java.g:2151:1: annotationTypeBody returns [Declaration ret_decl] : '{' (t1= annotationTypeElementDeclaration )* '}' ;
    public final Declaration annotationTypeBody() throws RecognitionException {
        Declaration ret_decl = null;
        int annotationTypeBody_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("annotationTypeBody"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:2154:5: ( '{' (t1= annotationTypeElementDeclaration )* '}' )
            // src/cedp/src2src/frontend/java/Java.g:2154:9: '{' (t1= annotationTypeElementDeclaration )* '}'
            {
            match(input,44,FOLLOW_44_in_annotationTypeBody8408); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("{"));
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2158:9: (t1= annotationTypeElementDeclaration )*
            loop102:
            do {
                int alt102=2;
                alt102 = dfa102.predict(input);
                switch (alt102) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2158:10: t1= annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody8436);
            	    t1=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            match(input,45,FOLLOW_45_in_annotationTypeBody8463); if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("}"));
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, annotationTypeBody_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "annotationTypeBody"


    // $ANTLR start "annotationTypeElementDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:2168:1: annotationTypeElementDeclaration returns [Declaration ret] : t1= modifiers t2= annotationTypeElementRest ;
    public final Declaration annotationTypeElementDeclaration() throws RecognitionException {
        Declaration ret = null;
        int annotationTypeElementDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declarator t2 = null;


         if(dFlag) System.out.println("annotationTypeElementDeclaration"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2170:5: (t1= modifiers t2= annotationTypeElementRest )
            // src/cedp/src2src/frontend/java/Java.g:2170:9: t1= modifiers t2= annotationTypeElementRest
            {
            pushFollow(FOLLOW_modifiers_in_annotationTypeElementDeclaration8511);
            t1=modifiers();

            state._fsp--;
            if (state.failed) return ret;
            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration8515);
            t2=annotationTypeElementRest();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(t2);
                              ret = new StringDeclaration(list);
                              //ret_decl = new VariableDeclaration(t1, t2);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, annotationTypeElementDeclaration_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotationTypeElementDeclaration"


    // $ANTLR start "annotationTypeElementRest"
    // src/cedp/src2src/frontend/java/Java.g:2179:1: annotationTypeElementRest returns [Declarator ret] : (t1= type t2= annotationMethodOrConstantRest ';' | t3= normalClassDeclaration ( ';' )? | t4= normalInterfaceDeclaration ( ';' )? | t5= enumDeclaration ( ';' )? | t6= annotationTypeDeclaration ( ';' )? );
    public final Declarator annotationTypeElementRest() throws RecognitionException {
        Declarator ret = null;
        int annotationTypeElementRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;

        Declaration t6 = null;


         if(dFlag) System.out.println("annotationTypeElementRest"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2181:5: (t1= type t2= annotationMethodOrConstantRest ';' | t3= normalClassDeclaration ( ';' )? | t4= normalInterfaceDeclaration ( ';' )? | t5= enumDeclaration ( ';' )? | t6= annotationTypeDeclaration ( ';' )? )
            int alt107=5;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2181:9: t1= type t2= annotationMethodOrConstantRest ';'
                    {
                    pushFollow(FOLLOW_type_in_annotationTypeElementRest8563);
                    t1=type();

                    state._fsp--;
                    if (state.failed) return ret;
                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest8567);
                    t2=annotationMethodOrConstantRest();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,26,FOLLOW_26_in_annotationTypeElementRest8569); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      list.add(t2);
                                      list.add(new StringDeclaration(";"));
                                      ret = new StringDeclaration(list);
                                      //ret_decl = new VariableDeclarator(t1, t2);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2189:9: t3= normalClassDeclaration ( ';' )?
                    {
                    pushFollow(FOLLOW_normalClassDeclaration_in_annotationTypeElementRest8595);
                    t3=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2189:35: ( ';' )?
                    int alt103=2;
                    alt103 = dfa103.predict(input);
                    switch (alt103) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: ';'
                            {
                            match(input,26,FOLLOW_26_in_annotationTypeElementRest8597); if (state.failed) return ret;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                      list.add(t3);
                                      list.add(new StringDeclaration(";"));
                                      ret = new StringDeclaration(list);
                                      //ret_decl = t3;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2196:9: t4= normalInterfaceDeclaration ( ';' )?
                    {
                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementRest8624);
                    t4=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2196:39: ( ';' )?
                    int alt104=2;
                    alt104 = dfa104.predict(input);
                    switch (alt104) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: ';'
                            {
                            match(input,26,FOLLOW_26_in_annotationTypeElementRest8626); if (state.failed) return ret;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                      list.add(t4);
                                      list.add(new StringDeclaration(";"));
                                      ret = new StringDeclaration(list);
                                      //ret_decl = t4;
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:2203:9: t5= enumDeclaration ( ';' )?
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementRest8653);
                    t5=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2203:28: ( ';' )?
                    int alt105=2;
                    alt105 = dfa105.predict(input);
                    switch (alt105) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: ';'
                            {
                            match(input,26,FOLLOW_26_in_annotationTypeElementRest8655); if (state.failed) return ret;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                      list.add(t5);
                                      list.add(new StringDeclaration(";"));
                                      ret = new StringDeclaration(list);
                                      //ret_decl = t5;
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:2210:9: t6= annotationTypeDeclaration ( ';' )?
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest8682);
                    t6=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2210:38: ( ';' )?
                    int alt106=2;
                    alt106 = dfa106.predict(input);
                    switch (alt106) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: ';'
                            {
                            match(input,26,FOLLOW_26_in_annotationTypeElementRest8684); if (state.failed) return ret;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                      list.add(t6);
                                      list.add(new StringDeclaration(";"));
                                      ret = new StringDeclaration(list);
                                      //ret_decl = t6;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, annotationTypeElementRest_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotationTypeElementRest"


    // $ANTLR start "annotationMethodOrConstantRest"
    // src/cedp/src2src/frontend/java/Java.g:2219:1: annotationMethodOrConstantRest returns [Declaration ret] : (t1= annotationMethodRest | t2= annotationConstantRest );
    public final Declaration annotationMethodOrConstantRest() throws RecognitionException {
        Declaration ret = null;
        int annotationMethodOrConstantRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("annotationMethodOrConstantRest"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2221:5: (t1= annotationMethodRest | t2= annotationConstantRest )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==Identifier) ) {
                int LA108_1 = input.LA(2);

                if ( (LA108_1==66) ) {
                    alt108=1;
                }
                else if ( (LA108_1==26||LA108_1==41||LA108_1==48||LA108_1==51) ) {
                    alt108=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ret;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2221:9: t1= annotationMethodRest
                    {
                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest8734);
                    t1=annotationMethodRest();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2225:9: t2= annotationConstantRest
                    {
                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest8760);
                    t2=annotationConstantRest();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t2;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, annotationMethodOrConstantRest_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotationMethodOrConstantRest"


    // $ANTLR start "annotationMethodRest"
    // src/cedp/src2src/frontend/java/Java.g:2231:1: annotationMethodRest returns [Declaration ret] : t1= Identifier '(' ')' (t2= defaultValue )? ;
    public final Declaration annotationMethodRest() throws RecognitionException {
        Declaration ret = null;
        int annotationMethodRest_StartIndex = input.index();
        Token t1=null;
        Declaration t2 = null;


         if(dFlag) System.out.println("annotationMethodRest"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2233:5: (t1= Identifier '(' ')' (t2= defaultValue )? )
            // src/cedp/src2src/frontend/java/Java.g:2233:9: t1= Identifier '(' ')' (t2= defaultValue )?
            {
            t1=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationMethodRest8809); if (state.failed) return ret;
            match(input,66,FOLLOW_66_in_annotationMethodRest8811); if (state.failed) return ret;
            match(input,67,FOLLOW_67_in_annotationMethodRest8813); if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:2233:33: (t2= defaultValue )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==74) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:0:0: t2= defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest8817);
                    t2=defaultValue();

                    state._fsp--;
                    if (state.failed) return ret;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration((t1!=null?t1.getText():null)));
                              list.add(new StringDeclaration("()"));
                              if(t2 != null)
                                  list.add(t2);
                              ret = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, annotationMethodRest_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotationMethodRest"


    // $ANTLR start "annotationConstantRest"
    // src/cedp/src2src/frontend/java/Java.g:2243:1: annotationConstantRest returns [Declaration ret] : t1= variableDeclarators ;
    public final Declaration annotationConstantRest() throws RecognitionException {
        Declaration ret = null;
        int annotationConstantRest_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("annotationConstantRest"); List list = new LinkedList();  
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2245:5: (t1= variableDeclarators )
            // src/cedp/src2src/frontend/java/Java.g:2245:9: t1= variableDeclarators
            {
            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest8867);
            t1=variableDeclarators();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              ret = t1;
                              //list = t1;
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, annotationConstantRest_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "annotationConstantRest"


    // $ANTLR start "defaultValue"
    // src/cedp/src2src/frontend/java/Java.g:2252:1: defaultValue returns [Declaration ret] : 'default' t1= elementValue ;
    public final Declaration defaultValue() throws RecognitionException {
        Declaration ret = null;
        int defaultValue_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("defaultValue"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2254:5: ( 'default' t1= elementValue )
            // src/cedp/src2src/frontend/java/Java.g:2254:9: 'default' t1= elementValue
            {
            match(input,74,FOLLOW_74_in_defaultValue8914); if (state.failed) return ret;
            pushFollow(FOLLOW_elementValue_in_defaultValue8918);
            t1=elementValue();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("default"));
                              list.add(t1);
                              ret = new StringDeclaration(list);
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, defaultValue_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "defaultValue"


    // $ANTLR start "block"
    // src/cedp/src2src/frontend/java/Java.g:2264:1: block returns [Declaration ret] : '{' (t1= blockStatement )* '}' ;
    public final Declaration block() throws RecognitionException {
        Declaration ret = null;
        int block_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("block"); cstat = new CompoundStatement(); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2271:5: ( '{' (t1= blockStatement )* '}' )
            // src/cedp/src2src/frontend/java/Java.g:2271:9: '{' (t1= blockStatement )* '}'
            {
            match(input,44,FOLLOW_44_in_block8976); if (state.failed) return ret;
            // src/cedp/src2src/frontend/java/Java.g:2271:13: (t1= blockStatement )*
            loop110:
            do {
                int alt110=2;
                alt110 = dfa110.predict(input);
                switch (alt110) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2271:14: t1= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block8981);
            	    t1=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1);
            	                      //cstat.addStatement(t1);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);

            match(input,45,FOLLOW_45_in_block9008); if (state.failed) return ret;

            }

            if ( state.backtracking==0 ) {

                      list.addFirst(new StringDeclaration("{"));
                      list.addLast(new StringDeclaration("}"));
                      ret = new StringDeclaration(list);
                  
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, block_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "block"


    // $ANTLR start "blockStatement"
    // src/cedp/src2src/frontend/java/Java.g:2279:1: blockStatement returns [Declaration ret] : (t1= localVariableDeclarationStatement | t2= classOrInterfaceDeclaration | t3= statement );
    public final Declaration blockStatement() throws RecognitionException {
        Declaration ret = null;
        int blockStatement_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("blockStatement"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2281:5: (t1= localVariableDeclarationStatement | t2= classOrInterfaceDeclaration | t3= statement )
            int alt111=3;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2281:9: t1= localVariableDeclarationStatement
                    {
                    pushFollow(FOLLOW_localVariableDeclarationStatement_in_blockStatement9043);
                    t1=localVariableDeclarationStatement();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      ret = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2285:9: t2= classOrInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement9069);
                    t2=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      ret = t2;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2289:9: t3= statement
                    {
                    pushFollow(FOLLOW_statement_in_blockStatement9095);
                    t3=statement();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      ret = t3;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, blockStatement_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "blockStatement"


    // $ANTLR start "localVariableDeclarationStatement"
    // src/cedp/src2src/frontend/java/Java.g:2295:1: localVariableDeclarationStatement returns [Declaration ret] : t1= localVariableDeclaration ';' ;
    public final Declaration localVariableDeclarationStatement() throws RecognitionException {
        Declaration ret = null;
        int localVariableDeclarationStatement_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("localVariableDeclarationStatement"); List list = new LinkedList();  
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2298:5: (t1= localVariableDeclaration ';' )
            // src/cedp/src2src/frontend/java/Java.g:2298:10: t1= localVariableDeclaration ';'
            {
            pushFollow(FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement9154);
            t1=localVariableDeclaration();

            state._fsp--;
            if (state.failed) return ret;
            match(input,26,FOLLOW_26_in_localVariableDeclarationStatement9156); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(new StringDeclaration(";"));
                              //stat = new DeclarationStatement(t1);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, localVariableDeclarationStatement_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "localVariableDeclarationStatement"


    // $ANTLR start "localVariableDeclaration"
    // src/cedp/src2src/frontend/java/Java.g:2307:1: localVariableDeclaration returns [Declaration ret] : t1= variableModifiers t2= type t3= variableDeclarators ;
    public final Declaration localVariableDeclaration() throws RecognitionException {
        Declaration ret = null;
        int localVariableDeclaration_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("localVariableDeclaration"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2310:5: (t1= variableModifiers t2= type t3= variableDeclarators )
            // src/cedp/src2src/frontend/java/Java.g:2310:9: t1= variableModifiers t2= type t3= variableDeclarators
            {
            pushFollow(FOLLOW_variableModifiers_in_localVariableDeclaration9216);
            t1=variableModifiers();

            state._fsp--;
            if (state.failed) return ret;
            pushFollow(FOLLOW_type_in_localVariableDeclaration9220);
            t2=type();

            state._fsp--;
            if (state.failed) return ret;
            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration9224);
            t3=variableDeclarators();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(t2);
                              list.add(t3);
                              //ret_vardecl = new VariableDeclaration(MergeList(t1, t2), t3.get(0));
                              //for(int i=1; i<t3.size(); i++)
                              //    ret_vardecl.addDeclarator(t3.get(i));
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, localVariableDeclaration_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "localVariableDeclaration"


    // $ANTLR start "variableModifiers"
    // src/cedp/src2src/frontend/java/Java.g:2321:1: variableModifiers returns [Declaration ret] : (t1= variableModifier )* ;
    public final Declaration variableModifiers() throws RecognitionException {
        Declaration ret = null;
        int variableModifiers_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("variableModifiers"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2324:5: ( (t1= variableModifier )* )
            // src/cedp/src2src/frontend/java/Java.g:2324:9: (t1= variableModifier )*
            {
            // src/cedp/src2src/frontend/java/Java.g:2324:9: (t1= variableModifier )*
            loop112:
            do {
                int alt112=2;
                alt112 = dfa112.predict(input);
                switch (alt112) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2324:10: t1= variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_variableModifiers9283);
            	    t1=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, variableModifiers_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "variableModifiers"


    // $ANTLR start "statement"
    // src/cedp/src2src/frontend/java/Java.g:2331:1: statement returns [Declaration ret] : (t1= block | t2= ASSERT t3= expression ( ':' t4= expression )? ';' | 'if' t5= parExpression t6= statement ( options {k=1; } : 'else' t8= statement )? | 'for' '(' t9= forControl ')' t10= statement | 'while' t11= parExpression t12= statement | 'do' t13= statement 'while' t14= parExpression ';' | 'try' t15= block (t16= catches 'finally' t17= block | t18= catches | 'finally' t19= block ) | 'switch' t20= parExpression '{' t21= switchBlockStatementGroups '}' | 'synchronized' t22= parExpression block | 'return' (t23= expression )? ';' | 'throw' t24= expression ';' | 'break' (t25= Identifier )? ';' | 'continue' (t26= Identifier )? ';' | ';' | t28= statementExpression ';' | t29= Identifier ':' t30= statement );
    public final Declaration statement() throws RecognitionException {
        Declaration ret = null;
        int statement_StartIndex = input.index();
        Token t2=null;
        Token t25=null;
        Token t26=null;
        Token t29=null;
        Declaration t1 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        JavaParser.parExpression_return t5 = null;

        Declaration t6 = null;

        Declaration t8 = null;

        Declaration t9 = null;

        Declaration t10 = null;

        JavaParser.parExpression_return t11 = null;

        Declaration t12 = null;

        Declaration t13 = null;

        JavaParser.parExpression_return t14 = null;

        Declaration t15 = null;

        Declaration t16 = null;

        Declaration t17 = null;

        Declaration t18 = null;

        Declaration t19 = null;

        JavaParser.parExpression_return t20 = null;

        Declaration t21 = null;

        JavaParser.parExpression_return t22 = null;

        Declaration t23 = null;

        Declaration t24 = null;

        Declaration t28 = null;

        Declaration t30 = null;


         if(dFlag) System.out.println("statement"); int check1 = 0; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2334:5: (t1= block | t2= ASSERT t3= expression ( ':' t4= expression )? ';' | 'if' t5= parExpression t6= statement ( options {k=1; } : 'else' t8= statement )? | 'for' '(' t9= forControl ')' t10= statement | 'while' t11= parExpression t12= statement | 'do' t13= statement 'while' t14= parExpression ';' | 'try' t15= block (t16= catches 'finally' t17= block | t18= catches | 'finally' t19= block ) | 'switch' t20= parExpression '{' t21= switchBlockStatementGroups '}' | 'synchronized' t22= parExpression block | 'return' (t23= expression )? ';' | 'throw' t24= expression ';' | 'break' (t25= Identifier )? ';' | 'continue' (t26= Identifier )? ';' | ';' | t28= statementExpression ';' | t29= Identifier ':' t30= statement )
            int alt119=16;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2334:7: t1= block
                    {
                    pushFollow(FOLLOW_block_in_statement9350);
                    t1=block();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      //ret_stat = (Statement) t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2339:9: t2= ASSERT t3= expression ( ':' t4= expression )? ';'
                    {
                    t2=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_statement9376); if (state.failed) return ret;
                    pushFollow(FOLLOW_expression_in_statement9380);
                    t3=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2339:33: ( ':' t4= expression )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==75) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:2339:34: ':' t4= expression
                            {
                            match(input,75,FOLLOW_75_in_statement9383); if (state.failed) return ret;
                            pushFollow(FOLLOW_expression_in_statement9387);
                            t4=expression();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    match(input,26,FOLLOW_26_in_statement9391); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                        
                                      list.add(t2);
                                      list.add(t3);
                                      if(t4 != null){
                                          list.add(new StringDeclaration(":"));
                                          list.add(t4);
                                      }
                                      list.add(new StringDeclaration(";"));
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2349:9: 'if' t5= parExpression t6= statement ( options {k=1; } : 'else' t8= statement )?
                    {
                    match(input,76,FOLLOW_76_in_statement9415); if (state.failed) return ret;
                    pushFollow(FOLLOW_parExpression_in_statement9419);
                    t5=parExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    pushFollow(FOLLOW_statement_in_statement9423);
                    t6=statement();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("if"));
                                      list.add(t5);
                                      list.add(t6);
                                      //ret_stat = (Statement) new IfStatement(tok2, stat1);
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:2356:9: ( options {k=1; } : 'else' t8= statement )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==77) ) {
                        int LA114_2 = input.LA(2);

                        if ( (synpred157_Java()) ) {
                            alt114=1;
                        }
                    }
                    switch (alt114) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:2356:25: 'else' t8= statement
                            {
                            match(input,77,FOLLOW_77_in_statement9455); if (state.failed) return ret;
                            pushFollow(FOLLOW_statement_in_statement9459);
                            t8=statement();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(t8);
                                              //ret_stat = (Statement) new IfStatement(tok2, stat1, stat2);
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:2362:9: 'for' '(' t9= forControl ')' t10= statement
                    {
                    match(input,78,FOLLOW_78_in_statement9494); if (state.failed) return ret;
                    match(input,66,FOLLOW_66_in_statement9496); if (state.failed) return ret;
                    pushFollow(FOLLOW_forControl_in_statement9500);
                    t9=forControl();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,67,FOLLOW_67_in_statement9502); if (state.failed) return ret;
                    pushFollow(FOLLOW_statement_in_statement9506);
                    t10=statement();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("for"));
                                      if(t9 != null){
                                          list.add(new StringDeclaration("{"));
                                          list.add(t9);
                                          list.add(new StringDeclaration("}"));
                                      }
                                      list.add(t10);
                                      //forControl.setBody(stat2);
                                      //ret_stat = (Statement)tok3;
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:2374:9: 'while' t11= parExpression t12= statement
                    {
                    match(input,79,FOLLOW_79_in_statement9530); if (state.failed) return ret;
                    pushFollow(FOLLOW_parExpression_in_statement9534);
                    t11=parExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    pushFollow(FOLLOW_statement_in_statement9538);
                    t12=statement();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("while"));
                                      list.add(t11);
                                      list.add(t12);
                                      //ret_stat = (Statement) new WhileLoop(tok4, stat3);
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:2381:9: 'do' t13= statement 'while' t14= parExpression ';'
                    {
                    match(input,80,FOLLOW_80_in_statement9562); if (state.failed) return ret;
                    pushFollow(FOLLOW_statement_in_statement9566);
                    t13=statement();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,79,FOLLOW_79_in_statement9568); if (state.failed) return ret;
                    pushFollow(FOLLOW_parExpression_in_statement9572);
                    t14=parExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,26,FOLLOW_26_in_statement9574); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("do"));
                                      list.add(t13);
                                      list.add(new StringDeclaration("while"));
                                      list.add(t14);
                                      //ret_stat = (Statement) new DoLoop(stat4, tok5);
                                  
                    }

                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:2389:9: 'try' t15= block (t16= catches 'finally' t17= block | t18= catches | 'finally' t19= block )
                    {
                    match(input,81,FOLLOW_81_in_statement9598); if (state.failed) return ret;
                    pushFollow(FOLLOW_block_in_statement9602);
                    t15=block();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("try"));
                                      list.add(t15);
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:2394:9: (t16= catches 'finally' t17= block | t18= catches | 'finally' t19= block )
                    int alt115=3;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==88) ) {
                        int LA115_1 = input.LA(2);

                        if ( (LA115_1==66) ) {
                            int LA115_3 = input.LA(3);

                            if ( (synpred162_Java()) ) {
                                alt115=1;
                            }
                            else if ( (synpred163_Java()) ) {
                                alt115=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ret;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 115, 3, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ret;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 115, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA115_0==82) ) {
                        alt115=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 115, 0, input);

                        throw nvae;
                    }
                    switch (alt115) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:2394:11: t16= catches 'finally' t17= block
                            {
                            pushFollow(FOLLOW_catches_in_statement9630);
                            t16=catches();

                            state._fsp--;
                            if (state.failed) return ret;
                            match(input,82,FOLLOW_82_in_statement9632); if (state.failed) return ret;
                            pushFollow(FOLLOW_block_in_statement9636);
                            t17=block();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(t16);
                                              list.add(t17);
                                          
                            }

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:2399:11: t18= catches
                            {
                            pushFollow(FOLLOW_catches_in_statement9664);
                            t18=catches();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(t18);
                                          
                            }

                            }
                            break;
                        case 3 :
                            // src/cedp/src2src/frontend/java/Java.g:2403:11: 'finally' t19= block
                            {
                            match(input,82,FOLLOW_82_in_statement9690); if (state.failed) return ret;
                            pushFollow(FOLLOW_block_in_statement9696);
                            t19=block();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(new StringDeclaration("finally"));
                                              list.add(t19);
                                              //CompoundStatement cstat = new CompoundStatement();
                                              //cstat.addStatement(t1);
                                              //ret_stat = cstat;
                                              /* TODO  t2, t3, catches */
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:2413:9: 'switch' t20= parExpression '{' t21= switchBlockStatementGroups '}'
                    {
                    match(input,83,FOLLOW_83_in_statement9730); if (state.failed) return ret;
                    pushFollow(FOLLOW_parExpression_in_statement9734);
                    t20=parExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,44,FOLLOW_44_in_statement9736); if (state.failed) return ret;
                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement9740);
                    t21=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,45,FOLLOW_45_in_statement9742); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      list.add(new StringDeclaration("switch"));
                                      list.add(t20);
                                      list.add(new StringDeclaration("{"));
                                      list.add(t21);
                                      list.add(new StringDeclaration("}"));
                                      //ret_stat = (Statement) new SwitchStatement(tok6, tok7);
                                  
                    }

                    }
                    break;
                case 9 :
                    // src/cedp/src2src/frontend/java/Java.g:2422:9: 'synchronized' t22= parExpression block
                    {
                    match(input,53,FOLLOW_53_in_statement9766); if (state.failed) return ret;
                    pushFollow(FOLLOW_parExpression_in_statement9770);
                    t22=parExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    pushFollow(FOLLOW_block_in_statement9772);
                    block();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("synchronized"));
                                      list.add(t22);
                                  
                    }

                    }
                    break;
                case 10 :
                    // src/cedp/src2src/frontend/java/Java.g:2427:9: 'return' (t23= expression )? ';'
                    {
                    if ( state.backtracking==0 ) {
                       check1 = 0; 
                    }
                    match(input,84,FOLLOW_84_in_statement9797); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2427:33: (t23= expression )?
                    int alt116=2;
                    alt116 = dfa116.predict(input);
                    switch (alt116) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:2427:34: t23= expression
                            {
                            pushFollow(FOLLOW_expression_in_statement9802);
                            t23=expression();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {
                               check1 = 1; 
                            }

                            }
                            break;

                    }

                    match(input,26,FOLLOW_26_in_statement9808); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("return"));
                                      list.add(t23);
                                      list.add(new StringDeclaration(";"));
                                      //if(check1 == 0 || tok8 == null)
                                      //    ret_stat = (Statement) new ReturnStatement();
                                      //else
                                      //    ret_stat = (Statement) new ReturnStatement(tok8);
                                  
                    }

                    }
                    break;
                case 11 :
                    // src/cedp/src2src/frontend/java/Java.g:2437:9: 'throw' t24= expression ';'
                    {
                    match(input,85,FOLLOW_85_in_statement9832); if (state.failed) return ret;
                    pushFollow(FOLLOW_expression_in_statement9836);
                    t24=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,26,FOLLOW_26_in_statement9838); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("throw"));
                                      list.add(t24);
                                      list.add(new StringDeclaration(";"));
                                      //ret_stat = (Statement) new Statement();
                                      //ret_stat.addChild(0, new ThrowExpression(tok9));
                                  
                    }

                    }
                    break;
                case 12 :
                    // src/cedp/src2src/frontend/java/Java.g:2445:9: 'break' (t25= Identifier )? ';'
                    {
                    match(input,86,FOLLOW_86_in_statement9862); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2445:20: (t25= Identifier )?
                    int alt117=2;
                    int LA117_0 = input.LA(1);

                    if ( (LA117_0==Identifier) ) {
                        alt117=1;
                    }
                    switch (alt117) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: t25= Identifier
                            {
                            t25=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement9866); if (state.failed) return ret;

                            }
                            break;

                    }

                    match(input,26,FOLLOW_26_in_statement9869); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      list.add(new StringDeclaration("break"));
                                      if(t25 != null)
                                          list.add((t25!=null?t25.getText():null));
                                      list.add(new StringDeclaration(";"));
                                      //ret_stat = (Statement) new BreakStatement(); /* TODO Identifier support */
                                  
                    }

                    }
                    break;
                case 13 :
                    // src/cedp/src2src/frontend/java/Java.g:2453:9: 'continue' (t26= Identifier )? ';'
                    {
                    match(input,87,FOLLOW_87_in_statement9893); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2453:23: (t26= Identifier )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==Identifier) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: t26= Identifier
                            {
                            t26=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement9897); if (state.failed) return ret;

                            }
                            break;

                    }

                    match(input,26,FOLLOW_26_in_statement9900); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      list.add(new StringDeclaration("continue"));
                                      if(t26 != null)
                                          list.add((t26!=null?t26.getText():null));
                                      list.add(new StringDeclaration(";"));
                                      //ret_stat = (Statement) new ContinueStatement(); /* TODO Identifier support */
                                  
                    }

                    }
                    break;
                case 14 :
                    // src/cedp/src2src/frontend/java/Java.g:2461:9: ';'
                    {
                    match(input,26,FOLLOW_26_in_statement9924); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                         
                                      list.add(new StringDeclaration(";"));
                                      //ret_stat = new NullStatement();
                                  
                    }

                    }
                    break;
                case 15 :
                    // src/cedp/src2src/frontend/java/Java.g:2466:9: t28= statementExpression ';'
                    {
                    pushFollow(FOLLOW_statementExpression_in_statement9950);
                    t28=statementExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,26,FOLLOW_26_in_statement9952); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t28);
                                      list.add(new StringDeclaration(";"));
                                      //ret_stat = (Statement) new Statement();
                                      //ret_stat.addChild(0, tok10);
                                  
                    }

                    }
                    break;
                case 16 :
                    // src/cedp/src2src/frontend/java/Java.g:2473:9: t29= Identifier ':' t30= statement
                    {
                    t29=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement9978); if (state.failed) return ret;
                    match(input,75,FOLLOW_75_in_statement9980); if (state.failed) return ret;
                    pushFollow(FOLLOW_statement_in_statement9984);
                    t30=statement();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t29);
                                      list.add(new StringDeclaration(":"));
                                      list.add(t30);
                                      //Label label = new Label(new NameID((t11!=null?input.toString(t11.start,t11.stop):null)));
                                      //ret_stat = label;
                                      //ret_stat.addChild(0, t12);
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, statement_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "statement"


    // $ANTLR start "catches"
    // src/cedp/src2src/frontend/java/Java.g:2484:1: catches returns [Declaration ret] : t1= catchClause (t2= catchClause )* ;
    public final Declaration catches() throws RecognitionException {
        Declaration ret = null;
        int catches_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("catches"); List list = new LinkedList();  
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2487:5: (t1= catchClause (t2= catchClause )* )
            // src/cedp/src2src/frontend/java/Java.g:2487:9: t1= catchClause (t2= catchClause )*
            {
            pushFollow(FOLLOW_catchClause_in_catches10042);
            t1=catchClause();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2491:9: (t2= catchClause )*
            loop120:
            do {
                int alt120=2;
                alt120 = dfa120.predict(input);
                switch (alt120) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2491:10: t2= catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches10070);
            	    t2=catchClause();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, catches_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "catches"


    // $ANTLR start "catchClause"
    // src/cedp/src2src/frontend/java/Java.g:2498:1: catchClause returns [Declaration ret] : 'catch' '(' t1= formalParameter ')' t2= block ;
    public final Declaration catchClause() throws RecognitionException {
        Declaration ret = null;
        int catchClause_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("catchClause"); List list = new LinkedList();  
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2501:5: ( 'catch' '(' t1= formalParameter ')' t2= block )
            // src/cedp/src2src/frontend/java/Java.g:2501:9: 'catch' '(' t1= formalParameter ')' t2= block
            {
            match(input,88,FOLLOW_88_in_catchClause10137); if (state.failed) return ret;
            match(input,66,FOLLOW_66_in_catchClause10139); if (state.failed) return ret;
            pushFollow(FOLLOW_formalParameter_in_catchClause10143);
            t1=formalParameter();

            state._fsp--;
            if (state.failed) return ret;
            match(input,67,FOLLOW_67_in_catchClause10145); if (state.failed) return ret;
            pushFollow(FOLLOW_block_in_catchClause10149);
            t2=block();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(new StringDeclaration("catch"));
                              list.add(new StringDeclaration("("));
                              list.add(t1);
                              list.add(new StringDeclaration(")"));
                              list.add(t2);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, catchClause_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "catchClause"


    // $ANTLR start "formalParameter"
    // src/cedp/src2src/frontend/java/Java.g:2511:1: formalParameter returns [Declaration ret_decl] : t1= variableModifiers t2= type t3= variableDeclaratorId ;
    public final Declaration formalParameter() throws RecognitionException {
        Declaration ret_decl = null;
        int formalParameter_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("formalParameter"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:2514:5: (t1= variableModifiers t2= type t3= variableDeclaratorId )
            // src/cedp/src2src/frontend/java/Java.g:2514:9: t1= variableModifiers t2= type t3= variableDeclaratorId
            {
            pushFollow(FOLLOW_variableModifiers_in_formalParameter10207);
            t1=variableModifiers();

            state._fsp--;
            if (state.failed) return ret_decl;
            pushFollow(FOLLOW_type_in_formalParameter10211);
            t2=type();

            state._fsp--;
            if (state.failed) return ret_decl;
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter10215);
            t3=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(t2);
                              list.add(t3);
                              //ret_decl = new VariableDeclarator(MergeList(t1,t2), t3);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, formalParameter_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "formalParameter"


    // $ANTLR start "switchBlockStatementGroups"
    // src/cedp/src2src/frontend/java/Java.g:2524:1: switchBlockStatementGroups returns [Declaration ret_decl] : (t1= switchBlockStatementGroup )* ;
    public final Declaration switchBlockStatementGroups() throws RecognitionException {
        Declaration ret_decl = null;
        int switchBlockStatementGroups_StartIndex = input.index();
        Statement t1 = null;


         if(dFlag) System.out.println("switchBlockStatementGroups"); cstat = new CompoundStatement(); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:2527:5: ( (t1= switchBlockStatementGroup )* )
            // src/cedp/src2src/frontend/java/Java.g:2527:9: (t1= switchBlockStatementGroup )*
            {
            // src/cedp/src2src/frontend/java/Java.g:2527:9: (t1= switchBlockStatementGroup )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==74||LA121_0==89) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2527:10: t1= switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups10276);
            	    t1=switchBlockStatementGroup();

            	    state._fsp--;
            	    if (state.failed) return ret_decl;
            	    if ( state.backtracking==0 ) {
            	       
            	                      list.add(t1);
            	                      //cstat.addStatement(t1);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, switchBlockStatementGroups_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "switchBlockStatementGroups"


    // $ANTLR start "switchBlockStatementGroup"
    // src/cedp/src2src/frontend/java/Java.g:2539:1: switchBlockStatementGroup returns [Statement stat] : (t1= switchLabel )+ (t2= blockStatement )* ;
    public final Statement switchBlockStatementGroup() throws RecognitionException {
        Statement stat = null;
        int switchBlockStatementGroup_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("switchBlockStatementGroup"); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return stat; }
            // src/cedp/src2src/frontend/java/Java.g:2542:5: ( (t1= switchLabel )+ (t2= blockStatement )* )
            // src/cedp/src2src/frontend/java/Java.g:2542:9: (t1= switchLabel )+ (t2= blockStatement )*
            {
            // src/cedp/src2src/frontend/java/Java.g:2542:9: (t1= switchLabel )+
            int cnt122=0;
            loop122:
            do {
                int alt122=2;
                alt122 = dfa122.predict(input);
                switch (alt122) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2542:10: t1= switchLabel
            	    {
            	    pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup10347);
            	    t1=switchLabel();

            	    state._fsp--;
            	    if (state.failed) return stat;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t1);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt122 >= 1 ) break loop122;
            	    if (state.backtracking>0) {state.failed=true; return stat;}
                        EarlyExitException eee =
                            new EarlyExitException(122, input);
                        throw eee;
                }
                cnt122++;
            } while (true);

            // src/cedp/src2src/frontend/java/Java.g:2547:9: (t2= blockStatement )*
            loop123:
            do {
                int alt123=2;
                alt123 = dfa123.predict(input);
                switch (alt123) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2547:10: t2= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup10386);
            	    t2=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return stat;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, switchBlockStatementGroup_StartIndex); }
        }
        return stat;
    }
    // $ANTLR end "switchBlockStatementGroup"


    // $ANTLR start "switchLabel"
    // src/cedp/src2src/frontend/java/Java.g:2555:1: switchLabel returns [Declaration ret] : ( 'case' t1= constantExpression ':' | 'case' t2= enumConstantName ':' | 'default' ':' );
    public final Declaration switchLabel() throws RecognitionException {
        Declaration ret = null;
        int switchLabel_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("switchLabel"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2558:5: ( 'case' t1= constantExpression ':' | 'case' t2= enumConstantName ':' | 'default' ':' )
            int alt124=3;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2558:9: 'case' t1= constantExpression ':'
                    {
                    match(input,89,FOLLOW_89_in_switchLabel10455); if (state.failed) return ret;
                    pushFollow(FOLLOW_constantExpression_in_switchLabel10459);
                    t1=constantExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,75,FOLLOW_75_in_switchLabel10461); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("case"));
                                      list.add(t1);
                                      list.add(new StringDeclaration(":"));
                                      //ret_case = new Case(constantExpression);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2565:9: 'case' t2= enumConstantName ':'
                    {
                    match(input,89,FOLLOW_89_in_switchLabel10485); if (state.failed) return ret;
                    pushFollow(FOLLOW_enumConstantName_in_switchLabel10489);
                    t2=enumConstantName();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,75,FOLLOW_75_in_switchLabel10491); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      list.add(new StringDeclaration("case"));
                                      list.add(t2);
                                      list.add(new StringDeclaration(":"));
                                      //ret_case = new Case(constantExpression);
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2572:9: 'default' ':'
                    {
                    match(input,74,FOLLOW_74_in_switchLabel10515); if (state.failed) return ret;
                    match(input,75,FOLLOW_75_in_switchLabel10517); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      list.add(new StringDeclaration("default"));
                                      list.add(new StringDeclaration(":"));
                                      //ret_case = new Default();
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, switchLabel_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "switchLabel"


    // $ANTLR start "forControl"
    // src/cedp/src2src/frontend/java/Java.g:2581:1: forControl returns [Declaration ret] options {k=3; } : (t1= enhancedForControl | (t2= forInit )? ';' (t3= expression )? ';' (t4= forUpdate )? );
    public final Declaration forControl() throws RecognitionException {
        Declaration ret = null;
        int forControl_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;


         if(dFlag) System.out.println("forControl"); Statement stat=null; Expression expr1=null, expr2=null; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2584:5: (t1= enhancedForControl | (t2= forInit )? ';' (t3= expression )? ';' (t4= forUpdate )? )
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2584:9: t1= enhancedForControl
                    {
                    pushFollow(FOLLOW_enhancedForControl_in_forControl10580);
                    t1=enhancedForControl();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t1;
                                      //forloop = enhancedForControl;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2589:9: (t2= forInit )? ';' (t3= expression )? ';' (t4= forUpdate )?
                    {
                    // src/cedp/src2src/frontend/java/Java.g:2589:11: (t2= forInit )?
                    int alt125=2;
                    alt125 = dfa125.predict(input);
                    switch (alt125) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: t2= forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl10606);
                            t2=forInit();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    match(input,26,FOLLOW_26_in_forControl10609); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2589:27: (t3= expression )?
                    int alt126=2;
                    alt126 = dfa126.predict(input);
                    switch (alt126) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: t3= expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl10613);
                            t3=expression();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    match(input,26,FOLLOW_26_in_forControl10616); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:2589:46: (t4= forUpdate )?
                    int alt127=2;
                    alt127 = dfa127.predict(input);
                    switch (alt127) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: t4= forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl10620);
                            t4=forUpdate();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       
                                      if(t2 != null)
                                          list.add(t2);
                                      list.add(new StringDeclaration(";"));
                                      if(t3 != null)
                                          list.add(t3);
                                      list.add(new StringDeclaration(";"));
                                      if(t4 != null)
                                          list.add(t4);
                                      ret = new StringDeclaration(list);
                                      //forloop = new ForLoop(stat, expr1, expr2, null);
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, forControl_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "forControl"


    // $ANTLR start "forInit"
    // src/cedp/src2src/frontend/java/Java.g:2604:1: forInit returns [Declaration ret_decl] : (t1= localVariableDeclaration | t2= expressionList );
    public final Declaration forInit() throws RecognitionException {
        Declaration ret_decl = null;
        int forInit_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("forInit"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:2606:5: (t1= localVariableDeclaration | t2= expressionList )
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2606:9: t1= localVariableDeclaration
                    {
                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit10670);
                    t1=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret = t1;
                                      //stat = TODO;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2611:9: t2= expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forInit10696);
                    t2=expressionList();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      ret = t2;
                                      //stat = TODO;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, forInit_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "forInit"


    // $ANTLR start "enhancedForControl"
    // src/cedp/src2src/frontend/java/Java.g:2619:1: enhancedForControl returns [Declaration ret_decl] : t1= variableModifiers t2= type t3= Identifier ':' t4= expression ;
    public final Declaration enhancedForControl() throws RecognitionException {
        Declaration ret_decl = null;
        int enhancedForControl_StartIndex = input.index();
        Token t3=null;
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t4 = null;


         if(dFlag) System.out.println("enhancedForControl"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:2622:5: (t1= variableModifiers t2= type t3= Identifier ':' t4= expression )
            // src/cedp/src2src/frontend/java/Java.g:2622:9: t1= variableModifiers t2= type t3= Identifier ':' t4= expression
            {
            pushFollow(FOLLOW_variableModifiers_in_enhancedForControl10756);
            t1=variableModifiers();

            state._fsp--;
            if (state.failed) return ret_decl;
            pushFollow(FOLLOW_type_in_enhancedForControl10760);
            t2=type();

            state._fsp--;
            if (state.failed) return ret_decl;
            t3=(Token)match(input,Identifier,FOLLOW_Identifier_in_enhancedForControl10764); if (state.failed) return ret_decl;
            match(input,75,FOLLOW_75_in_enhancedForControl10766); if (state.failed) return ret_decl;
            pushFollow(FOLLOW_expression_in_enhancedForControl10770);
            t4=expression();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(t2);
                              list.add((t3!=null?t3.getText():null));
                              list.add(new StringDeclaration(":"));
                              list.add(t4);
                              //System.out.println("Unsupported for-loop style\n"); System.exit(-1);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, enhancedForControl_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "enhancedForControl"


    // $ANTLR start "forUpdate"
    // src/cedp/src2src/frontend/java/Java.g:2634:1: forUpdate returns [Declaration ret] : t1= expressionList ;
    public final Declaration forUpdate() throws RecognitionException {
        Declaration ret = null;
        int forUpdate_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("forUpdate"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2636:5: (t1= expressionList )
            // src/cedp/src2src/frontend/java/Java.g:2636:9: t1= expressionList
            {
            pushFollow(FOLLOW_expressionList_in_forUpdate10821);
            t1=expressionList();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              ret = t1;
                              //expr = expressionList;
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, forUpdate_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "forUpdate"

    public static class parExpression_return extends ParserRuleReturnScope {
        public Declaration ret;
    };

    // $ANTLR start "parExpression"
    // src/cedp/src2src/frontend/java/Java.g:2645:1: parExpression returns [Declaration ret] : '(' t1= expression ')' ;
    public final JavaParser.parExpression_return parExpression() throws RecognitionException {
        JavaParser.parExpression_return retval = new JavaParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("parExpression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // src/cedp/src2src/frontend/java/Java.g:2647:5: ( '(' t1= expression ')' )
            // src/cedp/src2src/frontend/java/Java.g:2647:9: '(' t1= expression ')'
            {
            match(input,66,FOLLOW_66_in_parExpression10871); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_parExpression10875);
            t1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               
                              ret = t1;
                              //expr = t1;
                          
            }
            match(input,67,FOLLOW_67_in_parExpression10899); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"


    // $ANTLR start "expressionList"
    // src/cedp/src2src/frontend/java/Java.g:2656:1: expressionList returns [Declaration ret] : t1= expression ( ',' t2= expression )* ;
    public final Declaration expressionList() throws RecognitionException {
        Declaration ret = null;
        int expressionList_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("expressionList"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2659:5: (t1= expression ( ',' t2= expression )* )
            // src/cedp/src2src/frontend/java/Java.g:2659:9: t1= expression ( ',' t2= expression )*
            {
            pushFollow(FOLLOW_expression_in_expressionList10945);
            t1=expression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t11);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2664:9: ( ',' t2= expression )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==41) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2664:10: ',' t2= expression
            	    {
            	    match(input,41,FOLLOW_41_in_expressionList10970); if (state.failed) return ret;
            	    pushFollow(FOLLOW_expression_in_expressionList10974);
            	    t2=expression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t2);
            	                      //ret_expr = new CommaExpression(list);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, expressionList_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "expressionList"


    // $ANTLR start "statementExpression"
    // src/cedp/src2src/frontend/java/Java.g:2673:1: statementExpression returns [Declaration ret] : t1= expression ;
    public final Declaration statementExpression() throws RecognitionException {
        Declaration ret = null;
        int statementExpression_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("statementExpression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2675:5: (t1= expression )
            // src/cedp/src2src/frontend/java/Java.g:2675:9: t1= expression
            {
            pushFollow(FOLLOW_expression_in_statementExpression11036);
            t1=expression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              ret = t1;
                              //expr = expression;
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, statementExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "statementExpression"


    // $ANTLR start "constantExpression"
    // src/cedp/src2src/frontend/java/Java.g:2683:1: constantExpression returns [Declaration ret] : t1= expression ;
    public final Declaration constantExpression() throws RecognitionException {
        Declaration ret = null;
        int constantExpression_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("constantExpression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2685:5: (t1= expression )
            // src/cedp/src2src/frontend/java/Java.g:2685:9: t1= expression
            {
            pushFollow(FOLLOW_expression_in_constantExpression11087);
            t1=expression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
                 
                              ret = t1;
                              //expr = expression;
                          
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, constantExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "constantExpression"


    // $ANTLR start "expression"
    // src/cedp/src2src/frontend/java/Java.g:2693:1: expression returns [Declaration ret_decl] : t1= conditionalExpression (t2= assignmentOperator t3= expression )? ;
    public final Declaration expression() throws RecognitionException {
        Declaration ret_decl = null;
        int expression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("expression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return ret_decl; }
            // src/cedp/src2src/frontend/java/Java.g:2696:5: (t1= conditionalExpression (t2= assignmentOperator t3= expression )? )
            // src/cedp/src2src/frontend/java/Java.g:2696:9: t1= conditionalExpression (t2= assignmentOperator t3= expression )?
            {
            pushFollow(FOLLOW_conditionalExpression_in_expression11147);
            t1=conditionalExpression();

            state._fsp--;
            if (state.failed) return ret_decl;
            if ( state.backtracking==0 ) {
                 
                              list.add(t1);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2701:9: (t2= assignmentOperator t3= expression )?
            int alt131=2;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2701:10: t2= assignmentOperator t3= expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression11174);
                    t2=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    pushFollow(FOLLOW_expression_in_expression11178);
                    t3=expression();

                    state._fsp--;
                    if (state.failed) return ret_decl;
                    if ( state.backtracking==0 ) {

                                      list.add(t2);
                                      list.add(t3);
                                      //ret_expr = new BinaryExpression(expr1, t1, expr2);
                                  
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, expression_StartIndex); }
        }
        return ret_decl;
    }
    // $ANTLR end "expression"


    // $ANTLR start "assignmentOperator"
    // src/cedp/src2src/frontend/java/Java.g:2711:1: assignmentOperator returns [Declaration ret] : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '<' '<' '<' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?);
    public final Declaration assignmentOperator() throws RecognitionException {
        Declaration ret = null;
        int assignmentOperator_StartIndex = input.index();
        Token t1=null;
        Token t2=null;
        Token t3=null;
        Token t4=null;

         if(dFlag) System.out.println("assignmentOperator"); AssignmentOperator op=null; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2713:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '<' '<' '<' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?)
            int alt132=12;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2713:9: '='
                    {
                    match(input,51,FOLLOW_51_in_assignmentOperator11238); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = new StringDeclaration("=");
                                      //op = AssignmentOperator.NORMAL;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2718:9: '+='
                    {
                    match(input,90,FOLLOW_90_in_assignmentOperator11262); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("+=");
                                      //op = AssignmentOperator.ADD;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2723:9: '-='
                    {
                    match(input,91,FOLLOW_91_in_assignmentOperator11286); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("-=");
                                      //op = AssignmentOperator.SUBTRACT;
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:2728:9: '*='
                    {
                    match(input,92,FOLLOW_92_in_assignmentOperator11310); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("*=");
                                      //op = AssignmentOperator.MULTIPLY;
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:2733:9: '/='
                    {
                    match(input,93,FOLLOW_93_in_assignmentOperator11334); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("/=");
                                      //op = AssignmentOperator.DIVIDE;
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:2738:9: '&='
                    {
                    match(input,94,FOLLOW_94_in_assignmentOperator11358); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("&=");
                                      //op = AssignmentOperator.BITWISE_AND;
                                  
                    }

                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:2743:9: '|='
                    {
                    match(input,95,FOLLOW_95_in_assignmentOperator11382); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("|=");
                                      //op = AssignmentOperator.BITWISE_INCLUSIVE_OR;
                                  
                    }

                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:2748:9: '^='
                    {
                    match(input,96,FOLLOW_96_in_assignmentOperator11406); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("^=");
                                      //op = AssignmentOperator.BITWISE_EXCLUSIVE_OR;
                                  
                    }

                    }
                    break;
                case 9 :
                    // src/cedp/src2src/frontend/java/Java.g:2753:9: '%='
                    {
                    match(input,97,FOLLOW_97_in_assignmentOperator11430); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = new StringDeclaration("?=");
                                      //op = AssignmentOperator.MODULUS;
                                  
                    }

                    }
                    break;
                case 10 :
                    // src/cedp/src2src/frontend/java/Java.g:2758:9: ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}?
                    {
                    t1=(Token)match(input,40,FOLLOW_40_in_assignmentOperator11465); if (state.failed) return ret;
                    t2=(Token)match(input,40,FOLLOW_40_in_assignmentOperator11469); if (state.failed) return ret;
                    t3=(Token)match(input,51,FOLLOW_51_in_assignmentOperator11473); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("<<");
                                      //op = AssignmentOperator.SHIFT_LEFT;
                                  
                    }

                    }
                    break;
                case 11 :
                    // src/cedp/src2src/frontend/java/Java.g:2768:9: ( '<' '<' '<' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}?
                    {
                    t1=(Token)match(input,42,FOLLOW_42_in_assignmentOperator11523); if (state.failed) return ret;
                    t2=(Token)match(input,42,FOLLOW_42_in_assignmentOperator11527); if (state.failed) return ret;
                    t3=(Token)match(input,42,FOLLOW_42_in_assignmentOperator11531); if (state.failed) return ret;
                    t4=(Token)match(input,51,FOLLOW_51_in_assignmentOperator11535); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() &&
                              t3.getLine() == t4.getLine() &&
                              t3.getCharPositionInLine() + 1 == t4.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() &&\n          $t3.getLine() == $t4.getLine() &&\n          $t3.getCharPositionInLine() + 1 == $t4.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("<<<");
                                      //op = AssignmentOperator.SHIFT_LEFT_TRIPLE;
                                  
                    }

                    }
                    break;
                case 12 :
                    // src/cedp/src2src/frontend/java/Java.g:2779:9: ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?
                    {
                    t1=(Token)match(input,42,FOLLOW_42_in_assignmentOperator11580); if (state.failed) return ret;
                    t2=(Token)match(input,42,FOLLOW_42_in_assignmentOperator11584); if (state.failed) return ret;
                    t3=(Token)match(input,51,FOLLOW_51_in_assignmentOperator11588); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration(">>");
                                      //op = AssignmentOperator.SHIFT_RIGHT;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, assignmentOperator_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "assignmentOperator"


    // $ANTLR start "conditionalExpression"
    // src/cedp/src2src/frontend/java/Java.g:2791:1: conditionalExpression returns [Declaration ret] : t1= conditionalOrExpression ( '?' t2= expression ':' t33= expression )? ;
    public final Declaration conditionalExpression() throws RecognitionException {
        Declaration ret = null;
        int conditionalExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t33 = null;


         if(dFlag) System.out.println("conditionalExpression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2794:5: (t1= conditionalOrExpression ( '?' t2= expression ':' t33= expression )? )
            // src/cedp/src2src/frontend/java/Java.g:2794:9: t1= conditionalOrExpression ( '?' t2= expression ':' t33= expression )?
            {
            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression11658);
            t1=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              //ret = t1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2799:9: ( '?' t2= expression ':' t33= expression )?
            int alt133=2;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2799:11: '?' t2= expression ':' t33= expression
                    {
                    match(input,64,FOLLOW_64_in_conditionalExpression11684); if (state.failed) return ret;
                    pushFollow(FOLLOW_expression_in_conditionalExpression11688);
                    t2=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,75,FOLLOW_75_in_conditionalExpression11690); if (state.failed) return ret;
                    pushFollow(FOLLOW_expression_in_conditionalExpression11694);
                    t33=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("?"));
                                      list.add(t2);
                                      list.add(new StringDeclaration(":"));
                                      list.add(t3);
                                      //ret_expr = new ConditionalExpression(t1, t2, t3);
                                  
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, conditionalExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "conditionalExpression"


    // $ANTLR start "conditionalOrExpression"
    // src/cedp/src2src/frontend/java/Java.g:2811:1: conditionalOrExpression returns [Declaration ret] : t1= conditionalAndExpression ( '||' t2= conditionalAndExpression )* ;
    public final Declaration conditionalOrExpression() throws RecognitionException {
        Declaration ret = null;
        int conditionalOrExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("conditionalOrExpression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2814:5: (t1= conditionalAndExpression ( '||' t2= conditionalAndExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2814:9: t1= conditionalAndExpression ( '||' t2= conditionalAndExpression )*
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression11767);
            t1=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2819:9: ( '||' t2= conditionalAndExpression )*
            loop134:
            do {
                int alt134=2;
                alt134 = dfa134.predict(input);
                switch (alt134) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2819:11: '||' t2= conditionalAndExpression
            	    {
            	    match(input,98,FOLLOW_98_in_conditionalOrExpression11793); if (state.failed) return ret;
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression11797);
            	    t2=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration("||");
            	                      list.add(t2);
            	                      //ret_expr = new BinaryExpression(expr1, BinaryOperator.LOGICAL_OR, expr2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, conditionalOrExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "conditionalOrExpression"


    // $ANTLR start "conditionalAndExpression"
    // src/cedp/src2src/frontend/java/Java.g:2829:1: conditionalAndExpression returns [Declaration ret] : t1= inclusiveOrExpression ( '&&' t2= inclusiveOrExpression )* ;
    public final Declaration conditionalAndExpression() throws RecognitionException {
        Declaration ret = null;
        int conditionalAndExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("conditionalAndExpression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2832:5: (t1= inclusiveOrExpression ( '&&' t2= inclusiveOrExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2832:9: t1= inclusiveOrExpression ( '&&' t2= inclusiveOrExpression )*
            {
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression11870);
            t1=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2837:9: ( '&&' t2= inclusiveOrExpression )*
            loop135:
            do {
                int alt135=2;
                alt135 = dfa135.predict(input);
                switch (alt135) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2837:11: '&&' t2= inclusiveOrExpression
            	    {
            	    match(input,99,FOLLOW_99_in_conditionalAndExpression11896); if (state.failed) return ret;
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression11900);
            	    t2=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(new StringDeclaration("&&"));
            	                      list.add(t2);
            	                      //ret_expr = new BinaryExpression(expr1, BinaryOperator.LOGICAL_AND, expr2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, conditionalAndExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "conditionalAndExpression"


    // $ANTLR start "inclusiveOrExpression"
    // src/cedp/src2src/frontend/java/Java.g:2847:1: inclusiveOrExpression returns [Declaration ret] : t1= exclusiveOrExpression ( '|' t2= exclusiveOrExpression )* ;
    public final Declaration inclusiveOrExpression() throws RecognitionException {
        Declaration ret = null;
        int inclusiveOrExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("inclusiveOrExpression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2850:5: (t1= exclusiveOrExpression ( '|' t2= exclusiveOrExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2850:9: t1= exclusiveOrExpression ( '|' t2= exclusiveOrExpression )*
            {
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11973);
            t1=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2855:9: ( '|' t2= exclusiveOrExpression )*
            loop136:
            do {
                int alt136=2;
                alt136 = dfa136.predict(input);
                switch (alt136) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2855:11: '|' t2= exclusiveOrExpression
            	    {
            	    match(input,100,FOLLOW_100_in_inclusiveOrExpression11999); if (state.failed) return ret;
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression12005);
            	    t2=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       
            	                      list.add(new StringDeclaration("|"));
            	                      list.add(t2);
            	                      //ret_expr = new BinaryExpression(expr1, BinaryOperator.BITWISE_INCLUSIVE_OR, expr2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, inclusiveOrExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "inclusiveOrExpression"


    // $ANTLR start "exclusiveOrExpression"
    // src/cedp/src2src/frontend/java/Java.g:2865:1: exclusiveOrExpression returns [Declaration ret] : t1= andExpression ( '^' t2= andExpression )* ;
    public final Declaration exclusiveOrExpression() throws RecognitionException {
        Declaration ret = null;
        int exclusiveOrExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("exclusiveOrExpression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2868:5: (t1= andExpression ( '^' t2= andExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2868:9: t1= andExpression ( '^' t2= andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression12078);
            t1=andExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               
                              list.add(t1);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2873:9: ( '^' t2= andExpression )*
            loop137:
            do {
                int alt137=2;
                alt137 = dfa137.predict(input);
                switch (alt137) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2873:11: '^' t2= andExpression
            	    {
            	    match(input,101,FOLLOW_101_in_exclusiveOrExpression12104); if (state.failed) return ret;
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression12110);
            	    t2=andExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       
            	                      list.add(new StringDeclaration("^"));
            	                      list.add(t2);
            	                      //ret_expr = new BinaryExpression(expr1, BinaryOperator.BITWISE_EXCLUSIVE_OR, expr2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, exclusiveOrExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "exclusiveOrExpression"


    // $ANTLR start "andExpression"
    // src/cedp/src2src/frontend/java/Java.g:2883:1: andExpression returns [Declaration ret] : t1= equalityExpression ( '&' t2= equalityExpression )* ;
    public final Declaration andExpression() throws RecognitionException {
        Declaration ret = null;
        int andExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("andExpression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2886:5: (t1= equalityExpression ( '&' t2= equalityExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2886:9: t1= equalityExpression ( '&' t2= equalityExpression )*
            {
            pushFollow(FOLLOW_equalityExpression_in_andExpression12183);
            t1=equalityExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               
                              list.add(t1);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2891:9: ( '&' t2= equalityExpression )*
            loop138:
            do {
                int alt138=2;
                alt138 = dfa138.predict(input);
                switch (alt138) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2891:11: '&' t2= equalityExpression
            	    {
            	    match(input,43,FOLLOW_43_in_andExpression12209); if (state.failed) return ret;
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression12213);
            	    t2=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       
            	                      list.add(new StringDeclaration("&"));
            	                      list.add(t2);
            	                      //ret_expr = new BinaryExpression(expr1, BinaryOperator.BITWISE_AND, expr2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, andExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "andExpression"


    // $ANTLR start "equalityExpression"
    // src/cedp/src2src/frontend/java/Java.g:2901:1: equalityExpression returns [Declaration ret] : t1= instanceOfExpression ( ( '==' | '!=' ) t2= instanceOfExpression )* ;
    public final Declaration equalityExpression() throws RecognitionException {
        Declaration ret = null;
        int equalityExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("equalityExpression"); BinaryOperator op=null; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2904:5: (t1= instanceOfExpression ( ( '==' | '!=' ) t2= instanceOfExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2904:9: t1= instanceOfExpression ( ( '==' | '!=' ) t2= instanceOfExpression )*
            {
            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression12284);
            t1=instanceOfExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2909:9: ( ( '==' | '!=' ) t2= instanceOfExpression )*
            loop140:
            do {
                int alt140=2;
                alt140 = dfa140.predict(input);
                switch (alt140) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2909:11: ( '==' | '!=' ) t2= instanceOfExpression
            	    {
            	    // src/cedp/src2src/frontend/java/Java.g:2909:11: ( '==' | '!=' )
            	    int alt139=2;
            	    int LA139_0 = input.LA(1);

            	    if ( (LA139_0==102) ) {
            	        alt139=1;
            	    }
            	    else if ( (LA139_0==103) ) {
            	        alt139=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ret;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 139, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt139) {
            	        case 1 :
            	            // src/cedp/src2src/frontend/java/Java.g:2909:12: '=='
            	            {
            	            match(input,102,FOLLOW_102_in_equalityExpression12311); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op=BinaryOperator.COMPARE_EQ; 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // src/cedp/src2src/frontend/java/Java.g:2909:52: '!='
            	            {
            	            match(input,103,FOLLOW_103_in_equalityExpression12316); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op = BinaryOperator.COMPARE_NE; 
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression12324);
            	    t2=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(op);
            	                      list.add(t2);
            	                      //ret_expr = new BinaryExpression(expr1, op, expr2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, equalityExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "equalityExpression"


    // $ANTLR start "instanceOfExpression"
    // src/cedp/src2src/frontend/java/Java.g:2919:1: instanceOfExpression returns [Declaration ret] : t1= relationalExpression ( 'instanceof' t2= type )? ;
    public final Declaration instanceOfExpression() throws RecognitionException {
        Declaration ret = null;
        int instanceOfExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("instanceOfExpression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2922:5: (t1= relationalExpression ( 'instanceof' t2= type )? )
            // src/cedp/src2src/frontend/java/Java.g:2922:9: t1= relationalExpression ( 'instanceof' t2= type )?
            {
            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression12395);
            t1=relationalExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               
                              list.add(t1);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2927:9: ( 'instanceof' t2= type )?
            int alt141=2;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2927:10: 'instanceof' t2= type
                    {
                    match(input,104,FOLLOW_104_in_instanceOfExpression12420); if (state.failed) return ret;
                    pushFollow(FOLLOW_type_in_instanceOfExpression12424);
                    t2=type();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      list.add(new StringDeclaration("instanceof"));
                                      list.add(t2);
                                      //ret_expr = new BinaryExpresion(expr1, BinaryOperator.INSTANCEOF, expr2);
                                  
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, instanceOfExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "instanceOfExpression"


    // $ANTLR start "relationalExpression"
    // src/cedp/src2src/frontend/java/Java.g:2937:1: relationalExpression returns [Declaration ret] : t1= shiftExpression (t2= relationalOp t3= shiftExpression )* ;
    public final Declaration relationalExpression() throws RecognitionException {
        Declaration ret = null;
        int relationalExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("relationalExpression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2940:5: (t1= shiftExpression (t2= relationalOp t3= shiftExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2940:9: t1= shiftExpression (t2= relationalOp t3= shiftExpression )*
            {
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression12495);
            t1=shiftExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               
                              list.add(t1);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2945:9: (t2= relationalOp t3= shiftExpression )*
            loop142:
            do {
                int alt142=2;
                alt142 = dfa142.predict(input);
                switch (alt142) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2945:11: t2= relationalOp t3= shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression12523);
            	    t2=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression12527);
            	    t3=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t2);
            	                      list.add(t3);
            	                      //ret_expr = new BinaryExpression(expr1, relationalOp, expr2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, relationalExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "relationalExpression"


    // $ANTLR start "relationalOp"
    // src/cedp/src2src/frontend/java/Java.g:2955:1: relationalOp returns [Declaration ret] : ( ( '<' '=' )=>t1= '<' t2= '=' {...}? | ( '>' '=' )=>t1= '>' t2= '=' {...}? | '<' | '>' );
    public final Declaration relationalOp() throws RecognitionException {
        Declaration ret = null;
        int relationalOp_StartIndex = input.index();
        Token t1=null;
        Token t2=null;

         if(dFlag) System.out.println("relationalOp"); BinaryOperator op=null; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2957:5: ( ( '<' '=' )=>t1= '<' t2= '=' {...}? | ( '>' '=' )=>t1= '>' t2= '=' {...}? | '<' | '>' )
            int alt143=4;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:2957:9: ( '<' '=' )=>t1= '<' t2= '=' {...}?
                    {
                    t1=(Token)match(input,40,FOLLOW_40_in_relationalOp12596); if (state.failed) return ret;
                    t2=(Token)match(input,51,FOLLOW_51_in_relationalOp12600); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "relationalOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {

                                      ret = new StringDeclaration("<=");
                                      //op = BinaryOperator.LE;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:2964:9: ( '>' '=' )=>t1= '>' t2= '=' {...}?
                    {
                    t1=(Token)match(input,42,FOLLOW_42_in_relationalOp12643); if (state.failed) return ret;
                    t2=(Token)match(input,51,FOLLOW_51_in_relationalOp12647); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "relationalOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration(">=");
                                      //op = BinaryOperator.GE;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:2971:9: '<'
                    {
                    match(input,40,FOLLOW_40_in_relationalOp12681); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("<");
                                      //op = BinaryOperator.LT;
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:2976:9: '>'
                    {
                    match(input,42,FOLLOW_42_in_relationalOp12705); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration(">");
                                      //op = BinaryOperator.GT;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, relationalOp_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "relationalOp"


    // $ANTLR start "shiftExpression"
    // src/cedp/src2src/frontend/java/Java.g:2984:1: shiftExpression returns [Declaration ret] : t1= additiveExpression (t2= shiftOp t3= additiveExpression )* ;
    public final Declaration shiftExpression() throws RecognitionException {
        Declaration ret = null;
        int shiftExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("shiftExpression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:2987:5: (t1= additiveExpression (t2= shiftOp t3= additiveExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:2987:9: t1= additiveExpression (t2= shiftOp t3= additiveExpression )*
            {
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression12765);
            t1=additiveExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:2992:9: (t2= shiftOp t3= additiveExpression )*
            loop144:
            do {
                int alt144=2;
                alt144 = dfa144.predict(input);
                switch (alt144) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:2992:11: t2= shiftOp t3= additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression12793);
            	    t2=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression12797);
            	    t3=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {

            	                      list.add(t2);
            	                      list.add(t3);
            	                      //ret_expr = new BinaryExpression(expr1, shiftOp, expr2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, shiftExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "shiftExpression"


    // $ANTLR start "shiftOp"
    // src/cedp/src2src/frontend/java/Java.g:3002:1: shiftOp returns [Declaration ret] : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);
    public final Declaration shiftOp() throws RecognitionException {
        Declaration ret = null;
        int shiftOp_StartIndex = input.index();
        Token t1=null;
        Token t2=null;
        Token t3=null;

         if(dFlag) System.out.println("shiftOp"); BinaryOperator op=null; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3004:5: ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?)
            int alt145=3;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==40) && (synpred215_Java())) {
                alt145=1;
            }
            else if ( (LA145_0==42) ) {
                int LA145_2 = input.LA(2);

                if ( (LA145_2==42) ) {
                    int LA145_3 = input.LA(3);

                    if ( (synpred216_Java()) ) {
                        alt145=2;
                    }
                    else if ( (synpred217_Java()) ) {
                        alt145=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 145, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ret;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 145, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3004:9: ( '<' '<' )=>t1= '<' t2= '<' {...}?
                    {
                    t1=(Token)match(input,40,FOLLOW_40_in_shiftOp12866); if (state.failed) return ret;
                    t2=(Token)match(input,40,FOLLOW_40_in_shiftOp12870); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("<<");
                                      //op = BinaryOperator.SHIFT_LEFT;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3011:9: ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?
                    {
                    t1=(Token)match(input,42,FOLLOW_42_in_shiftOp12915); if (state.failed) return ret;
                    t2=(Token)match(input,42,FOLLOW_42_in_shiftOp12919); if (state.failed) return ret;
                    t3=(Token)match(input,42,FOLLOW_42_in_shiftOp12923); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration("<<<");
                                      //op = BinaryOperator.SHIFT_LEFT_TRIPLE;
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:3020:9: ( '>' '>' )=>t1= '>' t2= '>' {...}?
                    {
                    t1=(Token)match(input,42,FOLLOW_42_in_shiftOp12966); if (state.failed) return ret;
                    t2=(Token)match(input,42,FOLLOW_42_in_shiftOp12970); if (state.failed) return ret;
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ret;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                       
                                      ret = new StringDeclaration(">>");
                                      //op = BinaryOperator.SHIFT_RIGHT;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, shiftOp_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "shiftOp"


    // $ANTLR start "additiveExpression"
    // src/cedp/src2src/frontend/java/Java.g:3030:1: additiveExpression returns [Declaration ret] : t1= multiplicativeExpression ( ( '+' | '-' ) t2= multiplicativeExpression )* ;
    public final Declaration additiveExpression() throws RecognitionException {
        Declaration ret = null;
        int additiveExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("additiveExpression"); BinaryOperator op=null; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3033:5: (t1= multiplicativeExpression ( ( '+' | '-' ) t2= multiplicativeExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:3033:9: t1= multiplicativeExpression ( ( '+' | '-' ) t2= multiplicativeExpression )*
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression13040);
            t1=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {
               
                              list.add(t1);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:3038:9: ( ( '+' | '-' ) t2= multiplicativeExpression )*
            loop147:
            do {
                int alt147=2;
                alt147 = dfa147.predict(input);
                switch (alt147) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:3038:11: ( '+' | '-' ) t2= multiplicativeExpression
            	    {
            	    // src/cedp/src2src/frontend/java/Java.g:3038:11: ( '+' | '-' )
            	    int alt146=2;
            	    int LA146_0 = input.LA(1);

            	    if ( (LA146_0==105) ) {
            	        alt146=1;
            	    }
            	    else if ( (LA146_0==106) ) {
            	        alt146=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ret;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 146, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt146) {
            	        case 1 :
            	            // src/cedp/src2src/frontend/java/Java.g:3038:12: '+'
            	            {
            	            match(input,105,FOLLOW_105_in_additiveExpression13067); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op = BinaryOperator.ADD; 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // src/cedp/src2src/frontend/java/Java.g:3038:46: '-'
            	            {
            	            match(input,106,FOLLOW_106_in_additiveExpression13072); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op = BinaryOperator.SUBTRACT; 
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression13079);
            	    t2=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       
            	                      list.add(op);
            	                      list.add(t2);
            	                      //ret_expr = new BinaryExpression(expr1, op, expr2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, additiveExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "additiveExpression"


    // $ANTLR start "multiplicativeExpression"
    // src/cedp/src2src/frontend/java/Java.g:3048:1: multiplicativeExpression returns [Declaration ret] : t1= unaryExpression ( ( '*' | '/' | '%' ) t2= unaryExpression )* ;
    public final Declaration multiplicativeExpression() throws RecognitionException {
        Declaration ret = null;
        int multiplicativeExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("multiplicativeExpression"); BinaryOperator op=null; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3051:5: (t1= unaryExpression ( ( '*' | '/' | '%' ) t2= unaryExpression )* )
            // src/cedp/src2src/frontend/java/Java.g:3051:9: t1= unaryExpression ( ( '*' | '/' | '%' ) t2= unaryExpression )*
            {
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression13150);
            t1=unaryExpression();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              //ret_expr = expr1;
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:3056:9: ( ( '*' | '/' | '%' ) t2= unaryExpression )*
            loop149:
            do {
                int alt149=2;
                alt149 = dfa149.predict(input);
                switch (alt149) {
            	case 1 :
            	    // src/cedp/src2src/frontend/java/Java.g:3056:11: ( '*' | '/' | '%' ) t2= unaryExpression
            	    {
            	    // src/cedp/src2src/frontend/java/Java.g:3056:11: ( '*' | '/' | '%' )
            	    int alt148=3;
            	    switch ( input.LA(1) ) {
            	    case 30:
            	        {
            	        alt148=1;
            	        }
            	        break;
            	    case 107:
            	        {
            	        alt148=2;
            	        }
            	        break;
            	    case 108:
            	        {
            	        alt148=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return ret;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 148, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt148) {
            	        case 1 :
            	            // src/cedp/src2src/frontend/java/Java.g:3056:13: '*'
            	            {
            	            match(input,30,FOLLOW_30_in_multiplicativeExpression13178); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op = BinaryOperator.MULTIPLY; 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // src/cedp/src2src/frontend/java/Java.g:3056:53: '/'
            	            {
            	            match(input,107,FOLLOW_107_in_multiplicativeExpression13184); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op = BinaryOperator.DIVIDE; 
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // src/cedp/src2src/frontend/java/Java.g:3056:91: '%'
            	            {
            	            match(input,108,FOLLOW_108_in_multiplicativeExpression13190); if (state.failed) return ret;
            	            if ( state.backtracking==0 ) {
            	               op = BinaryOperator.MODULUS; 
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression13198);
            	    t2=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return ret;
            	    if ( state.backtracking==0 ) {
            	       
            	                      list.add(op);
            	                      list.add(t2);
            	                      //ret_expr = new BinaryExpression(expr1, op, expr2);
            	                  
            	    }

            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, multiplicativeExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "multiplicativeExpression"


    // $ANTLR start "unaryExpression"
    // src/cedp/src2src/frontend/java/Java.g:3066:1: unaryExpression returns [Declaration ret] : ( '+' t1= unaryExpression | '-' t2= unaryExpression | '++' t3= unaryExpression | '--' t4= unaryExpression | t5= unaryExpressionNotPlusMinus );
    public final Declaration unaryExpression() throws RecognitionException {
        Declaration ret = null;
        int unaryExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("unaryExpression"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3069:5: ( '+' t1= unaryExpression | '-' t2= unaryExpression | '++' t3= unaryExpression | '--' t4= unaryExpression | t5= unaryExpressionNotPlusMinus )
            int alt150=5;
            alt150 = dfa150.predict(input);
            switch (alt150) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3069:9: '+' t1= unaryExpression
                    {
                    match(input,105,FOLLOW_105_in_unaryExpression13267); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression13271);
                    t1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("+"));
                                      list.add(t1);
                                      //ret_expr = new UnaryExpression(UnaryOperator.PLUS, tok1);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3075:9: '-' t2= unaryExpression
                    {
                    match(input,106,FOLLOW_106_in_unaryExpression13295); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression13299);
                    t2=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      list.add(new StringDeclaration("-"));
                                      list.add(t2);
                                      //ret_expr = new UnaryExpression(UnaryOperator.MINUS, tok2);
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:3081:9: '++' t3= unaryExpression
                    {
                    match(input,109,FOLLOW_109_in_unaryExpression13323); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression13327);
                    t3=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      list.add(new StringDeclaration("++"));
                                      list.add(t3);
                                      //ret_expr = new UnaryExpression(UnaryOperator.PRE_INCREMENT, tok3);
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:3087:9: '--' t4= unaryExpression
                    {
                    match(input,110,FOLLOW_110_in_unaryExpression13351); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression13355);
                    t4=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      list.add(new StringDeclaration("--"));
                                      list.add(t4);
                                      //ret_expr = new UnaryExpression(UnaryOperator.PRE_DECREMENT, tok4);
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:3093:9: t5= unaryExpressionNotPlusMinus
                    {
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression13381);
                    t5=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      list.add(t5);
                                      //ret_expr = t5;
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, unaryExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "unaryExpression"


    // $ANTLR start "unaryExpressionNotPlusMinus"
    // src/cedp/src2src/frontend/java/Java.g:3100:1: unaryExpressionNotPlusMinus returns [Declaration ret] : ( '~' t1= unaryExpression | '!' t2= unaryExpression | t3= castExpression | t4= primary (t5= selector )* ( '++' | '--' )? );
    public final Declaration unaryExpressionNotPlusMinus() throws RecognitionException {
        Declaration ret = null;
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("unaryExpressionNotPlusMinus"); int c1, c2; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3103:5: ( '~' t1= unaryExpression | '!' t2= unaryExpression | t3= castExpression | t4= primary (t5= selector )* ( '++' | '--' )? )
            int alt153=4;
            alt153 = dfa153.predict(input);
            switch (alt153) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3103:9: '~' t1= unaryExpression
                    {
                    match(input,111,FOLLOW_111_in_unaryExpressionNotPlusMinus13437); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus13441);
                    t1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      list.add(new StringDeclaration("~"));
                                      list.add(t1);
                                      //ret_expr = new UnaryExpression(UnaryOperator.BITWISE_COMPLEMENT, t1);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3109:9: '!' t2= unaryExpression
                    {
                    match(input,112,FOLLOW_112_in_unaryExpressionNotPlusMinus13465); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus13469);
                    t2=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      list.add(new StringDeclaration("!"));
                                      list.add(t2);
                                      //ret_expr = new UnaryExpression(UnaryOperator.LOGICAL_NEGATION, t2);
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:3115:9: t3= castExpression
                    {
                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus13495);
                    t3=castExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {
                       
                                      list.add(t3);
                                      //ret_expr = t3;
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:3120:9: t4= primary (t5= selector )* ( '++' | '--' )?
                    {
                    if ( state.backtracking==0 ) {
                      c1=0; c2=0;
                    }
                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus13523);
                    t4=primary();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t4);
                                      //ret_expr = t4;
                                      //prev_expr = t4;
                                      /* TODO */
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:3127:9: (t5= selector )*
                    loop151:
                    do {
                        int alt151=2;
                        alt151 = dfa151.predict(input);
                        switch (alt151) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:3127:10: t5= selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus13550);
                    	    t5=selector();

                    	    state._fsp--;
                    	    if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(t5);
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop151;
                        }
                    } while (true);

                    // src/cedp/src2src/frontend/java/Java.g:3131:12: ( '++' | '--' )?
                    int alt152=3;
                    alt152 = dfa152.predict(input);
                    switch (alt152) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:3131:13: '++'
                            {
                            match(input,109,FOLLOW_109_in_unaryExpressionNotPlusMinus13578); if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                          c1=1;
                                          list.add(new StringDeclaration("++"));
                                      
                            }

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:3134:12: '--'
                            {
                            match(input,110,FOLLOW_110_in_unaryExpressionNotPlusMinus13583); if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                          c2=1;
                                          list.add(new StringDeclaration("--"));
                                      
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"


    // $ANTLR start "castExpression"
    // src/cedp/src2src/frontend/java/Java.g:3140:1: castExpression returns [Declaration ret] : ( '(' t1= primitiveType ')' t2= unaryExpression | '(' (t3= type | t4= expression ) ')' t5= unaryExpressionNotPlusMinus );
    public final Declaration castExpression() throws RecognitionException {
        Declaration ret = null;
        int castExpression_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("castExpression"); int check1, check2; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3143:5: ( '(' t1= primitiveType ')' t2= unaryExpression | '(' (t3= type | t4= expression ) ')' t5= unaryExpressionNotPlusMinus )
            int alt155=2;
            alt155 = dfa155.predict(input);
            switch (alt155) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3143:8: '(' t1= primitiveType ')' t2= unaryExpression
                    {
                    match(input,66,FOLLOW_66_in_castExpression13627); if (state.failed) return ret;
                    pushFollow(FOLLOW_primitiveType_in_castExpression13631);
                    t1=primitiveType();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,67,FOLLOW_67_in_castExpression13633); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpression_in_castExpression13637);
                    t2=unaryExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      List list = new LinkedList();
                                      list.add(t1);
                                      ret_expr = new NewExpression(list, t2);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3149:12: '(' (t3= type | t4= expression ) ')' t5= unaryExpressionNotPlusMinus
                    {
                    if ( state.backtracking==0 ) {
                      check1=0; check2=0;
                    }
                    match(input,66,FOLLOW_66_in_castExpression13666); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:3149:38: (t3= type | t4= expression )
                    int alt154=2;
                    alt154 = dfa154.predict(input);
                    switch (alt154) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:3149:39: t3= type
                            {
                            pushFollow(FOLLOW_type_in_castExpression13671);
                            t3=type();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {
                              check1=1;
                            }

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:3149:60: t4= expression
                            {
                            pushFollow(FOLLOW_expression_in_castExpression13678);
                            t4=expression();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {
                              check2=1;
                            }

                            }
                            break;

                    }

                    match(input,67,FOLLOW_67_in_castExpression13683); if (state.failed) return ret;
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression13687);
                    t5=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      if(check1 == 1){
                                          List list = new LinkedList();
                                          list.add(t3);
                                          ret_expr = new NewExpression(list, t5);
                                      }
                                      else if (check2 == 1){
                                          ret_expr = new RangeExpression(t4, t5); /* TODO Make sure it is the right class */
                                      }
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, castExpression_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "castExpression"


    // $ANTLR start "primary"
    // src/cedp/src2src/frontend/java/Java.g:3162:1: primary returns [Declaration ret] : (t1= parExpression | 'this' ( '.' t2= Identifier )* (t3= identifierSuffix )? | 'super' t4= superSuffix | t5= literal | 'new' t6= creator | t7= Identifier ( '.' t8= Identifier )* (t9= identifierSuffix )? | t10= primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );
    public final Declaration primary() throws RecognitionException {
        Declaration ret = null;
        int primary_StartIndex = input.index();
        Token t2=null;
        Token t7=null;
        Token t8=null;
        JavaParser.parExpression_return t1 = null;

        JavaParser.identifierSuffix_return t3 = null;

        Declaration t4 = null;

        JavaParser.literal_return t5 = null;

        JavaParser.creator_return t6 = null;

        JavaParser.identifierSuffix_return t9 = null;

        Declaration t10 = null;


         if(dFlag) System.out.println("primary"); String str=""; List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3165:5: (t1= parExpression | 'this' ( '.' t2= Identifier )* (t3= identifierSuffix )? | 'super' t4= superSuffix | t5= literal | 'new' t6= creator | t7= Identifier ( '.' t8= Identifier )* (t9= identifierSuffix )? | t10= primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' )
            int alt161=8;
            alt161 = dfa161.predict(input);
            switch (alt161) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3165:9: t1= parExpression
                    {
                    pushFollow(FOLLOW_parExpression_in_primary13745);
                    t1=parExpression();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      //ret_expr = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3170:9: 'this' ( '.' t2= Identifier )* (t3= identifierSuffix )?
                    {
                    match(input,69,FOLLOW_69_in_primary13769); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("this"));
                                      //prev_expr = new OperatorID("this");
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:3175:9: ( '.' t2= Identifier )*
                    loop156:
                    do {
                        int alt156=2;
                        alt156 = dfa156.predict(input);
                        switch (alt156) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:3175:10: '.' t2= Identifier
                    	    {
                    	    match(input,29,FOLLOW_29_in_primary13794); if (state.failed) return ret;
                    	    t2=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary13798); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("."));
                    	                      list.add(t2);
                    	                      //prev_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS , new NameID((t2!=null?t2.getText():null)));
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop156;
                        }
                    } while (true);

                    // src/cedp/src2src/frontend/java/Java.g:3182:9: (t3= identifierSuffix )?
                    int alt157=2;
                    alt157 = dfa157.predict(input);
                    switch (alt157) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:3182:10: t3= identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary13836);
                            t3=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(t3);
                                              //prev_expr = t3;
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:3189:9: 'super' t4= superSuffix
                    {
                    match(input,65,FOLLOW_65_in_primary13888); if (state.failed) return ret;
                    pushFollow(FOLLOW_superSuffix_in_primary13892);
                    t4=superSuffix();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("super"));
                                      list.add(t4);
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:3194:9: t5= literal
                    {
                    pushFollow(FOLLOW_literal_in_primary13918);
                    t5=literal();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t5);
                                      //ret_expr = t4;
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:3199:9: 'new' t6= creator
                    {
                    match(input,113,FOLLOW_113_in_primary13942); if (state.failed) return ret;
                    pushFollow(FOLLOW_creator_in_primary13946);
                    t6=creator();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("new"));
                                      list.add(t6);
                                      //ret_expr = new UnaryExpression(UnaryOperator.NEW, t11);
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:3205:9: t7= Identifier ( '.' t8= Identifier )* (t9= identifierSuffix )?
                    {
                    t7=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary13972); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration((t7!=null?t7.getText():null)));
                                      //prev_expr = new NameID((t5!=null?input.toString(t5.start,t5.stop):null));
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:3210:9: ( '.' t8= Identifier )*
                    loop158:
                    do {
                        int alt158=2;
                        alt158 = dfa158.predict(input);
                        switch (alt158) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:3210:10: '.' t8= Identifier
                    	    {
                    	    match(input,29,FOLLOW_29_in_primary13997); if (state.failed) return ret;
                    	    t8=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary14001); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("."));
                    	                      list.add(new StringDeclaration((t8!=null?t8.getText():null)));
                    	                      //prev_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS , new NameID((t6!=null?input.toString(t6.start,t6.stop):null)));
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);

                    // src/cedp/src2src/frontend/java/Java.g:3217:9: (t9= identifierSuffix )?
                    int alt159=2;
                    alt159 = dfa159.predict(input);
                    switch (alt159) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:3217:10: t9= identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary14040);
                            t9=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(new StringDeclaration((t9!=null?input.toString(t9.start,t9.stop):null)));
                                              //prev_expr = t3;
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:3224:9: t10= primitiveType ( '[' ']' )* '.' 'class'
                    {
                    pushFollow(FOLLOW_primitiveType_in_primary14094);
                    t10=primitiveType();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t10);
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:3228:9: ( '[' ']' )*
                    loop160:
                    do {
                        int alt160=2;
                        int LA160_0 = input.LA(1);

                        if ( (LA160_0==48) ) {
                            alt160=1;
                        }


                        switch (alt160) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:3228:10: '[' ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_primary14120); if (state.failed) return ret;
                    	    match(input,49,FOLLOW_49_in_primary14122); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("[]"));
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop160;
                        }
                    } while (true);

                    match(input,29,FOLLOW_29_in_primary14149); if (state.failed) return ret;
                    match(input,37,FOLLOW_37_in_primary14151); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("class"));
                                  
                    }

                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:3237:9: 'void' '.' 'class'
                    {
                    match(input,47,FOLLOW_47_in_primary14175); if (state.failed) return ret;
                    match(input,29,FOLLOW_29_in_primary14177); if (state.failed) return ret;
                    match(input,37,FOLLOW_37_in_primary14179); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("void"));
                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("class"));
                                      //ret_expr = new AccessExpression(new OperatorID("void"), AccessOperator.MEMBER_ACCESS , new OperatorID("class"));
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, primary_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "primary"

    public static class identifierSuffix_return extends ParserRuleReturnScope {
        public Declaration ret;
    };

    // $ANTLR start "identifierSuffix"
    // src/cedp/src2src/frontend/java/Java.g:3246:1: identifierSuffix returns [Declaration ret] : ( ( '[' ']' )+ '.' 'class' | ( '[' t1= expression ']' )+ | t2= arguments | '.' 'class' | '.' t3= explicitGenericInvocation | '.' 'this' | '.' 'super' t4= arguments | '.' 'new' t5= innerCreator );
    public final JavaParser.identifierSuffix_return identifierSuffix() throws RecognitionException {
        JavaParser.identifierSuffix_return retval = new JavaParser.identifierSuffix_return();
        retval.start = input.LT(1);
        int identifierSuffix_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("identifierSuffix"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // src/cedp/src2src/frontend/java/Java.g:3249:5: ( ( '[' ']' )+ '.' 'class' | ( '[' t1= expression ']' )+ | t2= arguments | '.' 'class' | '.' t3= explicitGenericInvocation | '.' 'this' | '.' 'super' t4= arguments | '.' 'new' t5= innerCreator )
            int alt164=8;
            alt164 = dfa164.predict(input);
            switch (alt164) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3249:9: ( '[' ']' )+ '.' 'class'
                    {
                    // src/cedp/src2src/frontend/java/Java.g:3249:9: ( '[' ']' )+
                    int cnt162=0;
                    loop162:
                    do {
                        int alt162=2;
                        int LA162_0 = input.LA(1);

                        if ( (LA162_0==48) ) {
                            alt162=1;
                        }


                        switch (alt162) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:3249:10: '[' ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_identifierSuffix14236); if (state.failed) return retval;
                    	    match(input,49,FOLLOW_49_in_identifierSuffix14238); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("[]"));
                    	                      //list.add(new ArraySpecifier());
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt162 >= 1 ) break loop162;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(162, input);
                                throw eee;
                        }
                        cnt162++;
                    } while (true);

                    match(input,29,FOLLOW_29_in_identifierSuffix14265); if (state.failed) return retval;
                    match(input,37,FOLLOW_37_in_identifierSuffix14267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("class"));
                                      //ArrayAccess lhs = new ArrayAccess(prev_expr), list);
                                      //ret_expr = new AccessExpression(lhs, AccessOperator.MEMBER_ACCESS, new OperatorID("class"));
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3261:9: ( '[' t1= expression ']' )+
                    {
                    // src/cedp/src2src/frontend/java/Java.g:3261:9: ( '[' t1= expression ']' )+
                    int cnt163=0;
                    loop163:
                    do {
                        int alt163=2;
                        alt163 = dfa163.predict(input);
                        switch (alt163) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:3261:10: '[' t1= expression ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_identifierSuffix14292); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(new StringDeclaration("["));
                    	                  
                    	    }
                    	    pushFollow(FOLLOW_expression_in_identifierSuffix14319);
                    	    t1=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	                      list.add(t1);
                    	                  
                    	    }
                    	    match(input,49,FOLLOW_49_in_identifierSuffix14343); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt163 >= 1 ) break loop163;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(163, input);
                                throw eee;
                        }
                        cnt163++;
                    } while (true);

                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("]"));
                                      //ret_expr = new ArrayAccess(prev_expr, t1);
                                  
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:3274:9: t2= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_identifierSuffix14372);
                    t2=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                                      list.add(t2);
                                      //ret_expr = t2;
                                  
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:3279:9: '.' 'class'
                    {
                    match(input,29,FOLLOW_29_in_identifierSuffix14396); if (state.failed) return retval;
                    match(input,37,FOLLOW_37_in_identifierSuffix14398); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("class"));
                                      //ret_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS, new OperatorID("class"));
                                  
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:3285:9: '.' t3= explicitGenericInvocation
                    {
                    match(input,29,FOLLOW_29_in_identifierSuffix14422); if (state.failed) return retval;
                    pushFollow(FOLLOW_explicitGenericInvocation_in_identifierSuffix14426);
                    t3=explicitGenericInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(t3);
                                      //ret_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS, t1);
                                  
                    }

                    }
                    break;
                case 6 :
                    // src/cedp/src2src/frontend/java/Java.g:3291:9: '.' 'this'
                    {
                    match(input,29,FOLLOW_29_in_identifierSuffix14450); if (state.failed) return retval;
                    match(input,69,FOLLOW_69_in_identifierSuffix14452); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("this"));
                                      //ret_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS, new OperatorID("this"));
                                  
                    }

                    }
                    break;
                case 7 :
                    // src/cedp/src2src/frontend/java/Java.g:3297:9: '.' 'super' t4= arguments
                    {
                    match(input,29,FOLLOW_29_in_identifierSuffix14476); if (state.failed) return retval;
                    match(input,65,FOLLOW_65_in_identifierSuffix14478); if (state.failed) return retval;
                    pushFollow(FOLLOW_arguments_in_identifierSuffix14482);
                    t4=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("super"));
                                      list.add(t4);
                                      //ret_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS, new OperatorID("super") /* TODO */);
                                  
                    }

                    }
                    break;
                case 8 :
                    // src/cedp/src2src/frontend/java/Java.g:3304:9: '.' 'new' t5= innerCreator
                    {
                    match(input,29,FOLLOW_29_in_identifierSuffix14506); if (state.failed) return retval;
                    match(input,113,FOLLOW_113_in_identifierSuffix14508); if (state.failed) return retval;
                    pushFollow(FOLLOW_innerCreator_in_identifierSuffix14512);
                    t5=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration("new"));
                                      list.add(t5);
                                      //Expression expr = new BinaryExpression(UnaryOperator.NEW, t20);
                                      //ret_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS, expr));
                                  
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, identifierSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierSuffix"

    public static class creator_return extends ParserRuleReturnScope {
        public Declaration ret;
    };

    // $ANTLR start "creator"
    // src/cedp/src2src/frontend/java/Java.g:3314:1: creator returns [Declaration ret] : (t1= nonWildcardTypeArguments t2= createdName t3= classCreatorRest | t3= createdName (t4= arrayCreatorRest | t5= classCreatorRest ) );
    public final JavaParser.creator_return creator() throws RecognitionException {
        JavaParser.creator_return retval = new JavaParser.creator_return();
        retval.start = input.LT(1);
        int creator_StartIndex = input.index();
        JavaParser.nonWildcardTypeArguments_return t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("creator"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // src/cedp/src2src/frontend/java/Java.g:3317:5: (t1= nonWildcardTypeArguments t2= createdName t3= classCreatorRest | t3= createdName (t4= arrayCreatorRest | t5= classCreatorRest ) )
            int alt166=2;
            alt166 = dfa166.predict(input);
            switch (alt166) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3317:9: t1= nonWildcardTypeArguments t2= createdName t3= classCreatorRest
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator14570);
                    t1=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_createdName_in_creator14574);
                    t2=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_classCreatorRest_in_creator14578);
                    t3=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                      list.add(t2);
                                      list.add(t3);
                                      /*
                                      if(t2.containsKey("argument")){
                                          if(!t2.containsKey("body")){
                                              Expression arg = (Expression) t2.get("argument");
                                              if(arg instanceof OperatorID)
                                                  ret_expr = new FunctionCall(t1);
                                              else
                                                  ret_expr = new FunctionCall(t1, arg);
                                          }
                                          else{
                                              // TODO
                                          }
                                      }
                                      else{
                                          ret_expr = t1;
                                      }
                                      */
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3340:9: t3= createdName (t4= arrayCreatorRest | t5= classCreatorRest )
                    {
                    pushFollow(FOLLOW_createdName_in_creator14604);
                    t3=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    // src/cedp/src2src/frontend/java/Java.g:3340:24: (t4= arrayCreatorRest | t5= classCreatorRest )
                    int alt165=2;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==48) ) {
                        alt165=1;
                    }
                    else if ( (LA165_0==66) ) {
                        alt165=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 0, input);

                        throw nvae;
                    }
                    switch (alt165) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:3340:25: t4= arrayCreatorRest
                            {
                            pushFollow(FOLLOW_arrayCreatorRest_in_creator14609);
                            t4=arrayCreatorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                                              list.add(t3);
                                              list.add(t4);
                                              /* TODO */
                                              //ret_expr = t3;
                                          
                            }

                            }
                            break;
                        case 2 :
                            // src/cedp/src2src/frontend/java/Java.g:3347:11: t5= classCreatorRest
                            {
                            pushFollow(FOLLOW_classCreatorRest_in_creator14638);
                            t5=classCreatorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                                              list.add(t3);
                                              list.add(t5);
                                              /*
                                              if(t5.containsKey("argument")){
                                                  if(!t5.containsKey("body")){
                                                      Expression arg = (Expression) t5.get("argument");
                                                      if(arg instanceof OperatorID)
                                                          ret_expr = new FunctionCall(t3);
                                                      else
                                                          ret_expr = new FunctionCall(t3, arg);
                                                  }
                                                  else{
                                                      // TODO
                                                  }
                                              }
                                              else{
                                                  ret_expr = t3;
                                              }*/
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, creator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "creator"


    // $ANTLR start "createdName"
    // src/cedp/src2src/frontend/java/Java.g:3371:1: createdName returns [Declaration ret] : (t1= classOrInterfaceType | t2= primitiveType );
    public final Declaration createdName() throws RecognitionException {
        Declaration ret = null;
        int createdName_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("createdName"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3373:5: (t1= classOrInterfaceType | t2= primitiveType )
            int alt167=2;
            alt167 = dfa167.predict(input);
            switch (alt167) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3373:9: t1= classOrInterfaceType
                    {
                    pushFollow(FOLLOW_classOrInterfaceType_in_createdName14697);
                    t1=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t1;
                                      //expr = t1;
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3378:9: t2= primitiveType
                    {
                    pushFollow(FOLLOW_primitiveType_in_createdName14723);
                    t2=primitiveType();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      ret = t2;
                                  
                    }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, createdName_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "createdName"


    // $ANTLR start "innerCreator"
    // src/cedp/src2src/frontend/java/Java.g:3384:1: innerCreator returns [Declaration ret] : (t1= nonWildcardTypeArguments )? t2= Identifier t3= classCreatorRest ;
    public final Declaration innerCreator() throws RecognitionException {
        Declaration ret = null;
        int innerCreator_StartIndex = input.index();
        Token t2=null;
        JavaParser.nonWildcardTypeArguments_return t1 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("innerCreator"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3387:5: ( (t1= nonWildcardTypeArguments )? t2= Identifier t3= classCreatorRest )
            // src/cedp/src2src/frontend/java/Java.g:3387:9: (t1= nonWildcardTypeArguments )? t2= Identifier t3= classCreatorRest
            {
            // src/cedp/src2src/frontend/java/Java.g:3387:11: (t1= nonWildcardTypeArguments )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==40) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:0:0: t1= nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_innerCreator14781);
                    t1=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return ret;

                    }
                    break;

            }

            t2=(Token)match(input,Identifier,FOLLOW_Identifier_in_innerCreator14786); if (state.failed) return ret;
            pushFollow(FOLLOW_classCreatorRest_in_innerCreator14790);
            t3=classCreatorRest();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              if(t1 != null)
                                  list.add(t1);
                              list.add(new StringDeclaration((t2!=null?t2.getText():null));
                              list.add(t3);
                              //ret_expr = new NameID((t1!=null?input.toString(t1.start,t1.stop):null));
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, innerCreator_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "innerCreator"


    // $ANTLR start "arrayCreatorRest"
    // src/cedp/src2src/frontend/java/Java.g:3397:1: arrayCreatorRest returns [Declaration ret] : '[' ( ']' ( '[' ']' )* t1= arrayInitializer | t2= expression ']' ( '[' t3= expression ']' )* ( '[' ']' )* ) ;
    public final Declaration arrayCreatorRest() throws RecognitionException {
        Declaration ret = null;
        int arrayCreatorRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("arrayCreatorRest"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3400:5: ( '[' ( ']' ( '[' ']' )* t1= arrayInitializer | t2= expression ']' ( '[' t3= expression ']' )* ( '[' ']' )* ) )
            // src/cedp/src2src/frontend/java/Java.g:3400:9: '[' ( ']' ( '[' ']' )* t1= arrayInitializer | t2= expression ']' ( '[' t3= expression ']' )* ( '[' ']' )* )
            {
            match(input,48,FOLLOW_48_in_arrayCreatorRest14846); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration("["));
                              
            }
            // src/cedp/src2src/frontend/java/Java.g:3404:9: ( ']' ( '[' ']' )* t1= arrayInitializer | t2= expression ']' ( '[' t3= expression ']' )* ( '[' ']' )* )
            int alt172=2;
            alt172 = dfa172.predict(input);
            switch (alt172) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3404:13: ']' ( '[' ']' )* t1= arrayInitializer
                    {
                    match(input,49,FOLLOW_49_in_arrayCreatorRest14878); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                          list.add(new StringDeclaration("]"));
                                      
                    }
                    // src/cedp/src2src/frontend/java/Java.g:3408:13: ( '[' ']' )*
                    loop169:
                    do {
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==48) ) {
                            alt169=1;
                        }


                        switch (alt169) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:3408:14: '[' ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_arrayCreatorRest14912); if (state.failed) return ret;
                    	    match(input,49,FOLLOW_49_in_arrayCreatorRest14914); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                          list.add(new StringDeclaration("[]"));
                    	                      
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop169;
                        }
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest14951);
                    t1=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                          list.add(t1);
                                      
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3416:13: t2= expression ']' ( '[' t3= expression ']' )* ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayCreatorRest14985);
                    t2=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,49,FOLLOW_49_in_arrayCreatorRest14987); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                          list.add(t2);
                                          list.add(new StringDeclaration("]"));
                                          //list.add(new StringDeclaration("["));
                                      
                    }
                    // src/cedp/src2src/frontend/java/Java.g:3422:13: ( '[' t3= expression ']' )*
                    loop170:
                    do {
                        int alt170=2;
                        alt170 = dfa170.predict(input);
                        switch (alt170) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:3422:14: '[' t3= expression ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_arrayCreatorRest15020); if (state.failed) return ret;
                    	    pushFollow(FOLLOW_expression_in_arrayCreatorRest15024);
                    	    t3=expression();

                    	    state._fsp--;
                    	    if (state.failed) return ret;
                    	    match(input,49,FOLLOW_49_in_arrayCreatorRest15026); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                          list.add(new StringDeclaration("["));
                    	                          list.add(t3);
                    	                          list.add(new StringDeclaration("]"));
                    	                      
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop170;
                        }
                    } while (true);

                    // src/cedp/src2src/frontend/java/Java.g:3428:16: ( '[' ']' )*
                    loop171:
                    do {
                        int alt171=2;
                        alt171 = dfa171.predict(input);
                        switch (alt171) {
                    	case 1 :
                    	    // src/cedp/src2src/frontend/java/Java.g:3428:17: '[' ']'
                    	    {
                    	    match(input,48,FOLLOW_48_in_arrayCreatorRest15062); if (state.failed) return ret;
                    	    match(input,49,FOLLOW_49_in_arrayCreatorRest15064); if (state.failed) return ret;
                    	    if ( state.backtracking==0 ) {

                    	                          list.add(new StringDeclaration("[]"));
                    	                      
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop171;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, arrayCreatorRest_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "arrayCreatorRest"


    // $ANTLR start "classCreatorRest"
    // src/cedp/src2src/frontend/java/Java.g:3436:1: classCreatorRest returns [Declaration ret] : t1= arguments (t2= classBody )? ;
    public final Declaration classCreatorRest() throws RecognitionException {
        Declaration ret = null;
        int classCreatorRest_StartIndex = input.index();
        Declaration t1 = null;

        Declaration t2 = null;


         if(dFlag) System.out.println("classCreatorRest"); hash = new Hashtable(); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3439:5: (t1= arguments (t2= classBody )? )
            // src/cedp/src2src/frontend/java/Java.g:3439:9: t1= arguments (t2= classBody )?
            {
            pushFollow(FOLLOW_arguments_in_classCreatorRest15151);
            t1=arguments();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              /*if(t1 != null){
                                  System.out.println("PUSH ");
                                  hash.put("argument", t1);
                              }*/
                          
            }
            // src/cedp/src2src/frontend/java/Java.g:3447:9: (t2= classBody )?
            int alt173=2;
            alt173 = dfa173.predict(input);
            switch (alt173) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3447:10: t2= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest15178);
                    t2=classBody();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t2);
                                      //if(t2 != null)
                                      //    hash.put("body", t2);
                                  
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, classCreatorRest_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "classCreatorRest"


    // $ANTLR start "explicitGenericInvocation"
    // src/cedp/src2src/frontend/java/Java.g:3456:1: explicitGenericInvocation returns [Declaration ret] : t1= nonWildcardTypeArguments t2= Identifier t3= arguments ;
    public final Declaration explicitGenericInvocation() throws RecognitionException {
        Declaration ret = null;
        int explicitGenericInvocation_StartIndex = input.index();
        Token t2=null;
        JavaParser.nonWildcardTypeArguments_return t1 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("explicitGenericInvocation"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3459:5: (t1= nonWildcardTypeArguments t2= Identifier t3= arguments )
            // src/cedp/src2src/frontend/java/Java.g:3459:9: t1= nonWildcardTypeArguments t2= Identifier t3= arguments
            {
            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation15247);
            t1=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return ret;
            t2=(Token)match(input,Identifier,FOLLOW_Identifier_in_explicitGenericInvocation15251); if (state.failed) return ret;
            pushFollow(FOLLOW_arguments_in_explicitGenericInvocation15255);
            t3=arguments();

            state._fsp--;
            if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                              list.add(t1);
                              list.add(new stringDeclaration((t2!=null?t2.getText():null)));
                              list.add(t3);
                          
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, explicitGenericInvocation_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        public Declaration ret;
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // src/cedp/src2src/frontend/java/Java.g:3467:1: nonWildcardTypeArguments returns [Declaration ret] : '<' t1= typeList '>' ;
    public final JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        JavaParser.nonWildcardTypeArguments_return retval = new JavaParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("nonWildcardTypeArguments"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // src/cedp/src2src/frontend/java/Java.g:3470:5: ( '<' t1= typeList '>' )
            // src/cedp/src2src/frontend/java/Java.g:3470:9: '<' t1= typeList '>'
            {
            match(input,40,FOLLOW_40_in_nonWildcardTypeArguments15311); if (state.failed) return retval;
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments15315);
            t1=typeList();

            state._fsp--;
            if (state.failed) return retval;
            match(input,42,FOLLOW_42_in_nonWildcardTypeArguments15317); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

                          list.add(new StringDeclaration("<"));
                          list.add(t1);
                          list.add(new stringDeclaration(">"));
                          //list = t1;
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"


    // $ANTLR start "selector"
    // src/cedp/src2src/frontend/java/Java.g:3479:1: selector returns [Declaration ret] : ( '.' t1= Identifier (t2= arguments )? | '.' 'this' | '.' 'super' t3= superSuffix | '.' 'new' t4= innerCreator | '[' t5= expression ']' );
    public final Declaration selector() throws RecognitionException {
        Declaration ret = null;
        int selector_StartIndex = input.index();
        Token t1=null;
        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;


         if(dFlag) System.out.println("selector"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3482:5: ( '.' t1= Identifier (t2= arguments )? | '.' 'this' | '.' 'super' t3= superSuffix | '.' 'new' t4= innerCreator | '[' t5= expression ']' )
            int alt175=5;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==29) ) {
                switch ( input.LA(2) ) {
                case Identifier:
                    {
                    alt175=1;
                    }
                    break;
                case 69:
                    {
                    alt175=2;
                    }
                    break;
                case 65:
                    {
                    alt175=3;
                    }
                    break;
                case 113:
                    {
                    alt175=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ret;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 175, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA175_0==48) ) {
                alt175=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;
            }
            switch (alt175) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3482:9: '.' t1= Identifier (t2= arguments )?
                    {
                    match(input,29,FOLLOW_29_in_selector15369); if (state.failed) return ret;
                    t1=(Token)match(input,Identifier,FOLLOW_Identifier_in_selector15373); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration((t1!=null?t1.getText():null)));
                                      //if(prev_expr == null)
                                      //    ret_expr = new AccessExpression(new NameID("??"), AccessOperator.MEMBER_ACCESS, new NameID((t1!=null?t1.getText():null)));
                                      //else
                                      //    ret_expr = new AccessExpression(prev_expr, AccessOperator.MEMBER_ACCESS, new NameID((t1!=null?t1.getText():null)));
                                  
                    }
                    // src/cedp/src2src/frontend/java/Java.g:3491:9: (t2= arguments )?
                    int alt174=2;
                    alt174 = dfa174.predict(input);
                    switch (alt174) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:3491:10: t2= arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector15401);
                            t2=arguments();

                            state._fsp--;
                            if (state.failed) return ret;
                            if ( state.backtracking==0 ) {

                                              list.add(t2);
                                              //if(t2 == null)
                                              //    ret_expr = new NameID((t1!=null?t1.getText():null));
                                              //else if(t2 instanceof OperatorID)
                                              //    ret_expr = new FunctionCall(new NameID((t1!=null?t1.getText():null)));
                                              //else{
                                              //    List list = new LinkedList();
                                              //    list.add(t2);
                                              //    ret_expr = new FunctionCall(new NameID((t1!=null?t1.getText():null)), list);
                                              //}
                                          
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3505:9: '.' 'this'
                    {
                    match(input,29,FOLLOW_29_in_selector15436); if (state.failed) return ret;
                    match(input,69,FOLLOW_69_in_selector15438); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration("."));
                                  list.add(new StringDeclaration("this"));
                              
                    }

                    }
                    break;
                case 3 :
                    // src/cedp/src2src/frontend/java/Java.g:3510:9: '.' 'super' t3= superSuffix
                    {
                    match(input,29,FOLLOW_29_in_selector15458); if (state.failed) return ret;
                    match(input,65,FOLLOW_65_in_selector15460); if (state.failed) return ret;
                    pushFollow(FOLLOW_superSuffix_in_selector15464);
                    t3=superSuffix();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration("."));
                                  list.add(new StringDeclaration("super"));
                                  list.add(t3);
                              
                    }

                    }
                    break;
                case 4 :
                    // src/cedp/src2src/frontend/java/Java.g:3516:9: '.' 'new' t4= innerCreator
                    {
                    match(input,29,FOLLOW_29_in_selector15484); if (state.failed) return ret;
                    match(input,113,FOLLOW_113_in_selector15486); if (state.failed) return ret;
                    pushFollow(FOLLOW_innerCreator_in_selector15490);
                    t4=innerCreator();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration("."));
                                  list.add(new StringDeclaration("new"));
                                  list.add(t4);
                              
                    }

                    }
                    break;
                case 5 :
                    // src/cedp/src2src/frontend/java/Java.g:3522:9: '[' t5= expression ']'
                    {
                    match(input,48,FOLLOW_48_in_selector15510); if (state.failed) return ret;
                    pushFollow(FOLLOW_expression_in_selector15514);
                    t5=expression();

                    state._fsp--;
                    if (state.failed) return ret;
                    match(input,49,FOLLOW_49_in_selector15516); if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration("["));
                                  list.add(t5);
                                  list.add(new StringDeclaration("]"));
                              
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, selector_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "selector"


    // $ANTLR start "superSuffix"
    // src/cedp/src2src/frontend/java/Java.g:3530:1: superSuffix returns [Declaration ret] : (t1= arguments | '.' t2= Identifier (t3= arguments )? );
    public final Declaration superSuffix() throws RecognitionException {
        Declaration ret = null;
        int superSuffix_StartIndex = input.index();
        Token t2=null;
        Declaration t1 = null;

        Declaration t3 = null;


         if(dFlag) System.out.println("superSuffix"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3533:5: (t1= arguments | '.' t2= Identifier (t3= arguments )? )
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==66) ) {
                alt177=1;
            }
            else if ( (LA177_0==29) ) {
                alt177=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ret;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;
            }
            switch (alt177) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3533:9: t1= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_superSuffix15570);
                    t1=arguments();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                      list.add(t1);
                                  
                    }

                    }
                    break;
                case 2 :
                    // src/cedp/src2src/frontend/java/Java.g:3537:9: '.' t2= Identifier (t3= arguments )?
                    {
                    match(input,29,FOLLOW_29_in_superSuffix15594); if (state.failed) return ret;
                    t2=(Token)match(input,Identifier,FOLLOW_Identifier_in_superSuffix15598); if (state.failed) return ret;
                    // src/cedp/src2src/frontend/java/Java.g:3537:29: (t3= arguments )?
                    int alt176=2;
                    alt176 = dfa176.predict(input);
                    switch (alt176) {
                        case 1 :
                            // src/cedp/src2src/frontend/java/Java.g:0:0: t3= arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix15602);
                            t3=arguments();

                            state._fsp--;
                            if (state.failed) return ret;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                      list.add(new StringDeclaration("."));
                                      list.add(new StringDeclaration((t2!=null?t2.getText():null)));
                                      if(t3 != null)
                                          list.add(t3);
                                  
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, superSuffix_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "superSuffix"


    // $ANTLR start "arguments"
    // src/cedp/src2src/frontend/java/Java.g:3547:1: arguments returns [Declaration ret] : '(' (t1= expressionList )? ')' ;
    public final Declaration arguments() throws RecognitionException {
        Declaration ret = null;
        int arguments_StartIndex = input.index();
        Declaration t1 = null;


         if(dFlag) System.out.println("arguments"); List list = new LinkedList(); 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return ret; }
            // src/cedp/src2src/frontend/java/Java.g:3550:5: ( '(' (t1= expressionList )? ')' )
            // src/cedp/src2src/frontend/java/Java.g:3550:9: '(' (t1= expressionList )? ')'
            {
            match(input,66,FOLLOW_66_in_arguments15661); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration("("));
                                  //ret_expr = new OperatorID("()");
                              
            }
            // src/cedp/src2src/frontend/java/Java.g:3555:9: (t1= expressionList )?
            int alt178=2;
            alt178 = dfa178.predict(input);
            switch (alt178) {
                case 1 :
                    // src/cedp/src2src/frontend/java/Java.g:3555:10: t1= expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments15693);
                    t1=expressionList();

                    state._fsp--;
                    if (state.failed) return ret;
                    if ( state.backtracking==0 ) {

                                          list.add(t1);
                                          //ret_expr = t1;
                                      
                    }

                    }
                    break;

            }

            match(input,67,FOLLOW_67_in_arguments15724); if (state.failed) return ret;
            if ( state.backtracking==0 ) {

                                  list.add(new StringDeclaration(")"));
                              
            }

            }

            if ( state.backtracking==0 ) {
               ret = new StringDeclaration(list); 
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, arguments_StartIndex); }
        }
        return ret;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred5_Java
    public final void synpred5_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;

        Declaration t2 = null;

        Declaration t3 = null;

        Declaration t4 = null;

        Declaration t5 = null;

        Declaration t6 = null;


        // src/cedp/src2src/frontend/java/Java.g:530:9: (t1= annotations (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* ) )
        // src/cedp/src2src/frontend/java/Java.g:530:9: t1= annotations (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* )
        {
        pushFollow(FOLLOW_annotations_in_synpred5_Java119);
        t1=annotations();

        state._fsp--;
        if (state.failed) return ;
        // src/cedp/src2src/frontend/java/Java.g:534:9: (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* )
        int alt184=2;
        alt184 = dfa184.predict(input);
        switch (alt184) {
            case 1 :
                // src/cedp/src2src/frontend/java/Java.g:534:13: t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )*
                {
                pushFollow(FOLLOW_packageDeclaration_in_synpred5_Java153);
                t2=packageDeclaration();

                state._fsp--;
                if (state.failed) return ;
                // src/cedp/src2src/frontend/java/Java.g:538:13: (t3= importDeclaration )*
                loop181:
                do {
                    int alt181=2;
                    alt181 = dfa181.predict(input);
                    switch (alt181) {
                	case 1 :
                	    // src/cedp/src2src/frontend/java/Java.g:538:14: t3= importDeclaration
                	    {
                	    pushFollow(FOLLOW_importDeclaration_in_synpred5_Java188);
                	    t3=importDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop181;
                    }
                } while (true);

                // src/cedp/src2src/frontend/java/Java.g:543:13: (t4= typeDeclaration )*
                loop182:
                do {
                    int alt182=2;
                    alt182 = dfa182.predict(input);
                    switch (alt182) {
                	case 1 :
                	    // src/cedp/src2src/frontend/java/Java.g:543:14: t4= typeDeclaration
                	    {
                	    pushFollow(FOLLOW_typeDeclaration_in_synpred5_Java238);
                	    t4=typeDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop182;
                    }
                } while (true);


                }
                break;
            case 2 :
                // src/cedp/src2src/frontend/java/Java.g:548:13: t5= classOrInterfaceDeclaration (t6= typeDeclaration )*
                {
                pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred5_Java287);
                t5=classOrInterfaceDeclaration();

                state._fsp--;
                if (state.failed) return ;
                // src/cedp/src2src/frontend/java/Java.g:552:13: (t6= typeDeclaration )*
                loop183:
                do {
                    int alt183=2;
                    alt183 = dfa183.predict(input);
                    switch (alt183) {
                	case 1 :
                	    // src/cedp/src2src/frontend/java/Java.g:552:14: t6= typeDeclaration
                	    {
                	    pushFollow(FOLLOW_typeDeclaration_in_synpred5_Java322);
                	    t6=typeDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop183;
                    }
                } while (true);


                }
                break;

        }


        }
    }
    // $ANTLR end synpred5_Java

    // $ANTLR start synpred113_Java
    public final void synpred113_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:1867:14: (t1= explicitConstructorInvocation )
        // src/cedp/src2src/frontend/java/Java.g:1867:14: t1= explicitConstructorInvocation
        {
        pushFollow(FOLLOW_explicitConstructorInvocation_in_synpred113_Java6921);
        t1=explicitConstructorInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred113_Java

    // $ANTLR start synpred117_Java
    public final void synpred117_Java_fragment() throws RecognitionException {   
        JavaParser.nonWildcardTypeArguments_return t1 = null;

        Declaration t2 = null;


        // src/cedp/src2src/frontend/java/Java.g:1885:9: ( (t1= nonWildcardTypeArguments )? ( 'this' | 'super' ) t2= arguments ';' )
        // src/cedp/src2src/frontend/java/Java.g:1885:9: (t1= nonWildcardTypeArguments )? ( 'this' | 'super' ) t2= arguments ';'
        {
        // src/cedp/src2src/frontend/java/Java.g:1885:9: (t1= nonWildcardTypeArguments )?
        int alt192=2;
        int LA192_0 = input.LA(1);

        if ( (LA192_0==40) ) {
            alt192=1;
        }
        switch (alt192) {
            case 1 :
                // src/cedp/src2src/frontend/java/Java.g:1885:10: t1= nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred117_Java7021);
                t1=nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        if ( input.LA(1)==65||input.LA(1)==69 ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_arguments_in_synpred117_Java7039);
        t2=arguments();

        state._fsp--;
        if (state.failed) return ;
        match(input,26,FOLLOW_26_in_synpred117_Java7041); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred117_Java

    // $ANTLR start synpred128_Java
    public final void synpred128_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:2010:10: (t1= annotation )
        // src/cedp/src2src/frontend/java/Java.g:2010:10: t1= annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred128_Java7590);
        t1=annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred128_Java

    // $ANTLR start synpred151_Java
    public final void synpred151_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:2281:9: (t1= localVariableDeclarationStatement )
        // src/cedp/src2src/frontend/java/Java.g:2281:9: t1= localVariableDeclarationStatement
        {
        pushFollow(FOLLOW_localVariableDeclarationStatement_in_synpred151_Java9043);
        t1=localVariableDeclarationStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_Java

    // $ANTLR start synpred152_Java
    public final void synpred152_Java_fragment() throws RecognitionException {   
        Declaration t2 = null;


        // src/cedp/src2src/frontend/java/Java.g:2285:9: (t2= classOrInterfaceDeclaration )
        // src/cedp/src2src/frontend/java/Java.g:2285:9: t2= classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred152_Java9069);
        t2=classOrInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_Java

    // $ANTLR start synpred157_Java
    public final void synpred157_Java_fragment() throws RecognitionException {   
        Declaration t8 = null;


        // src/cedp/src2src/frontend/java/Java.g:2356:25: ( 'else' t8= statement )
        // src/cedp/src2src/frontend/java/Java.g:2356:25: 'else' t8= statement
        {
        match(input,77,FOLLOW_77_in_synpred157_Java9455); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred157_Java9459);
        t8=statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred157_Java

    // $ANTLR start synpred162_Java
    public final void synpred162_Java_fragment() throws RecognitionException {   
        Declaration t16 = null;

        Declaration t17 = null;


        // src/cedp/src2src/frontend/java/Java.g:2394:11: (t16= catches 'finally' t17= block )
        // src/cedp/src2src/frontend/java/Java.g:2394:11: t16= catches 'finally' t17= block
        {
        pushFollow(FOLLOW_catches_in_synpred162_Java9630);
        t16=catches();

        state._fsp--;
        if (state.failed) return ;
        match(input,82,FOLLOW_82_in_synpred162_Java9632); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred162_Java9636);
        t17=block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_Java

    // $ANTLR start synpred163_Java
    public final void synpred163_Java_fragment() throws RecognitionException {   
        Declaration t18 = null;


        // src/cedp/src2src/frontend/java/Java.g:2399:11: (t18= catches )
        // src/cedp/src2src/frontend/java/Java.g:2399:11: t18= catches
        {
        pushFollow(FOLLOW_catches_in_synpred163_Java9664);
        t18=catches();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred163_Java

    // $ANTLR start synpred178_Java
    public final void synpred178_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:2542:10: (t1= switchLabel )
        // src/cedp/src2src/frontend/java/Java.g:2542:10: t1= switchLabel
        {
        pushFollow(FOLLOW_switchLabel_in_synpred178_Java10347);
        t1=switchLabel();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_Java

    // $ANTLR start synpred180_Java
    public final void synpred180_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:2558:9: ( 'case' t1= constantExpression ':' )
        // src/cedp/src2src/frontend/java/Java.g:2558:9: 'case' t1= constantExpression ':'
        {
        match(input,89,FOLLOW_89_in_synpred180_Java10455); if (state.failed) return ;
        pushFollow(FOLLOW_constantExpression_in_synpred180_Java10459);
        t1=constantExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,75,FOLLOW_75_in_synpred180_Java10461); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_Java

    // $ANTLR start synpred181_Java
    public final void synpred181_Java_fragment() throws RecognitionException {   
        Declaration t2 = null;


        // src/cedp/src2src/frontend/java/Java.g:2565:9: ( 'case' t2= enumConstantName ':' )
        // src/cedp/src2src/frontend/java/Java.g:2565:9: 'case' t2= enumConstantName ':'
        {
        match(input,89,FOLLOW_89_in_synpred181_Java10485); if (state.failed) return ;
        pushFollow(FOLLOW_enumConstantName_in_synpred181_Java10489);
        t2=enumConstantName();

        state._fsp--;
        if (state.failed) return ;
        match(input,75,FOLLOW_75_in_synpred181_Java10491); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_Java

    // $ANTLR start synpred182_Java
    public final void synpred182_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:2584:9: (t1= enhancedForControl )
        // src/cedp/src2src/frontend/java/Java.g:2584:9: t1= enhancedForControl
        {
        pushFollow(FOLLOW_enhancedForControl_in_synpred182_Java10580);
        t1=enhancedForControl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_Java

    // $ANTLR start synpred186_Java
    public final void synpred186_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:2606:9: (t1= localVariableDeclaration )
        // src/cedp/src2src/frontend/java/Java.g:2606:9: t1= localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred186_Java10670);
        t1=localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_Java

    // $ANTLR start synpred188_Java
    public final void synpred188_Java_fragment() throws RecognitionException {   
        Declaration t2 = null;

        Declaration t3 = null;


        // src/cedp/src2src/frontend/java/Java.g:2701:10: (t2= assignmentOperator t3= expression )
        // src/cedp/src2src/frontend/java/Java.g:2701:10: t2= assignmentOperator t3= expression
        {
        pushFollow(FOLLOW_assignmentOperator_in_synpred188_Java11174);
        t2=assignmentOperator();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred188_Java11178);
        t3=expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_Java

    // $ANTLR start synpred198_Java
    public final void synpred198_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:2758:9: ( '<' '<' '=' )
        // src/cedp/src2src/frontend/java/Java.g:2758:10: '<' '<' '='
        {
        match(input,40,FOLLOW_40_in_synpred198_Java11455); if (state.failed) return ;
        match(input,40,FOLLOW_40_in_synpred198_Java11457); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred198_Java11459); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred198_Java

    // $ANTLR start synpred199_Java
    public final void synpred199_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:2768:9: ( '<' '<' '<' '=' )
        // src/cedp/src2src/frontend/java/Java.g:2768:10: '<' '<' '<' '='
        {
        match(input,40,FOLLOW_40_in_synpred199_Java11511); if (state.failed) return ;
        match(input,40,FOLLOW_40_in_synpred199_Java11513); if (state.failed) return ;
        match(input,40,FOLLOW_40_in_synpred199_Java11515); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred199_Java11517); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_Java

    // $ANTLR start synpred200_Java
    public final void synpred200_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:2779:9: ( '>' '>' '=' )
        // src/cedp/src2src/frontend/java/Java.g:2779:10: '>' '>' '='
        {
        match(input,42,FOLLOW_42_in_synpred200_Java11570); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred200_Java11572); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred200_Java11574); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred200_Java

    // $ANTLR start synpred211_Java
    public final void synpred211_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:2957:9: ( '<' '=' )
        // src/cedp/src2src/frontend/java/Java.g:2957:10: '<' '='
        {
        match(input,40,FOLLOW_40_in_synpred211_Java12588); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred211_Java12590); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_Java

    // $ANTLR start synpred212_Java
    public final void synpred212_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:2964:9: ( '>' '=' )
        // src/cedp/src2src/frontend/java/Java.g:2964:10: '>' '='
        {
        match(input,42,FOLLOW_42_in_synpred212_Java12635); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred212_Java12637); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_Java

    // $ANTLR start synpred214_Java
    public final void synpred214_Java_fragment() throws RecognitionException {   
        Declaration t2 = null;

        Declaration t3 = null;


        // src/cedp/src2src/frontend/java/Java.g:2992:11: (t2= shiftOp t3= additiveExpression )
        // src/cedp/src2src/frontend/java/Java.g:2992:11: t2= shiftOp t3= additiveExpression
        {
        pushFollow(FOLLOW_shiftOp_in_synpred214_Java12793);
        t2=shiftOp();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_additiveExpression_in_synpred214_Java12797);
        t3=additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_Java

    // $ANTLR start synpred215_Java
    public final void synpred215_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:3004:9: ( '<' '<' )
        // src/cedp/src2src/frontend/java/Java.g:3004:10: '<' '<'
        {
        match(input,40,FOLLOW_40_in_synpred215_Java12858); if (state.failed) return ;
        match(input,40,FOLLOW_40_in_synpred215_Java12860); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred215_Java

    // $ANTLR start synpred216_Java
    public final void synpred216_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:3011:9: ( '>' '>' '>' )
        // src/cedp/src2src/frontend/java/Java.g:3011:10: '>' '>' '>'
        {
        match(input,42,FOLLOW_42_in_synpred216_Java12905); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred216_Java12907); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred216_Java12909); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred216_Java

    // $ANTLR start synpred217_Java
    public final void synpred217_Java_fragment() throws RecognitionException {   
        // src/cedp/src2src/frontend/java/Java.g:3020:9: ( '>' '>' )
        // src/cedp/src2src/frontend/java/Java.g:3020:10: '>' '>'
        {
        match(input,42,FOLLOW_42_in_synpred217_Java12958); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred217_Java12960); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred217_Java

    // $ANTLR start synpred229_Java
    public final void synpred229_Java_fragment() throws RecognitionException {   
        Declaration t3 = null;


        // src/cedp/src2src/frontend/java/Java.g:3115:9: (t3= castExpression )
        // src/cedp/src2src/frontend/java/Java.g:3115:9: t3= castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred229_Java13495);
        t3=castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_Java

    // $ANTLR start synpred233_Java
    public final void synpred233_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;

        Declaration t2 = null;


        // src/cedp/src2src/frontend/java/Java.g:3143:8: ( '(' t1= primitiveType ')' t2= unaryExpression )
        // src/cedp/src2src/frontend/java/Java.g:3143:8: '(' t1= primitiveType ')' t2= unaryExpression
        {
        match(input,66,FOLLOW_66_in_synpred233_Java13627); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred233_Java13631);
        t1=primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,67,FOLLOW_67_in_synpred233_Java13633); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred233_Java13637);
        t2=unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_Java

    // $ANTLR start synpred234_Java
    public final void synpred234_Java_fragment() throws RecognitionException {   
        Declaration t3 = null;


        // src/cedp/src2src/frontend/java/Java.g:3149:39: (t3= type )
        // src/cedp/src2src/frontend/java/Java.g:3149:39: t3= type
        {
        pushFollow(FOLLOW_type_in_synpred234_Java13671);
        t3=type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_Java

    // $ANTLR start synpred236_Java
    public final void synpred236_Java_fragment() throws RecognitionException {   
        Token t2=null;

        // src/cedp/src2src/frontend/java/Java.g:3175:10: ( '.' t2= Identifier )
        // src/cedp/src2src/frontend/java/Java.g:3175:10: '.' t2= Identifier
        {
        match(input,29,FOLLOW_29_in_synpred236_Java13794); if (state.failed) return ;
        t2=(Token)match(input,Identifier,FOLLOW_Identifier_in_synpred236_Java13798); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_Java

    // $ANTLR start synpred237_Java
    public final void synpred237_Java_fragment() throws RecognitionException {   
        JavaParser.identifierSuffix_return t3 = null;


        // src/cedp/src2src/frontend/java/Java.g:3182:10: (t3= identifierSuffix )
        // src/cedp/src2src/frontend/java/Java.g:3182:10: t3= identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred237_Java13836);
        t3=identifierSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_Java

    // $ANTLR start synpred242_Java
    public final void synpred242_Java_fragment() throws RecognitionException {   
        Token t8=null;

        // src/cedp/src2src/frontend/java/Java.g:3210:10: ( '.' t8= Identifier )
        // src/cedp/src2src/frontend/java/Java.g:3210:10: '.' t8= Identifier
        {
        match(input,29,FOLLOW_29_in_synpred242_Java13997); if (state.failed) return ;
        t8=(Token)match(input,Identifier,FOLLOW_Identifier_in_synpred242_Java14001); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred242_Java

    // $ANTLR start synpred243_Java
    public final void synpred243_Java_fragment() throws RecognitionException {   
        JavaParser.identifierSuffix_return t9 = null;


        // src/cedp/src2src/frontend/java/Java.g:3217:10: (t9= identifierSuffix )
        // src/cedp/src2src/frontend/java/Java.g:3217:10: t9= identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred243_Java14040);
        t9=identifierSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_Java

    // $ANTLR start synpred249_Java
    public final void synpred249_Java_fragment() throws RecognitionException {   
        Declaration t1 = null;


        // src/cedp/src2src/frontend/java/Java.g:3261:10: ( '[' t1= expression ']' )
        // src/cedp/src2src/frontend/java/Java.g:3261:10: '[' t1= expression ']'
        {
        match(input,48,FOLLOW_48_in_synpred249_Java14292); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred249_Java14319);
        t1=expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,49,FOLLOW_49_in_synpred249_Java14343); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_Java

    // $ANTLR start synpred262_Java
    public final void synpred262_Java_fragment() throws RecognitionException {   
        Declaration t3 = null;


        // src/cedp/src2src/frontend/java/Java.g:3422:14: ( '[' t3= expression ']' )
        // src/cedp/src2src/frontend/java/Java.g:3422:14: '[' t3= expression ']'
        {
        match(input,48,FOLLOW_48_in_synpred262_Java15020); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred262_Java15024);
        t3=expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,49,FOLLOW_49_in_synpred262_Java15026); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_Java

    // Delegated rules

    public final boolean synpred157_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA8 dfa8 = new DFA8(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA1 dfa1 = new DFA1(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA78 dfa78 = new DFA78(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA172 dfa172 = new DFA172(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA173 dfa173 = new DFA173(this);
    protected DFA174 dfa174 = new DFA174(this);
    protected DFA176 dfa176 = new DFA176(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA183 dfa183 = new DFA183(this);
    static final String DFA8_eotS =
        "\23\uffff";
    static final String DFA8_eofS =
        "\1\2\22\uffff";
    static final String DFA8_minS =
        "\1\5\1\4\17\uffff\1\0\1\uffff";
    static final String DFA8_maxS =
        "\1\111\1\56\17\uffff\1\0\1\uffff";
    static final String DFA8_acceptS =
        "\2\uffff\1\2\17\uffff\1\1";
    static final String DFA8_specialS =
        "\21\uffff\1\0\1\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\2\23\uffff\4\2\2\uffff\7\2\10\uffff\1\2\32\uffff\1\1",
            "\1\21\51\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "517:1: translationUnit[TranslationUnit init_tunit] returns [TranslationUnit tunit] : (t1= annotations (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* ) | (t7= packageDeclaration )? (t8= importDeclaration )* (t9= typeDeclaration )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Java()) ) {s = 18;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\15\uffff";
    static final String DFA4_eofS =
        "\15\uffff";
    static final String DFA4_minS =
        "\1\5\14\uffff";
    static final String DFA4_maxS =
        "\1\111\14\uffff";
    static final String DFA4_acceptS =
        "\1\uffff\1\1\1\2\12\uffff";
    static final String DFA4_specialS =
        "\15\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\2\23\uffff\1\1\2\uffff\1\2\2\uffff\7\2\10\uffff\1\2\32\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "534:9: (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* )";
        }
    }
    static final String DFA1_eotS =
        "\17\uffff";
    static final String DFA1_eofS =
        "\1\1\16\uffff";
    static final String DFA1_minS =
        "\1\5\16\uffff";
    static final String DFA1_maxS =
        "\1\111\16\uffff";
    static final String DFA1_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA1_specialS =
        "\17\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\1\24\uffff\1\1\1\16\1\1\2\uffff\7\1\10\uffff\1\1\32\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "()* loopback of 538:13: (t3= importDeclaration )*";
        }
    }
    static final String DFA2_eotS =
        "\16\uffff";
    static final String DFA2_eofS =
        "\1\1\15\uffff";
    static final String DFA2_minS =
        "\1\5\15\uffff";
    static final String DFA2_maxS =
        "\1\111\15\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\2\1\1\13\uffff";
    static final String DFA2_specialS =
        "\16\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\10\uffff\1\2\32\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()* loopback of 543:13: (t4= typeDeclaration )*";
        }
    }
    static final String DFA3_eotS =
        "\16\uffff";
    static final String DFA3_eofS =
        "\1\1\15\uffff";
    static final String DFA3_minS =
        "\1\5\15\uffff";
    static final String DFA3_maxS =
        "\1\111\15\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\2\1\1\13\uffff";
    static final String DFA3_specialS =
        "\16\uffff}>";
    static final String[] DFA3_transitionS = {
            "\1\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\10\uffff\1\2\32\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 552:13: (t6= typeDeclaration )*";
        }
    }
    static final String DFA5_eotS =
        "\20\uffff";
    static final String DFA5_eofS =
        "\1\2\17\uffff";
    static final String DFA5_minS =
        "\1\5\17\uffff";
    static final String DFA5_maxS =
        "\1\111\17\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\1\1\2\15\uffff";
    static final String DFA5_specialS =
        "\20\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\2\23\uffff\1\1\3\2\2\uffff\7\2\10\uffff\1\2\32\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "558:9: (t7= packageDeclaration )?";
        }
    }
    static final String DFA6_eotS =
        "\17\uffff";
    static final String DFA6_eofS =
        "\1\1\16\uffff";
    static final String DFA6_minS =
        "\1\5\16\uffff";
    static final String DFA6_maxS =
        "\1\111\16\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA6_specialS =
        "\17\uffff}>";
    static final String[] DFA6_transitionS = {
            "\1\1\24\uffff\1\1\1\16\1\1\2\uffff\7\1\10\uffff\1\1\32\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 563:9: (t8= importDeclaration )*";
        }
    }
    static final String DFA7_eotS =
        "\16\uffff";
    static final String DFA7_eofS =
        "\1\1\15\uffff";
    static final String DFA7_minS =
        "\1\5\15\uffff";
    static final String DFA7_maxS =
        "\1\111\15\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\2\1\1\13\uffff";
    static final String DFA7_specialS =
        "\16\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\10\uffff\1\2\32\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()* loopback of 568:9: (t9= typeDeclaration )*";
        }
    }
    static final String DFA11_eotS =
        "\15\uffff";
    static final String DFA11_eofS =
        "\15\uffff";
    static final String DFA11_minS =
        "\1\5\14\uffff";
    static final String DFA11_maxS =
        "\1\111\14\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\1\12\uffff\1\2";
    static final String DFA11_specialS =
        "\15\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\1\24\uffff\1\14\1\uffff\1\1\2\uffff\7\1\10\uffff\1\1\32\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "625:1: typeDeclaration returns [Declaration ret_decl] : (t1= classOrInterfaceDeclaration | ';' );";
        }
    }
    static final String DFA13_eotS =
        "\16\uffff";
    static final String DFA13_eofS =
        "\16\uffff";
    static final String DFA13_minS =
        "\1\5\3\uffff\1\4\11\uffff";
    static final String DFA13_maxS =
        "\1\111\3\uffff\1\56\11\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\10\uffff";
    static final String DFA13_specialS =
        "\16\uffff}>";
    static final String[] DFA13_transitionS = {
            "\1\1\26\uffff\1\5\2\uffff\6\5\1\1\10\uffff\1\1\32\uffff\1\4",
            "",
            "",
            "",
            "\1\5\51\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 664:9: (t1= classOrInterfaceModifier )*";
        }
    }
    static final String DFA15_eotS =
        "\35\uffff";
    static final String DFA15_eofS =
        "\35\uffff";
    static final String DFA15_minS =
        "\1\4\14\uffff\1\4\17\uffff";
    static final String DFA15_maxS =
        "\1\111\14\uffff\1\56\17\uffff";
    static final String DFA15_acceptS =
        "\1\uffff\1\2\16\uffff\1\1\14\uffff";
    static final String DFA15_specialS =
        "\35\uffff}>";
    static final String[] DFA15_transitionS = {
            "\2\1\26\uffff\1\20\2\uffff\6\20\1\1\2\uffff\1\1\5\uffff\2\1"+
            "\4\uffff\4\20\10\1\11\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\20\51\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "()* loopback of 722:9: (t1= modifier )*";
        }
    }
    static final String DFA31_eotS =
        "\37\uffff";
    static final String DFA31_eofS =
        "\1\1\36\uffff";
    static final String DFA31_minS =
        "\1\4\36\uffff";
    static final String DFA31_maxS =
        "\1\111\36\uffff";
    static final String DFA31_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\33\uffff";
    static final String DFA31_specialS =
        "\37\uffff}>";
    static final String[] DFA31_transitionS = {
            "\2\3\24\uffff\1\3\1\uffff\1\3\2\uffff\7\3\2\uffff\1\3\3\uffff"+
            "\1\3\1\1\2\3\4\uffff\14\3\11\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "()* loopback of 930:9: (t1= classBodyDeclaration )*";
        }
    }
    static final String DFA36_eotS =
        "\36\uffff";
    static final String DFA36_eofS =
        "\36\uffff";
    static final String DFA36_minS =
        "\1\4\35\uffff";
    static final String DFA36_maxS =
        "\1\111\35\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\2\1\1\33\uffff";
    static final String DFA36_specialS =
        "\36\uffff}>";
    static final String[] DFA36_transitionS = {
            "\2\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\2\uffff\1\2\3\uffff"+
            "\1\2\1\1\2\2\4\uffff\14\2\11\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "()* loopback of 988:13: (t1= classBodyDeclaration )*";
        }
    }
    static final String DFA37_eotS =
        "\35\uffff";
    static final String DFA37_eofS =
        "\35\uffff";
    static final String DFA37_minS =
        "\1\4\34\uffff";
    static final String DFA37_maxS =
        "\1\111\34\uffff";
    static final String DFA37_acceptS =
        "\1\uffff\1\2\1\1\32\uffff";
    static final String DFA37_specialS =
        "\35\uffff}>";
    static final String[] DFA37_transitionS = {
            "\2\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\2\uffff\1\2\4\uffff"+
            "\1\1\2\2\4\uffff\14\2\11\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "()* loopback of 1004:13: (t1= interfaceBodyDeclaration )*";
        }
    }
    static final String DFA39_eotS =
        "\70\uffff";
    static final String DFA39_eofS =
        "\70\uffff";
    static final String DFA39_minS =
        "\1\4\1\uffff\1\4\65\uffff";
    static final String DFA39_maxS =
        "\1\111\1\uffff\1\111\65\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3\63\uffff";
    static final String DFA39_specialS =
        "\70\uffff}>";
    static final String[] DFA39_transitionS = {
            "\2\4\24\uffff\1\1\1\uffff\1\2\2\uffff\7\4\2\uffff\1\4\3\uffff"+
            "\1\3\1\uffff\2\4\4\uffff\14\4\11\uffff\1\4",
            "",
            "\2\4\26\uffff\1\4\2\uffff\7\4\2\uffff\1\4\3\uffff\1\3\1\uffff"+
            "\2\4\4\uffff\14\4\11\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "1016:1: classBodyDeclaration returns [Declaration ret_decl] : ( ';' | ( 'static' )? t1= block | t3= modifiers t4= memberDecl );";
        }
    }
    static final String DFA40_eotS =
        "\25\uffff";
    static final String DFA40_eofS =
        "\25\uffff";
    static final String DFA40_minS =
        "\1\4\1\uffff\1\4\22\uffff";
    static final String DFA40_maxS =
        "\1\111\1\uffff\1\102\22\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\7\uffff\1\3\1\5\1\uffff\1\6\1\uffff\1\4"+
        "\4\uffff";
    static final String DFA40_specialS =
        "\25\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\2\1\16\37\uffff\1\16\2\uffff\1\1\5\uffff\1\14\1\13\10\uffff"+
            "\10\3\11\uffff\1\14",
            "",
            "\1\3\30\uffff\1\3\12\uffff\1\3\7\uffff\1\3\21\uffff\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "1046:1: memberDecl returns [Declaration ret_decl] : (t1= genericMethodOrConstructorDecl | t2= memberDeclaration | 'void' Identifier t3= voidMethodDeclaratorRest | Identifier t4= constructorDeclaratorRest | t5= interfaceDeclaration | t6= classDeclaration );";
        }
    }
    static final String DFA43_eotS =
        "\20\uffff";
    static final String DFA43_eofS =
        "\20\uffff";
    static final String DFA43_minS =
        "\2\4\16\uffff";
    static final String DFA43_maxS =
        "\1\77\1\102\16\uffff";
    static final String DFA43_acceptS =
        "\2\uffff\1\1\10\uffff\1\2\4\uffff";
    static final String DFA43_specialS =
        "\20\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\1\52\uffff\1\2\10\uffff\10\2",
            "\1\2\30\uffff\1\2\12\uffff\1\2\7\uffff\1\2\21\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "1126:1: genericMethodOrConstructorRest returns [Declaration ret_decl] : ( (t1= type | 'void' ) t2= Identifier t3= methodDeclaratorRest | t4= Identifier t5= constructorDeclaratorRest );";
        }
    }
    static final String DFA42_eotS =
        "\13\uffff";
    static final String DFA42_eofS =
        "\13\uffff";
    static final String DFA42_minS =
        "\1\4\12\uffff";
    static final String DFA42_maxS =
        "\1\77\12\uffff";
    static final String DFA42_acceptS =
        "\1\uffff\1\1\10\uffff\1\2";
    static final String DFA42_specialS =
        "\13\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\1\52\uffff\1\12\10\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "1128:9: (t1= type | 'void' )";
        }
    }
    static final String DFA44_eotS =
        "\34\uffff";
    static final String DFA44_eofS =
        "\34\uffff";
    static final String DFA44_minS =
        "\1\4\33\uffff";
    static final String DFA44_maxS =
        "\1\111\33\uffff";
    static final String DFA44_acceptS =
        "\1\uffff\1\1\31\uffff\1\2";
    static final String DFA44_specialS =
        "\34\uffff}>";
    static final String[] DFA44_transitionS = {
            "\2\1\24\uffff\1\33\1\uffff\1\1\2\uffff\7\1\2\uffff\1\1\5\uffff"+
            "\2\1\4\uffff\14\1\11\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "1171:1: interfaceBodyDeclaration returns [Declaration ret_decl] : (t1= modifiers t2= interfaceMemberDecl | ';' );";
        }
    }
    static final String DFA45_eotS =
        "\20\uffff";
    static final String DFA45_eofS =
        "\20\uffff";
    static final String DFA45_minS =
        "\1\4\17\uffff";
    static final String DFA45_maxS =
        "\1\111\17\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\uffff\1\5\1\uffff";
    static final String DFA45_specialS =
        "\20\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\1\1\16\37\uffff\1\16\2\uffff\1\12\5\uffff\1\14\1\13\10\uffff"+
            "\10\1\11\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "1185:1: interfaceMemberDecl returns [Declaration ret_decl] : (t1= interfaceMethodOrFieldDecl | t2= interfaceGenericMethodDecl | 'void' Identifier t3= voidInterfaceMethodDeclaratorRest | t4= interfaceDeclaration | t5= classDeclaration );";
        }
    }
    static final String DFA54_eotS =
        "\13\uffff";
    static final String DFA54_eofS =
        "\13\uffff";
    static final String DFA54_minS =
        "\1\4\12\uffff";
    static final String DFA54_maxS =
        "\1\77\12\uffff";
    static final String DFA54_acceptS =
        "\1\uffff\1\1\10\uffff\1\2";
    static final String DFA54_specialS =
        "\13\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\1\52\uffff\1\12\10\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "1322:27: (t2= type | 'void' )";
        }
    }
    static final String DFA62_eotS =
        "\37\uffff";
    static final String DFA62_eofS =
        "\37\uffff";
    static final String DFA62_minS =
        "\1\4\36\uffff";
    static final String DFA62_maxS =
        "\1\161\36\uffff";
    static final String DFA62_acceptS =
        "\1\uffff\1\1\1\2\34\uffff";
    static final String DFA62_specialS =
        "\37\uffff}>";
    static final String[] DFA62_transitionS = {
            "\1\2\1\uffff\6\2\40\uffff\1\1\2\uffff\1\2\10\uffff\10\2\1\uffff"+
            "\2\2\2\uffff\4\2\40\uffff\2\2\2\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA62_eot = DFA.unpackEncodedString(DFA62_eotS);
    static final short[] DFA62_eof = DFA.unpackEncodedString(DFA62_eofS);
    static final char[] DFA62_min = DFA.unpackEncodedStringToUnsignedChars(DFA62_minS);
    static final char[] DFA62_max = DFA.unpackEncodedStringToUnsignedChars(DFA62_maxS);
    static final short[] DFA62_accept = DFA.unpackEncodedString(DFA62_acceptS);
    static final short[] DFA62_special = DFA.unpackEncodedString(DFA62_specialS);
    static final short[][] DFA62_transition;

    static {
        int numStates = DFA62_transitionS.length;
        DFA62_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA62_transition[i] = DFA.unpackEncodedString(DFA62_transitionS[i]);
        }
    }

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;
        }
        public String getDescription() {
            return "1466:1: variableInitializer returns [Declaration ret_decl] : (t1= arrayInitializer | t2= expression );";
        }
    }
    static final String DFA65_eotS =
        "\40\uffff";
    static final String DFA65_eofS =
        "\40\uffff";
    static final String DFA65_minS =
        "\1\4\37\uffff";
    static final String DFA65_maxS =
        "\1\161\37\uffff";
    static final String DFA65_acceptS =
        "\1\uffff\1\1\35\uffff\1\2";
    static final String DFA65_specialS =
        "\40\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\1\1\uffff\6\1\40\uffff\1\1\1\37\1\uffff\1\1\10\uffff\10\1"+
            "\1\uffff\2\1\2\uffff\4\1\40\uffff\2\1\2\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "1483:13: (t1= variableInitializer ( ',' t2= variableInitializer )* ( ',' )? )?";
        }
    }
    static final String DFA63_eotS =
        "\42\uffff";
    static final String DFA63_eofS =
        "\42\uffff";
    static final String DFA63_minS =
        "\1\51\1\4\40\uffff";
    static final String DFA63_maxS =
        "\1\55\1\161\40\uffff";
    static final String DFA63_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\35\uffff";
    static final String DFA63_specialS =
        "\42\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\1\3\uffff\1\2",
            "\1\4\1\uffff\6\4\40\uffff\1\4\1\2\1\uffff\1\4\10\uffff\10\4"+
            "\1\uffff\2\4\2\uffff\4\4\40\uffff\2\4\2\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "()* loopback of 1484:10: ( ',' t2= variableInitializer )*";
        }
    }
    static final String DFA66_eotS =
        "\15\uffff";
    static final String DFA66_eofS =
        "\15\uffff";
    static final String DFA66_minS =
        "\1\34\14\uffff";
    static final String DFA66_maxS =
        "\1\111\14\uffff";
    static final String DFA66_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA66_specialS =
        "\15\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\5\2\uffff\1\2\1\3\1\4\1\6\1\7\1\14\17\uffff\1\10\1\11\1\12"+
            "\1\13\21\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "1511:1: modifier returns [Declaration ret_decl] : (t1= annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );";
        }
    }
    static final String DFA69_eotS =
        "\12\uffff";
    static final String DFA69_eofS =
        "\12\uffff";
    static final String DFA69_minS =
        "\1\4\11\uffff";
    static final String DFA69_maxS =
        "\1\77\11\uffff";
    static final String DFA69_acceptS =
        "\1\uffff\1\1\1\2\7\uffff";
    static final String DFA69_specialS =
        "\12\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\1\63\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "1602:1: type returns [Declaration ret_decl] : (t1= classOrInterfaceType ( '[' ']' )* | t2= primitiveType ( '[' ']' )* );";
        }
    }
    static final String DFA67_eotS =
        "\40\uffff";
    static final String DFA67_eofS =
        "\1\1\37\uffff";
    static final String DFA67_minS =
        "\1\4\37\uffff";
    static final String DFA67_maxS =
        "\1\147\37\uffff";
    static final String DFA67_acceptS =
        "\1\uffff\1\2\35\uffff\1\1";
    static final String DFA67_specialS =
        "\40\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\1\25\uffff\1\1\14\uffff\7\1\2\uffff\1\37\1\1\1\uffff\1\1"+
            "\14\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\16\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "()* loopback of 1611:7: ( '[' ']' )*";
        }
    }
    static final String DFA68_eotS =
        "\40\uffff";
    static final String DFA68_eofS =
        "\1\1\37\uffff";
    static final String DFA68_minS =
        "\1\4\37\uffff";
    static final String DFA68_maxS =
        "\1\147\37\uffff";
    static final String DFA68_acceptS =
        "\1\uffff\1\2\35\uffff\1\1";
    static final String DFA68_specialS =
        "\40\uffff}>";
    static final String[] DFA68_transitionS = {
            "\1\1\25\uffff\1\1\14\uffff\7\1\2\uffff\1\37\1\1\1\uffff\1\1"+
            "\14\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\16\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "()* loopback of 1622:8: ( '[' ']' )*";
        }
    }
    static final String DFA70_eotS =
        "\55\uffff";
    static final String DFA70_eofS =
        "\1\2\54\uffff";
    static final String DFA70_minS =
        "\2\4\53\uffff";
    static final String DFA70_maxS =
        "\1\147\1\100\53\uffff";
    static final String DFA70_acceptS =
        "\2\uffff\1\2\40\uffff\1\1\11\uffff";
    static final String DFA70_specialS =
        "\55\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\2\25\uffff\1\2\2\uffff\1\2\11\uffff\1\2\1\1\5\2\2\uffff\2"+
            "\2\1\uffff\1\2\14\uffff\1\2\1\uffff\3\2\6\uffff\1\2\16\uffff"+
            "\16\2",
            "\1\43\43\uffff\1\2\17\uffff\11\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "1633:21: (t2= typeArguments )?";
        }
    }
    static final String DFA72_eotS =
        "\42\uffff";
    static final String DFA72_eofS =
        "\1\1\41\uffff";
    static final String DFA72_minS =
        "\1\4\41\uffff";
    static final String DFA72_maxS =
        "\1\147\41\uffff";
    static final String DFA72_acceptS =
        "\1\uffff\1\2\37\uffff\1\1";
    static final String DFA72_specialS =
        "\42\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\1\25\uffff\1\1\2\uffff\1\41\11\uffff\7\1\2\uffff\2\1\1\uffff"+
            "\1\1\14\uffff\1\1\1\uffff\3\1\6\uffff\1\1\16\uffff\16\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "()* loopback of 1638:7: ( '.' t3= Identifier (t4= typeArguments )? )*";
        }
    }
    static final String DFA71_eotS =
        "\55\uffff";
    static final String DFA71_eofS =
        "\1\2\54\uffff";
    static final String DFA71_minS =
        "\2\4\53\uffff";
    static final String DFA71_maxS =
        "\1\147\1\100\53\uffff";
    static final String DFA71_acceptS =
        "\2\uffff\1\2\40\uffff\1\1\11\uffff";
    static final String DFA71_specialS =
        "\55\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\2\25\uffff\1\2\2\uffff\1\2\11\uffff\1\2\1\1\5\2\2\uffff\2"+
            "\2\1\uffff\1\2\14\uffff\1\2\1\uffff\3\2\6\uffff\1\2\16\uffff"+
            "\16\2",
            "\1\43\43\uffff\1\2\17\uffff\11\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "1638:28: (t4= typeArguments )?";
        }
    }
    static final String DFA78_eotS =
        "\13\uffff";
    static final String DFA78_eofS =
        "\13\uffff";
    static final String DFA78_minS =
        "\1\4\12\uffff";
    static final String DFA78_maxS =
        "\1\100\12\uffff";
    static final String DFA78_acceptS =
        "\1\uffff\1\1\10\uffff\1\2";
    static final String DFA78_specialS =
        "\13\uffff}>";
    static final String[] DFA78_transitionS = {
            "\1\1\63\uffff\10\1\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA78_eot = DFA.unpackEncodedString(DFA78_eotS);
    static final short[] DFA78_eof = DFA.unpackEncodedString(DFA78_eofS);
    static final char[] DFA78_min = DFA.unpackEncodedStringToUnsignedChars(DFA78_minS);
    static final char[] DFA78_max = DFA.unpackEncodedStringToUnsignedChars(DFA78_maxS);
    static final short[] DFA78_accept = DFA.unpackEncodedString(DFA78_acceptS);
    static final short[] DFA78_special = DFA.unpackEncodedString(DFA78_specialS);
    static final short[][] DFA78_transition;

    static {
        int numStates = DFA78_transitionS.length;
        DFA78_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA78_transition[i] = DFA.unpackEncodedString(DFA78_transitionS[i]);
        }
    }

    class DFA78 extends DFA {

        public DFA78(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 78;
            this.eot = DFA78_eot;
            this.eof = DFA78_eof;
            this.min = DFA78_min;
            this.max = DFA78_max;
            this.accept = DFA78_accept;
            this.special = DFA78_special;
            this.transition = DFA78_transition;
        }
        public String getDescription() {
            return "1745:1: typeArgument returns [Declaration ret_decl] : (t1= type | '?' ( ( 'extends' | 'super' ) t2= type )? );";
        }
    }
    static final String DFA80_eotS =
        "\15\uffff";
    static final String DFA80_eofS =
        "\15\uffff";
    static final String DFA80_minS =
        "\1\4\14\uffff";
    static final String DFA80_maxS =
        "\1\111\14\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\1\12\uffff\1\2";
    static final String DFA80_specialS =
        "\15\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\1\36\uffff\1\1\24\uffff\10\1\3\uffff\1\14\5\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "1800:13: (t1= formalParameterDecls )?";
        }
    }
    static final String DFA83_eotS =
        "\u01c9\uffff";
    static final String DFA83_eofS =
        "\u01c9\uffff";
    static final String DFA83_minS =
        "\1\4\1\uffff\1\32\1\35\1\4\11\32\12\4\1\35\40\uffff\3\0\34\uffff"+
        "\40\0\35\uffff\1\0\35\uffff\1\0\35\uffff\1\0\35\uffff\1\0\35\uffff"+
        "\1\0\35\uffff\1\0\35\uffff\1\0\35\uffff\1\0\35\uffff\12\0\2\uffff"+
        "\2\0\1\uffff\1\0\33\uffff\2\0\1\uffff\2\0\1\uffff\2\0\1\uffff\2"+
        "\0\1\uffff\1\0\1\uffff\3\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0";
    static final String DFA83_maxS =
        "\1\161\1\uffff\1\156\1\102\1\161\11\156\1\77\1\156\10\60\1\35\40"+
        "\uffff\3\0\34\uffff\40\0\35\uffff\1\0\35\uffff\1\0\35\uffff\1\0"+
        "\35\uffff\1\0\35\uffff\1\0\35\uffff\1\0\35\uffff\1\0\35\uffff\1"+
        "\0\35\uffff\12\0\2\uffff\2\0\1\uffff\1\0\33\uffff\2\0\1\uffff\2"+
        "\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\1\uffff\3\0\1\uffff\2\0\1"+
        "\uffff\2\0\1\uffff\1\0";
    static final String DFA83_acceptS =
        "\1\uffff\1\1\27\uffff\1\2\u01af\uffff";
    static final String DFA83_specialS =
        "\71\uffff\1\0\1\1\1\2\34\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
        "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\35\uffff"+
        "\1\43\35\uffff\1\44\35\uffff\1\45\35\uffff\1\46\35\uffff\1\47\35"+
        "\uffff\1\50\35\uffff\1\51\35\uffff\1\52\35\uffff\1\53\1\54\1\55"+
        "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\2\uffff\1\65\1\66\1\uffff\1"+
        "\67\33\uffff\1\70\1\71\1\uffff\1\72\1\73\1\uffff\1\74\1\75\1\uffff"+
        "\1\76\1\77\1\uffff\1\100\1\uffff\1\101\1\102\1\103\1\uffff\1\104"+
        "\1\105\1\uffff\1\106\1\107\1\uffff\1\110}>";
    static final String[] DFA83_transitionS = {
            "\1\17\1\31\1\10\1\11\1\12\1\5\1\6\1\7\1\31\15\uffff\1\31\1\uffff"+
            "\1\31\2\uffff\7\31\2\uffff\1\1\3\uffff\3\31\1\30\5\uffff\1\31"+
            "\2\uffff\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\uffff\1\3"+
            "\1\4\2\uffff\1\2\1\15\1\13\1\14\1\31\2\uffff\1\31\1\uffff\4"+
            "\31\1\uffff\5\31\21\uffff\2\31\2\uffff\4\31\1\16",
            "",
            "\1\31\2\uffff\1\71\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\72\2\uffff\1\31\14\uffff\1\31\1\uffff\1\73\27\uffff\25\31",
            "\1\131\44\uffff\1\130",
            "\1\155\1\uffff\1\146\1\147\1\150\1\143\1\144\1\145\43\uffff"+
            "\1\166\10\uffff\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1"+
            "\165\1\uffff\1\142\1\140\2\uffff\1\141\1\153\1\151\1\152\40"+
            "\uffff\1\132\1\133\2\uffff\1\134\1\135\1\136\1\137\1\154",
            "\1\31\2\uffff\1\167\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\14\uffff\1\31\31\uffff\25\31",
            "\1\31\2\uffff\1\u0095\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\14\uffff\1\31\31\uffff\25\31",
            "\1\31\2\uffff\1\u00b3\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\14\uffff\1\31\31\uffff\25\31",
            "\1\31\2\uffff\1\u00d1\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\14\uffff\1\31\31\uffff\25\31",
            "\1\31\2\uffff\1\u00ef\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\14\uffff\1\31\31\uffff\25\31",
            "\1\31\2\uffff\1\u010d\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\14\uffff\1\31\31\uffff\25\31",
            "\1\31\2\uffff\1\u012b\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\14\uffff\1\31\31\uffff\25\31",
            "\1\31\2\uffff\1\u0149\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\14\uffff\1\31\31\uffff\25\31",
            "\1\31\2\uffff\1\u0167\1\31\11\uffff\1\31\1\uffff\2\31\4\uffff"+
            "\1\31\2\uffff\1\31\14\uffff\1\31\31\uffff\25\31",
            "\1\u0186\43\uffff\1\u0185\17\uffff\1\u0187\1\u0188\1\u0189"+
            "\1\u018a\1\u018b\1\u018c\1\u018d\1\u018e",
            "\1\31\25\uffff\1\31\2\uffff\1\u0191\1\31\11\uffff\1\31\1\uffff"+
            "\2\31\4\uffff\1\u0192\2\uffff\1\31\14\uffff\1\31\1\uffff\1\u0194"+
            "\10\uffff\1\31\16\uffff\25\31",
            "\1\31\30\uffff\1\u01b1\22\uffff\1\u01b0",
            "\1\31\30\uffff\1\u01b4\22\uffff\1\u01b3",
            "\1\31\30\uffff\1\u01b7\22\uffff\1\u01b6",
            "\1\31\30\uffff\1\u01ba\22\uffff\1\u01b9",
            "\1\31\30\uffff\1\u01be\22\uffff\1\u01bc",
            "\1\31\30\uffff\1\u01c0\22\uffff\1\u01bf",
            "\1\31\30\uffff\1\u01c3\22\uffff\1\u01c2",
            "\1\31\30\uffff\1\u01c6\22\uffff\1\u01c5",
            "\1\u01c8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff"
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "1867:13: (t1= explicitConstructorInvocation )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA83_57 = input.LA(1);

                         
                        int index83_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_57);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA83_58 = input.LA(1);

                         
                        int index83_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_58);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA83_59 = input.LA(1);

                         
                        int index83_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_59);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA83_88 = input.LA(1);

                         
                        int index83_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_88);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA83_89 = input.LA(1);

                         
                        int index83_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_89);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA83_90 = input.LA(1);

                         
                        int index83_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_90);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA83_91 = input.LA(1);

                         
                        int index83_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_91);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA83_92 = input.LA(1);

                         
                        int index83_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_92);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA83_93 = input.LA(1);

                         
                        int index83_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_93);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA83_94 = input.LA(1);

                         
                        int index83_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_94);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA83_95 = input.LA(1);

                         
                        int index83_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_95);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA83_96 = input.LA(1);

                         
                        int index83_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_96);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA83_97 = input.LA(1);

                         
                        int index83_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_97);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA83_98 = input.LA(1);

                         
                        int index83_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_98);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA83_99 = input.LA(1);

                         
                        int index83_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_99);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA83_100 = input.LA(1);

                         
                        int index83_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_100);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA83_101 = input.LA(1);

                         
                        int index83_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_101);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA83_102 = input.LA(1);

                         
                        int index83_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_102);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA83_103 = input.LA(1);

                         
                        int index83_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_103);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA83_104 = input.LA(1);

                         
                        int index83_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_104);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA83_105 = input.LA(1);

                         
                        int index83_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_105);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA83_106 = input.LA(1);

                         
                        int index83_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_106);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA83_107 = input.LA(1);

                         
                        int index83_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_107);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA83_108 = input.LA(1);

                         
                        int index83_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_108);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA83_109 = input.LA(1);

                         
                        int index83_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_109);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA83_110 = input.LA(1);

                         
                        int index83_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_110);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA83_111 = input.LA(1);

                         
                        int index83_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_111);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA83_112 = input.LA(1);

                         
                        int index83_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_112);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA83_113 = input.LA(1);

                         
                        int index83_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_113);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA83_114 = input.LA(1);

                         
                        int index83_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_114);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA83_115 = input.LA(1);

                         
                        int index83_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_115);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA83_116 = input.LA(1);

                         
                        int index83_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_116);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA83_117 = input.LA(1);

                         
                        int index83_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_117);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA83_118 = input.LA(1);

                         
                        int index83_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_118);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA83_119 = input.LA(1);

                         
                        int index83_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_119);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA83_149 = input.LA(1);

                         
                        int index83_149 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_149);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA83_179 = input.LA(1);

                         
                        int index83_179 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_179);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA83_209 = input.LA(1);

                         
                        int index83_209 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_209);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA83_239 = input.LA(1);

                         
                        int index83_239 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_239);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA83_269 = input.LA(1);

                         
                        int index83_269 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_269);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA83_299 = input.LA(1);

                         
                        int index83_299 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_299);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA83_329 = input.LA(1);

                         
                        int index83_329 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_329);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA83_359 = input.LA(1);

                         
                        int index83_359 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_359);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA83_389 = input.LA(1);

                         
                        int index83_389 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_389);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA83_390 = input.LA(1);

                         
                        int index83_390 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_390);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA83_391 = input.LA(1);

                         
                        int index83_391 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_391);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA83_392 = input.LA(1);

                         
                        int index83_392 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_392);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA83_393 = input.LA(1);

                         
                        int index83_393 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_393);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA83_394 = input.LA(1);

                         
                        int index83_394 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_394);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA83_395 = input.LA(1);

                         
                        int index83_395 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_395);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA83_396 = input.LA(1);

                         
                        int index83_396 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_396);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA83_397 = input.LA(1);

                         
                        int index83_397 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_397);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA83_398 = input.LA(1);

                         
                        int index83_398 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_398);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA83_401 = input.LA(1);

                         
                        int index83_401 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_401);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA83_402 = input.LA(1);

                         
                        int index83_402 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_402);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA83_404 = input.LA(1);

                         
                        int index83_404 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_404);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA83_432 = input.LA(1);

                         
                        int index83_432 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_432);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA83_433 = input.LA(1);

                         
                        int index83_433 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_433);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA83_435 = input.LA(1);

                         
                        int index83_435 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_435);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA83_436 = input.LA(1);

                         
                        int index83_436 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_436);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA83_438 = input.LA(1);

                         
                        int index83_438 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_438);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA83_439 = input.LA(1);

                         
                        int index83_439 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_439);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA83_441 = input.LA(1);

                         
                        int index83_441 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_441);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA83_442 = input.LA(1);

                         
                        int index83_442 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_442);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA83_444 = input.LA(1);

                         
                        int index83_444 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_444);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA83_446 = input.LA(1);

                         
                        int index83_446 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_446);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA83_447 = input.LA(1);

                         
                        int index83_447 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_447);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA83_448 = input.LA(1);

                         
                        int index83_448 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_448);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA83_450 = input.LA(1);

                         
                        int index83_450 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_450);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA83_451 = input.LA(1);

                         
                        int index83_451 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_451);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA83_453 = input.LA(1);

                         
                        int index83_453 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_453);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA83_454 = input.LA(1);

                         
                        int index83_454 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_454);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA83_456 = input.LA(1);

                         
                        int index83_456 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_456);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 83, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA84_eotS =
        "\70\uffff";
    static final String DFA84_eofS =
        "\70\uffff";
    static final String DFA84_minS =
        "\1\4\67\uffff";
    static final String DFA84_maxS =
        "\1\161\67\uffff";
    static final String DFA84_acceptS =
        "\1\uffff\1\2\1\1\65\uffff";
    static final String DFA84_specialS =
        "\70\uffff}>";
    static final String[] DFA84_transitionS = {
            "\11\2\15\uffff\1\2\1\uffff\1\2\2\uffff\7\2\6\uffff\1\2\1\1\2"+
            "\2\5\uffff\1\2\2\uffff\10\2\1\uffff\2\2\2\uffff\5\2\2\uffff"+
            "\1\2\1\uffff\4\2\1\uffff\5\2\21\uffff\2\2\2\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "()* loopback of 1868:9: (t2= blockStatement )*";
        }
    }
    static final String DFA88_eotS =
        "\36\uffff";
    static final String DFA88_eofS =
        "\36\uffff";
    static final String DFA88_minS =
        "\1\4\1\uffff\2\35\27\uffff\2\0\1\uffff";
    static final String DFA88_maxS =
        "\1\161\1\uffff\2\102\27\uffff\2\0\1\uffff";
    static final String DFA88_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\31\uffff";
    static final String DFA88_specialS =
        "\33\uffff\1\0\1\1\1\uffff}>";
    static final String[] DFA88_transitionS = {
            "\1\4\1\uffff\6\4\34\uffff\1\1\6\uffff\1\4\10\uffff\10\4\1\uffff"+
            "\1\3\1\4\2\uffff\1\2\3\4\50\uffff\1\4",
            "",
            "\1\4\22\uffff\1\4\21\uffff\1\33",
            "\1\4\44\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "1882:1: explicitConstructorInvocation returns [Declaration ret] : ( (t1= nonWildcardTypeArguments )? ( 'this' | 'super' ) t2= arguments ';' | t3= primary '.' (t4= nonWildcardTypeArguments )? 'super' t5= arguments ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA88_27 = input.LA(1);

                         
                        int index88_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index88_27);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA88_28 = input.LA(1);

                         
                        int index88_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index88_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA90_eotS =
        "\12\uffff";
    static final String DFA90_eofS =
        "\12\uffff";
    static final String DFA90_minS =
        "\1\6\11\uffff";
    static final String DFA90_maxS =
        "\1\110\11\uffff";
    static final String DFA90_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\1\3\1\4\1\5\1\uffff\1\6";
    static final String DFA90_specialS =
        "\12\uffff}>";
    static final String[] DFA90_transitionS = {
            "\1\4\1\5\1\6\3\1\72\uffff\1\11\2\7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
    static final short[][] DFA90_transition;

    static {
        int numStates = DFA90_transitionS.length;
        DFA90_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = DFA90_eot;
            this.eof = DFA90_eof;
            this.min = DFA90_min;
            this.max = DFA90_max;
            this.accept = DFA90_accept;
            this.special = DFA90_special;
            this.transition = DFA90_transition;
        }
        public String getDescription() {
            return "1940:1: literal returns [Declaration ret] : (t1= integerLiteral | t2= FloatingPointLiteral | t3= CharacterLiteral | t4= StringLiteral | t5= booleanLiteral | 'null' );";
        }
    }
    static final String DFA93_eotS =
        "\22\uffff";
    static final String DFA93_eofS =
        "\1\1\21\uffff";
    static final String DFA93_minS =
        "\1\4\1\uffff\1\4\15\uffff\1\0\1\uffff";
    static final String DFA93_maxS =
        "\1\111\1\uffff\1\56\15\uffff\1\0\1\uffff";
    static final String DFA93_acceptS =
        "\1\uffff\1\2\17\uffff\1\1";
    static final String DFA93_specialS =
        "\20\uffff\1\0\1\uffff}>";
    static final String[] DFA93_transitionS = {
            "\2\1\23\uffff\1\1\2\uffff\1\1\2\uffff\7\1\10\uffff\1\1\32\uffff"+
            "\1\2",
            "",
            "\1\20\51\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "()+ loopback of 2010:9: (t1= annotation )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA93_16 = input.LA(1);

                         
                        int index93_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index93_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 93, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA95_eotS =
        "\42\uffff";
    static final String DFA95_eofS =
        "\1\2\41\uffff";
    static final String DFA95_minS =
        "\1\4\41\uffff";
    static final String DFA95_maxS =
        "\1\111\41\uffff";
    static final String DFA95_acceptS =
        "\1\uffff\1\1\1\2\37\uffff";
    static final String DFA95_specialS =
        "\42\uffff}>";
    static final String[] DFA95_transitionS = {
            "\2\2\23\uffff\2\2\1\uffff\1\2\2\uffff\7\2\2\uffff\2\2\3\uffff"+
            "\3\2\4\uffff\14\2\2\uffff\1\1\1\2\5\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "2028:9: ( '(' (t2= elementValuePairs | t3= elementValue )? ')' )?";
        }
    }
    static final String DFA94_eotS =
        "\70\uffff";
    static final String DFA94_eofS =
        "\70\uffff";
    static final String DFA94_minS =
        "\1\4\1\35\66\uffff";
    static final String DFA94_maxS =
        "\1\161\1\156\66\uffff";
    static final String DFA94_acceptS =
        "\2\uffff\1\2\35\uffff\1\3\1\1\26\uffff";
    static final String DFA94_specialS =
        "\70\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\1\1\uffff\6\2\40\uffff\1\2\2\uffff\1\2\10\uffff\10\2\1\uffff"+
            "\2\2\1\40\1\uffff\5\2\37\uffff\2\2\2\uffff\5\2",
            "\2\2\11\uffff\1\2\1\uffff\2\2\4\uffff\1\2\2\uffff\1\41\14\uffff"+
            "\1\2\1\uffff\2\2\36\uffff\15\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "2032:17: (t2= elementValuePairs | t3= elementValue )?";
        }
    }
    static final String DFA96_eotS =
        "\43\uffff";
    static final String DFA96_eofS =
        "\1\1\42\uffff";
    static final String DFA96_minS =
        "\1\4\42\uffff";
    static final String DFA96_maxS =
        "\1\111\42\uffff";
    static final String DFA96_acceptS =
        "\1\uffff\1\2\40\uffff\1\1";
    static final String DFA96_specialS =
        "\43\uffff}>";
    static final String[] DFA96_transitionS = {
            "\2\1\23\uffff\2\1\1\uffff\1\1\1\42\1\uffff\7\1\2\uffff\2\1\3"+
            "\uffff\3\1\4\uffff\14\1\2\uffff\2\1\5\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "()* loopback of 2054:18: ( '.' Identifier )*";
        }
    }
    static final String DFA98_eotS =
        "\40\uffff";
    static final String DFA98_eofS =
        "\40\uffff";
    static final String DFA98_minS =
        "\1\4\37\uffff";
    static final String DFA98_maxS =
        "\1\161\37\uffff";
    static final String DFA98_acceptS =
        "\1\uffff\1\1\34\uffff\1\2\1\3";
    static final String DFA98_specialS =
        "\40\uffff}>";
    static final String[] DFA98_transitionS = {
            "\1\1\1\uffff\6\1\40\uffff\1\37\2\uffff\1\1\10\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\4\1\1\36\37\uffff\2\1\2\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "2092:1: elementValue returns [Declaration ret] : (t1= conditionalExpression | t2= annotation | t3= elementValueArrayInitializer );";
        }
    }
    static final String DFA100_eotS =
        "\42\uffff";
    static final String DFA100_eofS =
        "\42\uffff";
    static final String DFA100_minS =
        "\1\4\41\uffff";
    static final String DFA100_maxS =
        "\1\161\41\uffff";
    static final String DFA100_acceptS =
        "\1\uffff\1\1\36\uffff\1\2\1\uffff";
    static final String DFA100_specialS =
        "\42\uffff}>";
    static final String[] DFA100_transitionS = {
            "\1\1\1\uffff\6\1\35\uffff\1\40\2\uffff\1\1\1\40\1\uffff\1\1"+
            "\10\uffff\10\1\1\uffff\2\1\2\uffff\5\1\37\uffff\2\1\2\uffff"+
            "\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "2113:13: (t1= elementValue ( ',' t2= elementValue )* )?";
        }
    }
    static final String DFA99_eotS =
        "\43\uffff";
    static final String DFA99_eofS =
        "\43\uffff";
    static final String DFA99_minS =
        "\1\51\1\4\41\uffff";
    static final String DFA99_maxS =
        "\1\55\1\161\41\uffff";
    static final String DFA99_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\36\uffff";
    static final String DFA99_specialS =
        "\43\uffff}>";
    static final String[] DFA99_transitionS = {
            "\1\1\3\uffff\1\2",
            "\1\4\1\uffff\6\4\40\uffff\1\4\1\2\1\uffff\1\4\10\uffff\10\4"+
            "\1\uffff\2\4\2\uffff\5\4\37\uffff\2\4\2\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "()* loopback of 2119:9: ( ',' t2= elementValue )*";
        }
    }
    static final String DFA102_eotS =
        "\32\uffff";
    static final String DFA102_eofS =
        "\32\uffff";
    static final String DFA102_minS =
        "\1\4\31\uffff";
    static final String DFA102_maxS =
        "\1\111\31\uffff";
    static final String DFA102_acceptS =
        "\1\uffff\1\2\1\1\27\uffff";
    static final String DFA102_specialS =
        "\32\uffff}>";
    static final String[] DFA102_transitionS = {
            "\2\2\26\uffff\1\2\2\uffff\7\2\7\uffff\1\1\1\2\5\uffff\14\2\11"+
            "\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "()* loopback of 2158:9: (t1= annotationTypeElementDeclaration )*";
        }
    }
    static final String DFA107_eotS =
        "\16\uffff";
    static final String DFA107_eofS =
        "\16\uffff";
    static final String DFA107_minS =
        "\1\4\15\uffff";
    static final String DFA107_maxS =
        "\1\111\15\uffff";
    static final String DFA107_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5";
    static final String DFA107_specialS =
        "\16\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\1\1\14\37\uffff\1\12\10\uffff\1\13\11\uffff\10\1\11\uffff"+
            "\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "2179:1: annotationTypeElementRest returns [Declarator ret] : (t1= type t2= annotationMethodOrConstantRest ';' | t3= normalClassDeclaration ( ';' )? | t4= normalInterfaceDeclaration ( ';' )? | t5= enumDeclaration ( ';' )? | t6= annotationTypeDeclaration ( ';' )? );";
        }
    }
    static final String DFA103_eotS =
        "\34\uffff";
    static final String DFA103_eofS =
        "\1\2\33\uffff";
    static final String DFA103_minS =
        "\1\4\33\uffff";
    static final String DFA103_maxS =
        "\1\111\33\uffff";
    static final String DFA103_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA103_specialS =
        "\34\uffff}>";
    static final String[] DFA103_transitionS = {
            "\2\2\24\uffff\1\1\1\uffff\1\2\2\uffff\7\2\7\uffff\2\2\5\uffff"+
            "\14\2\11\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "2189:35: ( ';' )?";
        }
    }
    static final String DFA104_eotS =
        "\34\uffff";
    static final String DFA104_eofS =
        "\1\2\33\uffff";
    static final String DFA104_minS =
        "\1\4\33\uffff";
    static final String DFA104_maxS =
        "\1\111\33\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA104_specialS =
        "\34\uffff}>";
    static final String[] DFA104_transitionS = {
            "\2\2\24\uffff\1\1\1\uffff\1\2\2\uffff\7\2\7\uffff\2\2\5\uffff"+
            "\14\2\11\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "2196:39: ( ';' )?";
        }
    }
    static final String DFA105_eotS =
        "\34\uffff";
    static final String DFA105_eofS =
        "\1\2\33\uffff";
    static final String DFA105_minS =
        "\1\4\33\uffff";
    static final String DFA105_maxS =
        "\1\111\33\uffff";
    static final String DFA105_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA105_specialS =
        "\34\uffff}>";
    static final String[] DFA105_transitionS = {
            "\2\2\24\uffff\1\1\1\uffff\1\2\2\uffff\7\2\7\uffff\2\2\5\uffff"+
            "\14\2\11\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "2203:28: ( ';' )?";
        }
    }
    static final String DFA106_eotS =
        "\34\uffff";
    static final String DFA106_eofS =
        "\1\2\33\uffff";
    static final String DFA106_minS =
        "\1\4\33\uffff";
    static final String DFA106_maxS =
        "\1\111\33\uffff";
    static final String DFA106_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA106_specialS =
        "\34\uffff}>";
    static final String[] DFA106_transitionS = {
            "\2\2\24\uffff\1\1\1\uffff\1\2\2\uffff\7\2\7\uffff\2\2\5\uffff"+
            "\14\2\11\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "2210:38: ( ';' )?";
        }
    }
    static final String DFA110_eotS =
        "\70\uffff";
    static final String DFA110_eofS =
        "\70\uffff";
    static final String DFA110_minS =
        "\1\4\67\uffff";
    static final String DFA110_maxS =
        "\1\161\67\uffff";
    static final String DFA110_acceptS =
        "\1\uffff\1\2\1\1\65\uffff";
    static final String DFA110_specialS =
        "\70\uffff}>";
    static final String[] DFA110_transitionS = {
            "\11\2\15\uffff\1\2\1\uffff\1\2\2\uffff\7\2\6\uffff\1\2\1\1\2"+
            "\2\5\uffff\1\2\2\uffff\10\2\1\uffff\2\2\2\uffff\5\2\2\uffff"+
            "\1\2\1\uffff\4\2\1\uffff\5\2\21\uffff\2\2\2\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "()* loopback of 2271:13: (t1= blockStatement )*";
        }
    }
    static final String DFA111_eotS =
        "\u0086\uffff";
    static final String DFA111_eofS =
        "\u0086\uffff";
    static final String DFA111_minS =
        "\14\4\56\uffff\1\0\5\uffff\1\0\13\uffff\1\0\1\uffff\3\0\35\uffff"+
        "\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0"+
        "\2\uffff\1\0\2\uffff\1\0\2\uffff";
    static final String DFA111_maxS =
        "\1\161\1\111\1\56\1\156\10\60\56\uffff\1\0\5\uffff\1\0\13\uffff"+
        "\1\0\1\uffff\3\0\35\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1"+
        "\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff";
    static final String DFA111_acceptS =
        "\14\uffff\1\2\10\uffff\1\3\54\uffff\1\1\103\uffff";
    static final String DFA111_specialS =
        "\72\uffff\1\0\5\uffff\1\1\13\uffff\1\2\1\uffff\1\3\1\4\1\5\35\uffff"+
        "\1\6\2\uffff\1\7\2\uffff\1\10\2\uffff\1\11\2\uffff\1\12\2\uffff"+
        "\1\13\2\uffff\1\14\2\uffff\1\15\2\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\3\1\14\7\25\15\uffff\1\25\1\uffff\1\14\2\uffff\4\14\1\1\2"+
            "\14\6\uffff\1\25\1\uffff\1\14\1\25\5\uffff\1\25\2\uffff\1\4"+
            "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\2\25\2\uffff\4\25\1"+
            "\2\2\uffff\1\25\1\uffff\4\25\1\uffff\5\25\21\uffff\2\25\2\uffff"+
            "\5\25",
            "\1\102\1\14\26\uffff\1\14\2\uffff\4\14\1\100\2\14\10\uffff"+
            "\1\14\11\uffff\10\102\11\uffff\1\72",
            "\1\114\51\uffff\1\14",
            "\1\102\25\uffff\1\25\2\uffff\1\117\1\25\11\uffff\1\116\1\uffff"+
            "\2\25\4\uffff\1\120\2\uffff\1\25\14\uffff\1\25\1\uffff\1\25"+
            "\10\uffff\1\25\16\uffff\25\25",
            "\1\102\30\uffff\1\25\22\uffff\1\156",
            "\1\102\30\uffff\1\25\22\uffff\1\161",
            "\1\102\30\uffff\1\25\22\uffff\1\164",
            "\1\102\30\uffff\1\25\22\uffff\1\167",
            "\1\102\30\uffff\1\25\22\uffff\1\172",
            "\1\102\30\uffff\1\25\22\uffff\1\175",
            "\1\102\30\uffff\1\25\22\uffff\1\u0080",
            "\1\102\30\uffff\1\25\22\uffff\1\u0083",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "2279:1: blockStatement returns [Declaration ret] : (t1= localVariableDeclarationStatement | t2= classOrInterfaceDeclaration | t3= statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA111_58 = input.LA(1);

                         
                        int index111_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (synpred152_Java()) ) {s = 12;}

                         
                        input.seek(index111_58);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA111_64 = input.LA(1);

                         
                        int index111_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (synpred152_Java()) ) {s = 12;}

                         
                        input.seek(index111_64);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA111_76 = input.LA(1);

                         
                        int index111_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (synpred152_Java()) ) {s = 12;}

                         
                        input.seek(index111_76);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA111_78 = input.LA(1);

                         
                        int index111_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_78);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA111_79 = input.LA(1);

                         
                        int index111_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_79);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA111_80 = input.LA(1);

                         
                        int index111_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_80);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA111_110 = input.LA(1);

                         
                        int index111_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_110);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA111_113 = input.LA(1);

                         
                        int index111_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_113);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA111_116 = input.LA(1);

                         
                        int index111_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_116);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA111_119 = input.LA(1);

                         
                        int index111_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_119);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA111_122 = input.LA(1);

                         
                        int index111_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_122);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA111_125 = input.LA(1);

                         
                        int index111_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_125);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA111_128 = input.LA(1);

                         
                        int index111_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_128);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA111_131 = input.LA(1);

                         
                        int index111_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_131);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA112_eotS =
        "\14\uffff";
    static final String DFA112_eofS =
        "\14\uffff";
    static final String DFA112_minS =
        "\1\4\13\uffff";
    static final String DFA112_maxS =
        "\1\111\13\uffff";
    static final String DFA112_acceptS =
        "\1\uffff\1\2\10\uffff\1\1\1\uffff";
    static final String DFA112_specialS =
        "\14\uffff}>";
    static final String[] DFA112_transitionS = {
            "\1\1\36\uffff\1\12\24\uffff\10\1\11\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "()* loopback of 2324:9: (t1= variableModifier )*";
        }
    }
    static final String DFA119_eotS =
        "\114\uffff";
    static final String DFA119_eofS =
        "\114\uffff";
    static final String DFA119_minS =
        "\1\4\41\uffff\1\32\51\uffff";
    static final String DFA119_maxS =
        "\1\161\41\uffff\1\156\51\uffff";
    static final String DFA119_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\34\uffff\1\20\37\uffff";
    static final String DFA119_specialS =
        "\114\uffff}>";
    static final String[] DFA119_transitionS = {
            "\1\42\1\uffff\6\17\1\2\15\uffff\1\16\21\uffff\1\1\2\uffff\1"+
            "\17\5\uffff\1\11\2\uffff\10\17\1\uffff\2\17\2\uffff\4\17\3\uffff"+
            "\1\3\1\uffff\1\4\1\5\1\6\1\7\1\uffff\1\10\1\12\1\13\1\14\1\15"+
            "\21\uffff\2\17\2\uffff\5\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\2\uffff\2\17\11\uffff\1\17\1\uffff\2\17\4\uffff\1\17"+
            "\2\uffff\1\17\14\uffff\1\17\1\uffff\1\17\10\uffff\1\54\16\uffff"+
            "\25\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "2331:1: statement returns [Declaration ret] : (t1= block | t2= ASSERT t3= expression ( ':' t4= expression )? ';' | 'if' t5= parExpression t6= statement ( options {k=1; } : 'else' t8= statement )? | 'for' '(' t9= forControl ')' t10= statement | 'while' t11= parExpression t12= statement | 'do' t13= statement 'while' t14= parExpression ';' | 'try' t15= block (t16= catches 'finally' t17= block | t18= catches | 'finally' t19= block ) | 'switch' t20= parExpression '{' t21= switchBlockStatementGroups '}' | 'synchronized' t22= parExpression block | 'return' (t23= expression )? ';' | 'throw' t24= expression ';' | 'break' (t25= Identifier )? ';' | 'continue' (t26= Identifier )? ';' | ';' | t28= statementExpression ';' | t29= Identifier ':' t30= statement );";
        }
    }
    static final String DFA116_eotS =
        "\37\uffff";
    static final String DFA116_eofS =
        "\37\uffff";
    static final String DFA116_minS =
        "\1\4\36\uffff";
    static final String DFA116_maxS =
        "\1\161\36\uffff";
    static final String DFA116_acceptS =
        "\1\uffff\1\1\34\uffff\1\2";
    static final String DFA116_specialS =
        "\37\uffff}>";
    static final String[] DFA116_transitionS = {
            "\1\1\1\uffff\6\1\16\uffff\1\36\24\uffff\1\1\10\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\4\1\40\uffff\2\1\2\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "2427:33: (t23= expression )?";
        }
    }
    static final String DFA120_eotS =
        "\76\uffff";
    static final String DFA120_eofS =
        "\1\1\75\uffff";
    static final String DFA120_minS =
        "\1\4\75\uffff";
    static final String DFA120_maxS =
        "\1\161\75\uffff";
    static final String DFA120_acceptS =
        "\1\uffff\1\2\73\uffff\1\1";
    static final String DFA120_specialS =
        "\76\uffff}>";
    static final String[] DFA120_transitionS = {
            "\11\1\15\uffff\1\1\1\uffff\1\1\2\uffff\7\1\6\uffff\4\1\5\uffff"+
            "\1\1\2\uffff\10\1\1\uffff\2\1\2\uffff\6\1\1\uffff\14\1\1\75"+
            "\1\1\17\uffff\2\1\2\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "()* loopback of 2491:9: (t2= catchClause )*";
        }
    }
    static final String DFA122_eotS =
        "\132\uffff";
    static final String DFA122_eofS =
        "\1\1\131\uffff";
    static final String DFA122_minS =
        "\1\4\67\uffff\2\0\40\uffff";
    static final String DFA122_maxS =
        "\1\161\67\uffff\2\0\40\uffff";
    static final String DFA122_acceptS =
        "\1\uffff\1\2\126\uffff\1\1\1\uffff";
    static final String DFA122_specialS =
        "\70\uffff\1\0\1\1\40\uffff}>";
    static final String[] DFA122_transitionS = {
            "\11\1\15\uffff\1\1\1\uffff\1\1\2\uffff\7\1\6\uffff\4\1\5\uffff"+
            "\1\1\2\uffff\10\1\1\uffff\2\1\2\uffff\5\1\1\71\1\uffff\1\1\1"+
            "\uffff\4\1\1\uffff\5\1\1\uffff\1\70\17\uffff\2\1\2\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "()+ loopback of 2542:9: (t1= switchLabel )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA122_56 = input.LA(1);

                         
                        int index122_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 88;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_56);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA122_57 = input.LA(1);

                         
                        int index122_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_Java()) ) {s = 88;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_57);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA123_eotS =
        "\73\uffff";
    static final String DFA123_eofS =
        "\1\1\72\uffff";
    static final String DFA123_minS =
        "\1\4\72\uffff";
    static final String DFA123_maxS =
        "\1\161\72\uffff";
    static final String DFA123_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\65\uffff";
    static final String DFA123_specialS =
        "\73\uffff}>";
    static final String[] DFA123_transitionS = {
            "\11\5\15\uffff\1\5\1\uffff\1\5\2\uffff\7\5\6\uffff\1\5\1\1\2"+
            "\5\5\uffff\1\5\2\uffff\10\5\1\uffff\2\5\2\uffff\5\5\1\1\1\uffff"+
            "\1\5\1\uffff\4\5\1\uffff\5\5\1\uffff\1\1\17\uffff\2\5\2\uffff"+
            "\5\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "()* loopback of 2547:9: (t2= blockStatement )*";
        }
    }
    static final String DFA124_eotS =
        "\41\uffff";
    static final String DFA124_eofS =
        "\41\uffff";
    static final String DFA124_minS =
        "\1\112\1\4\1\uffff\1\0\35\uffff";
    static final String DFA124_maxS =
        "\1\131\1\161\1\uffff\1\0\35\uffff";
    static final String DFA124_acceptS =
        "\2\uffff\1\3\1\uffff\1\1\33\uffff\1\2";
    static final String DFA124_specialS =
        "\3\uffff\1\0\35\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\2\16\uffff\1\1",
            "\1\3\1\uffff\6\4\43\uffff\1\4\10\uffff\10\4\1\uffff\2\4\2\uffff"+
            "\4\4\40\uffff\2\4\2\uffff\5\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "2555:1: switchLabel returns [Declaration ret] : ( 'case' t1= constantExpression ':' | 'case' t2= enumConstantName ':' | 'default' ':' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_3 = input.LA(1);

                         
                        int index124_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 4;}

                        else if ( (synpred181_Java()) ) {s = 32;}

                         
                        input.seek(index124_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA128_eotS =
        "\u010c\uffff";
    static final String DFA128_eofS =
        "\u010c\uffff";
    static final String DFA128_minS =
        "\14\4\25\uffff\17\4\1\32\35\uffff\1\61\1\uffff\1\32\1\61\1\32\1"+
        "\uffff\1\61\1\uffff\1\32\1\61\1\uffff\1\32\1\61\1\32\1\uffff\1\61"+
        "\1\32\1\uffff\1\61\1\32\1\uffff\1\61\1\32\1\uffff\55\0\2\uffff\12"+
        "\0\24\uffff\1\0\5\uffff\1\0\42\uffff\1\0\5\uffff\1\0\5\uffff\1\0"+
        "\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff";
    static final String DFA128_maxS =
        "\1\161\1\111\1\4\1\156\10\60\25\uffff\11\60\1\111\1\4\1\111\3\161"+
        "\1\113\35\uffff\1\61\1\uffff\1\113\1\61\1\113\1\uffff\1\61\1\uffff"+
        "\1\113\1\61\1\uffff\1\113\1\61\1\113\1\uffff\1\61\1\113\1\uffff"+
        "\1\61\1\113\1\uffff\1\61\1\113\1\uffff\55\0\2\uffff\12\0\24\uffff"+
        "\1\0\5\uffff\1\0\42\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1"+
        "\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff";
    static final String DFA128_acceptS =
        "\14\uffff\1\2\u00ca\uffff\1\1\64\uffff";
    static final String DFA128_specialS =
        "\146\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\2\uffff\1\55\1\56\1\57\1\60"+
        "\1\61\1\62\1\63\1\64\1\65\1\66\24\uffff\1\67\5\uffff\1\70\42\uffff"+
        "\1\71\5\uffff\1\72\5\uffff\1\73\5\uffff\1\74\5\uffff\1\75\5\uffff"+
        "\1\76\5\uffff\1\77\5\uffff\1\100\5\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\3\1\uffff\6\14\16\uffff\1\14\10\uffff\1\1\13\uffff\1\14\10"+
            "\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\2\14\2\uffff"+
            "\4\14\1\2\37\uffff\2\14\2\uffff\5\14",
            "\1\41\36\uffff\1\52\24\uffff\1\42\1\43\1\44\1\45\1\46\1\47"+
            "\1\50\1\51\11\uffff\1\53",
            "\1\54",
            "\1\60\25\uffff\1\14\2\uffff\1\56\1\14\11\uffff\1\55\3\14\4"+
            "\uffff\1\57\2\uffff\1\14\14\uffff\1\14\1\uffff\1\14\27\uffff"+
            "\25\14",
            "\1\120\30\uffff\1\14\22\uffff\1\116",
            "\1\122\30\uffff\1\14\22\uffff\1\121",
            "\1\126\30\uffff\1\14\22\uffff\1\124",
            "\1\131\30\uffff\1\14\22\uffff\1\127",
            "\1\133\30\uffff\1\14\22\uffff\1\132",
            "\1\136\30\uffff\1\14\22\uffff\1\135",
            "\1\141\30\uffff\1\14\22\uffff\1\140",
            "\1\144\30\uffff\1\14\22\uffff\1\143",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\151\30\uffff\1\147\12\uffff\1\146\7\uffff\1\150",
            "\1\153\53\uffff\1\152",
            "\1\155\53\uffff\1\154",
            "\1\157\53\uffff\1\156",
            "\1\161\53\uffff\1\160",
            "\1\163\53\uffff\1\162",
            "\1\165\53\uffff\1\164",
            "\1\167\53\uffff\1\166",
            "\1\171\53\uffff\1\170",
            "\1\172\36\uffff\1\u0083\24\uffff\1\173\1\174\1\175\1\176\1"+
            "\177\1\u0080\1\u0081\1\u0082\11\uffff\1\u0084",
            "\1\u0085",
            "\1\u0088\30\uffff\1\u0086\5\uffff\1\u0091\24\uffff\1\u0089"+
            "\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f\1\u0090\2\uffff"+
            "\1\u0087\6\uffff\1\u0092",
            "\1\u0095\1\uffff\6\14\34\uffff\1\14\6\uffff\1\14\3\uffff\1"+
            "\14\4\uffff\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a\1\u009b"+
            "\1\u009c\1\u009d\1\u009e\2\14\2\uffff\4\14\40\uffff\2\14\2\uffff"+
            "\5\14",
            "\1\u00b3\40\uffff\1\14\2\uffff\1\14\30\uffff\1\14\3\uffff\1"+
            "\14\53\uffff\1\14",
            "\1\14\1\uffff\6\14\43\uffff\1\14\1\uffff\1\u00b9\6\uffff\10"+
            "\14\1\uffff\2\14\2\uffff\4\14\40\uffff\2\14\2\uffff\5\14",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\27\uffff\1\u00d7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00dc",
            "",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\27\uffff\1\u00d7",
            "\1\u00e2",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\27\uffff\1\u00d7",
            "",
            "\1\u00e8",
            "",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\27\uffff\1\u00d7",
            "\1\u00ee",
            "",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\27\uffff\1\u00d7",
            "\1\u00f4",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\27\uffff\1\u00d7",
            "",
            "\1\u00fa",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\27\uffff\1\u00d7",
            "",
            "\1\u0100",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\27\uffff\1\u00d7",
            "",
            "\1\u0106",
            "\1\14\16\uffff\1\14\6\uffff\1\14\2\uffff\1\14\27\uffff\1\u00d7",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "2581:1: forControl returns [Declaration ret] options {k=3; } : (t1= enhancedForControl | (t2= forInit )? ';' (t3= expression )? ';' (t4= forUpdate )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA128_102 = input.LA(1);

                         
                        int index128_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_102);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA128_103 = input.LA(1);

                         
                        int index128_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_103);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA128_104 = input.LA(1);

                         
                        int index128_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_104);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA128_105 = input.LA(1);

                         
                        int index128_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_105);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA128_106 = input.LA(1);

                         
                        int index128_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_106);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA128_107 = input.LA(1);

                         
                        int index128_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_107);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA128_108 = input.LA(1);

                         
                        int index128_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_108);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA128_109 = input.LA(1);

                         
                        int index128_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_109);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA128_110 = input.LA(1);

                         
                        int index128_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_110);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA128_111 = input.LA(1);

                         
                        int index128_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_111);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA128_112 = input.LA(1);

                         
                        int index128_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_112);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA128_113 = input.LA(1);

                         
                        int index128_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_113);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA128_114 = input.LA(1);

                         
                        int index128_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_114);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA128_115 = input.LA(1);

                         
                        int index128_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_115);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA128_116 = input.LA(1);

                         
                        int index128_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_116);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA128_117 = input.LA(1);

                         
                        int index128_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_117);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA128_118 = input.LA(1);

                         
                        int index128_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_118);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA128_119 = input.LA(1);

                         
                        int index128_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_119);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA128_120 = input.LA(1);

                         
                        int index128_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_120);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA128_121 = input.LA(1);

                         
                        int index128_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_121);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA128_122 = input.LA(1);

                         
                        int index128_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_122);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA128_123 = input.LA(1);

                         
                        int index128_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_123);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA128_124 = input.LA(1);

                         
                        int index128_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_124);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA128_125 = input.LA(1);

                         
                        int index128_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_125);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA128_126 = input.LA(1);

                         
                        int index128_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_126);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA128_127 = input.LA(1);

                         
                        int index128_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_127);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA128_128 = input.LA(1);

                         
                        int index128_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_128);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA128_129 = input.LA(1);

                         
                        int index128_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_129);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA128_130 = input.LA(1);

                         
                        int index128_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_130);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA128_131 = input.LA(1);

                         
                        int index128_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_131);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA128_132 = input.LA(1);

                         
                        int index128_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_132);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA128_133 = input.LA(1);

                         
                        int index128_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_133);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA128_134 = input.LA(1);

                         
                        int index128_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_134);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA128_135 = input.LA(1);

                         
                        int index128_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_135);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA128_136 = input.LA(1);

                         
                        int index128_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_136);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA128_137 = input.LA(1);

                         
                        int index128_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_137);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA128_138 = input.LA(1);

                         
                        int index128_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_138);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA128_139 = input.LA(1);

                         
                        int index128_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_139);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA128_140 = input.LA(1);

                         
                        int index128_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_140);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA128_141 = input.LA(1);

                         
                        int index128_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_141);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA128_142 = input.LA(1);

                         
                        int index128_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_142);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA128_143 = input.LA(1);

                         
                        int index128_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_143);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA128_144 = input.LA(1);

                         
                        int index128_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_144);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA128_145 = input.LA(1);

                         
                        int index128_145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_145);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA128_146 = input.LA(1);

                         
                        int index128_146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_146);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA128_149 = input.LA(1);

                         
                        int index128_149 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_149);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA128_150 = input.LA(1);

                         
                        int index128_150 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_150);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA128_151 = input.LA(1);

                         
                        int index128_151 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_151);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA128_152 = input.LA(1);

                         
                        int index128_152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_152);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA128_153 = input.LA(1);

                         
                        int index128_153 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_153);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA128_154 = input.LA(1);

                         
                        int index128_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_154);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA128_155 = input.LA(1);

                         
                        int index128_155 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_155);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA128_156 = input.LA(1);

                         
                        int index128_156 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_156);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA128_157 = input.LA(1);

                         
                        int index128_157 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_157);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA128_158 = input.LA(1);

                         
                        int index128_158 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_158);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA128_179 = input.LA(1);

                         
                        int index128_179 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_179);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA128_185 = input.LA(1);

                         
                        int index128_185 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_185);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA128_220 = input.LA(1);

                         
                        int index128_220 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_220);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA128_226 = input.LA(1);

                         
                        int index128_226 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_226);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA128_232 = input.LA(1);

                         
                        int index128_232 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_232);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA128_238 = input.LA(1);

                         
                        int index128_238 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_238);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA128_244 = input.LA(1);

                         
                        int index128_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_244);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA128_250 = input.LA(1);

                         
                        int index128_250 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_250);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA128_256 = input.LA(1);

                         
                        int index128_256 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_256);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA128_262 = input.LA(1);

                         
                        int index128_262 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_Java()) ) {s = 215;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_262);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA125_eotS =
        "\41\uffff";
    static final String DFA125_eofS =
        "\41\uffff";
    static final String DFA125_minS =
        "\1\4\40\uffff";
    static final String DFA125_maxS =
        "\1\161\40\uffff";
    static final String DFA125_acceptS =
        "\1\uffff\1\1\36\uffff\1\2";
    static final String DFA125_specialS =
        "\41\uffff}>";
    static final String[] DFA125_transitionS = {
            "\1\1\1\uffff\6\1\16\uffff\1\40\10\uffff\1\1\13\uffff\1\1\10"+
            "\uffff\10\1\1\uffff\2\1\2\uffff\5\1\37\uffff\2\1\2\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "2589:11: (t2= forInit )?";
        }
    }
    static final String DFA126_eotS =
        "\37\uffff";
    static final String DFA126_eofS =
        "\37\uffff";
    static final String DFA126_minS =
        "\1\4\36\uffff";
    static final String DFA126_maxS =
        "\1\161\36\uffff";
    static final String DFA126_acceptS =
        "\1\uffff\1\1\34\uffff\1\2";
    static final String DFA126_specialS =
        "\37\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\1\1\uffff\6\1\16\uffff\1\36\24\uffff\1\1\10\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\4\1\40\uffff\2\1\2\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "2589:27: (t3= expression )?";
        }
    }
    static final String DFA127_eotS =
        "\37\uffff";
    static final String DFA127_eofS =
        "\37\uffff";
    static final String DFA127_minS =
        "\1\4\36\uffff";
    static final String DFA127_maxS =
        "\1\161\36\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\1\34\uffff\1\2";
    static final String DFA127_specialS =
        "\37\uffff}>";
    static final String[] DFA127_transitionS = {
            "\1\1\1\uffff\6\1\43\uffff\1\1\10\uffff\10\1\1\uffff\2\1\1\36"+
            "\1\uffff\4\1\40\uffff\2\1\2\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "2589:46: (t4= forUpdate )?";
        }
    }
    static final String DFA129_eotS =
        "\132\uffff";
    static final String DFA129_eofS =
        "\3\uffff\1\14\126\uffff";
    static final String DFA129_minS =
        "\1\4\2\uffff\11\4\24\uffff\2\0\10\uffff\1\0\27\uffff\1\0\2\uffff"+
        "\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0"+
        "\2\uffff\1\0\2\uffff";
    static final String DFA129_maxS =
        "\1\161\2\uffff\1\156\10\60\24\uffff\2\0\10\uffff\1\0\27\uffff\1"+
        "\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2"+
        "\uffff\1\0\2\uffff\1\0\2\uffff";
    static final String DFA129_acceptS =
        "\1\uffff\1\1\12\uffff\1\2\115\uffff";
    static final String DFA129_specialS =
        "\40\uffff\1\0\1\1\10\uffff\1\2\27\uffff\1\3\2\uffff\1\4\2\uffff"+
        "\1\5\2\uffff\1\6\2\uffff\1\7\2\uffff\1\10\2\uffff\1\11\2\uffff\1"+
        "\12\2\uffff}>";
    static final String[] DFA129_transitionS = {
            "\1\3\1\uffff\6\14\27\uffff\1\1\13\uffff\1\14\10\uffff\1\4\1"+
            "\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\2\14\2\uffff\4\14\1\1"+
            "\37\uffff\2\14\2\uffff\5\14",
            "",
            "",
            "\1\1\25\uffff\1\14\2\uffff\1\40\1\14\11\uffff\1\52\3\14\4\uffff"+
            "\1\41\2\uffff\1\14\14\uffff\1\14\1\uffff\1\14\27\uffff\25\14",
            "\1\1\30\uffff\1\14\22\uffff\1\102",
            "\1\1\30\uffff\1\14\22\uffff\1\105",
            "\1\1\30\uffff\1\14\22\uffff\1\110",
            "\1\1\30\uffff\1\14\22\uffff\1\113",
            "\1\1\30\uffff\1\14\22\uffff\1\116",
            "\1\1\30\uffff\1\14\22\uffff\1\121",
            "\1\1\30\uffff\1\14\22\uffff\1\124",
            "\1\1\30\uffff\1\14\22\uffff\1\127",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "2604:1: forInit returns [Declaration ret_decl] : (t1= localVariableDeclaration | t2= expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA129_32 = input.LA(1);

                         
                        int index129_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_32);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA129_33 = input.LA(1);

                         
                        int index129_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_33);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA129_42 = input.LA(1);

                         
                        int index129_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_42);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA129_66 = input.LA(1);

                         
                        int index129_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_66);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA129_69 = input.LA(1);

                         
                        int index129_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_69);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA129_72 = input.LA(1);

                         
                        int index129_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_72);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA129_75 = input.LA(1);

                         
                        int index129_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_75);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA129_78 = input.LA(1);

                         
                        int index129_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_78);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA129_81 = input.LA(1);

                         
                        int index129_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_81);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA129_84 = input.LA(1);

                         
                        int index129_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_84);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA129_87 = input.LA(1);

                         
                        int index129_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred186_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_87);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 129, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA131_eotS =
        "\u011b\uffff";
    static final String DFA131_eofS =
        "\1\14\u011a\uffff";
    static final String DFA131_minS =
        "\1\32\13\0\u010f\uffff";
    static final String DFA131_maxS =
        "\1\141\13\0\u010f\uffff";
    static final String DFA131_acceptS =
        "\14\uffff\1\2\43\uffff\1\1\u00ea\uffff";
    static final String DFA131_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\u010f\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\14\15\uffff\1\12\1\14\1\13\2\uffff\1\14\3\uffff\1\14\1\uffff"+
            "\1\1\17\uffff\1\14\7\uffff\1\14\16\uffff\1\2\1\3\1\4\1\5\1\6"+
            "\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "2701:9: (t2= assignmentOperator t3= expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_1 = input.LA(1);

                         
                        int index131_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA131_2 = input.LA(1);

                         
                        int index131_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA131_3 = input.LA(1);

                         
                        int index131_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA131_4 = input.LA(1);

                         
                        int index131_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA131_5 = input.LA(1);

                         
                        int index131_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA131_6 = input.LA(1);

                         
                        int index131_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA131_7 = input.LA(1);

                         
                        int index131_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA131_8 = input.LA(1);

                         
                        int index131_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA131_9 = input.LA(1);

                         
                        int index131_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA131_10 = input.LA(1);

                         
                        int index131_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA131_11 = input.LA(1);

                         
                        int index131_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 48;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA132_eotS =
        "\17\uffff";
    static final String DFA132_eofS =
        "\17\uffff";
    static final String DFA132_minS =
        "\1\50\12\uffff\1\52\1\0\2\uffff";
    static final String DFA132_maxS =
        "\1\141\12\uffff\1\52\1\0\2\uffff";
    static final String DFA132_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13"+
        "\1\14";
    static final String DFA132_specialS =
        "\1\0\13\uffff\1\1\2\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\12\1\uffff\1\13\10\uffff\1\1\46\uffff\1\2\1\3\1\4\1\5\1\6"+
            "\1\7\1\10\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "2711:1: assignmentOperator returns [Declaration ret] : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '<' '<' '<' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA132_0 = input.LA(1);

                         
                        int index132_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA132_0==51) ) {s = 1;}

                        else if ( (LA132_0==90) ) {s = 2;}

                        else if ( (LA132_0==91) ) {s = 3;}

                        else if ( (LA132_0==92) ) {s = 4;}

                        else if ( (LA132_0==93) ) {s = 5;}

                        else if ( (LA132_0==94) ) {s = 6;}

                        else if ( (LA132_0==95) ) {s = 7;}

                        else if ( (LA132_0==96) ) {s = 8;}

                        else if ( (LA132_0==97) ) {s = 9;}

                        else if ( (LA132_0==40) && (synpred198_Java())) {s = 10;}

                        else if ( (LA132_0==42) ) {s = 11;}

                         
                        input.seek(index132_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA132_12 = input.LA(1);

                         
                        int index132_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_Java()) ) {s = 13;}

                        else if ( (synpred200_Java()) ) {s = 14;}

                         
                        input.seek(index132_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA133_eotS =
        "\24\uffff";
    static final String DFA133_eofS =
        "\1\2\23\uffff";
    static final String DFA133_minS =
        "\1\32\23\uffff";
    static final String DFA133_maxS =
        "\1\141\23\uffff";
    static final String DFA133_acceptS =
        "\1\uffff\1\1\1\2\21\uffff";
    static final String DFA133_specialS =
        "\24\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\2\15\uffff\3\2\2\uffff\1\2\3\uffff\1\2\1\uffff\1\2\14\uffff"+
            "\1\1\2\uffff\1\2\7\uffff\1\2\16\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "2799:9: ( '?' t2= expression ':' t33= expression )?";
        }
    }
    static final String DFA134_eotS =
        "\25\uffff";
    static final String DFA134_eofS =
        "\1\1\24\uffff";
    static final String DFA134_minS =
        "\1\32\24\uffff";
    static final String DFA134_maxS =
        "\1\142\24\uffff";
    static final String DFA134_acceptS =
        "\1\uffff\1\2\22\uffff\1\1";
    static final String DFA134_specialS =
        "\25\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\1\15\uffff\3\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\14\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\10\1\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "()* loopback of 2819:9: ( '||' t2= conditionalAndExpression )*";
        }
    }
    static final String DFA135_eotS =
        "\26\uffff";
    static final String DFA135_eofS =
        "\1\1\25\uffff";
    static final String DFA135_minS =
        "\1\32\25\uffff";
    static final String DFA135_maxS =
        "\1\143\25\uffff";
    static final String DFA135_acceptS =
        "\1\uffff\1\2\23\uffff\1\1";
    static final String DFA135_specialS =
        "\26\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\1\15\uffff\3\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\14\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\11\1\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "()* loopback of 2837:9: ( '&&' t2= inclusiveOrExpression )*";
        }
    }
    static final String DFA136_eotS =
        "\27\uffff";
    static final String DFA136_eofS =
        "\1\1\26\uffff";
    static final String DFA136_minS =
        "\1\32\26\uffff";
    static final String DFA136_maxS =
        "\1\144\26\uffff";
    static final String DFA136_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA136_specialS =
        "\27\uffff}>";
    static final String[] DFA136_transitionS = {
            "\1\1\15\uffff\3\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\14\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\12\1\1\26",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "()* loopback of 2855:9: ( '|' t2= exclusiveOrExpression )*";
        }
    }
    static final String DFA137_eotS =
        "\30\uffff";
    static final String DFA137_eofS =
        "\1\1\27\uffff";
    static final String DFA137_minS =
        "\1\32\27\uffff";
    static final String DFA137_maxS =
        "\1\145\27\uffff";
    static final String DFA137_acceptS =
        "\1\uffff\1\2\25\uffff\1\1";
    static final String DFA137_specialS =
        "\30\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\1\15\uffff\3\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\14\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\13\1\1\27",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "()* loopback of 2873:9: ( '^' t2= andExpression )*";
        }
    }
    static final String DFA138_eotS =
        "\31\uffff";
    static final String DFA138_eofS =
        "\1\1\30\uffff";
    static final String DFA138_minS =
        "\1\32\30\uffff";
    static final String DFA138_maxS =
        "\1\145\30\uffff";
    static final String DFA138_acceptS =
        "\1\uffff\1\2\26\uffff\1\1";
    static final String DFA138_specialS =
        "\31\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\1\15\uffff\3\1\1\30\1\uffff\1\1\3\uffff\1\1\1\uffff\1\1\14"+
            "\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "()* loopback of 2891:9: ( '&' t2= equalityExpression )*";
        }
    }
    static final String DFA140_eotS =
        "\33\uffff";
    static final String DFA140_eofS =
        "\1\1\32\uffff";
    static final String DFA140_minS =
        "\1\32\32\uffff";
    static final String DFA140_maxS =
        "\1\147\32\uffff";
    static final String DFA140_acceptS =
        "\1\uffff\1\2\27\uffff\1\1\1\uffff";
    static final String DFA140_specialS =
        "\33\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\1\15\uffff\4\1\1\uffff\1\1\3\uffff\1\1\1\uffff\1\1\14\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\14\1\2\31",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "()* loopback of 2909:9: ( ( '==' | '!=' ) t2= instanceOfExpression )*";
        }
    }
    static final String DFA141_eotS =
        "\34\uffff";
    static final String DFA141_eofS =
        "\1\2\33\uffff";
    static final String DFA141_minS =
        "\1\32\33\uffff";
    static final String DFA141_maxS =
        "\1\150\33\uffff";
    static final String DFA141_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA141_specialS =
        "\34\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\2\15\uffff\4\2\1\uffff\1\2\3\uffff\1\2\1\uffff\1\2\14\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\16\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "2927:9: ( 'instanceof' t2= type )?";
        }
    }
    static final String DFA142_eotS =
        "\132\uffff";
    static final String DFA142_eofS =
        "\1\1\131\uffff";
    static final String DFA142_minS =
        "\1\32\27\uffff\2\4\100\uffff";
    static final String DFA142_maxS =
        "\1\150\27\uffff\2\161\100\uffff";
    static final String DFA142_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\74\uffff";
    static final String DFA142_specialS =
        "\132\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\1\15\uffff\1\30\1\1\1\31\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff"+
            "\1\1\14\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\17\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\1\uffff\6\35\34\uffff\1\1\6\uffff\1\35\3\uffff\1\35\4"+
            "\uffff\10\35\1\uffff\2\35\2\uffff\4\35\40\uffff\2\35\2\uffff"+
            "\5\35",
            "\1\35\1\uffff\6\35\36\uffff\1\1\4\uffff\1\35\3\uffff\1\35\4"+
            "\uffff\10\35\1\uffff\2\35\2\uffff\4\35\40\uffff\2\35\2\uffff"+
            "\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "()* loopback of 2945:9: (t2= relationalOp t3= shiftExpression )*";
        }
    }
    static final String DFA143_eotS =
        "\77\uffff";
    static final String DFA143_eofS =
        "\77\uffff";
    static final String DFA143_minS =
        "\1\50\2\4\74\uffff";
    static final String DFA143_maxS =
        "\1\52\2\161\74\uffff";
    static final String DFA143_acceptS =
        "\3\uffff\1\1\1\3\34\uffff\1\2\1\4\34\uffff";
    static final String DFA143_specialS =
        "\1\uffff\1\0\1\1\74\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\1\1\uffff\1\2",
            "\1\4\1\uffff\6\4\43\uffff\1\4\3\uffff\1\3\4\uffff\10\4\1\uffff"+
            "\2\4\2\uffff\4\4\40\uffff\2\4\2\uffff\5\4",
            "\1\42\1\uffff\6\42\43\uffff\1\42\3\uffff\1\41\4\uffff\10\42"+
            "\1\uffff\2\42\2\uffff\4\42\40\uffff\2\42\2\uffff\5\42",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "2955:1: relationalOp returns [Declaration ret] : ( ( '<' '=' )=>t1= '<' t2= '=' {...}? | ( '>' '=' )=>t1= '>' t2= '=' {...}? | '<' | '>' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_1 = input.LA(1);

                         
                        int index143_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA143_1==51) && (synpred211_Java())) {s = 3;}

                        else if ( (LA143_1==Identifier||(LA143_1>=FloatingPointLiteral && LA143_1<=DecimalLiteral)||LA143_1==47||(LA143_1>=56 && LA143_1<=63)||(LA143_1>=65 && LA143_1<=66)||(LA143_1>=69 && LA143_1<=72)||(LA143_1>=105 && LA143_1<=106)||(LA143_1>=109 && LA143_1<=113)) ) {s = 4;}

                         
                        input.seek(index143_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA143_2 = input.LA(1);

                         
                        int index143_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA143_2==51) && (synpred212_Java())) {s = 33;}

                        else if ( (LA143_2==Identifier||(LA143_2>=FloatingPointLiteral && LA143_2<=DecimalLiteral)||LA143_2==47||(LA143_2>=56 && LA143_2<=63)||(LA143_2>=65 && LA143_2<=66)||(LA143_2>=69 && LA143_2<=72)||(LA143_2>=105 && LA143_2<=106)||(LA143_2>=109 && LA143_2<=113)) ) {s = 34;}

                         
                        input.seek(index143_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA144_eotS =
        "\133\uffff";
    static final String DFA144_eofS =
        "\1\3\132\uffff";
    static final String DFA144_minS =
        "\1\32\2\4\32\uffff\1\0\36\uffff\1\0\36\uffff";
    static final String DFA144_maxS =
        "\1\150\2\161\32\uffff\1\0\36\uffff\1\0\36\uffff";
    static final String DFA144_acceptS =
        "\3\uffff\1\2\126\uffff\1\1";
    static final String DFA144_specialS =
        "\35\uffff\1\0\36\uffff\1\1\36\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\3\15\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\3\uffff\1\3\1\uffff"+
            "\1\3\14\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\17\3",
            "\1\3\1\uffff\6\3\34\uffff\1\35\6\uffff\1\3\3\uffff\1\3\4\uffff"+
            "\10\3\1\uffff\2\3\2\uffff\4\3\40\uffff\2\3\2\uffff\5\3",
            "\1\3\1\uffff\6\3\36\uffff\1\74\4\uffff\1\3\3\uffff\1\3\4\uffff"+
            "\10\3\1\uffff\2\3\2\uffff\4\3\40\uffff\2\3\2\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "()* loopback of 2992:9: (t2= shiftOp t3= additiveExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA144_29 = input.LA(1);

                         
                        int index144_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred214_Java()) ) {s = 90;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index144_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA144_60 = input.LA(1);

                         
                        int index144_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred214_Java()) ) {s = 90;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index144_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA147_eotS =
        "\36\uffff";
    static final String DFA147_eofS =
        "\1\1\35\uffff";
    static final String DFA147_minS =
        "\1\32\35\uffff";
    static final String DFA147_maxS =
        "\1\152\35\uffff";
    static final String DFA147_acceptS =
        "\1\uffff\1\2\32\uffff\1\1\1\uffff";
    static final String DFA147_specialS =
        "\36\uffff}>";
    static final String[] DFA147_transitionS = {
            "\1\1\15\uffff\4\1\1\uffff\1\1\3\uffff\1\1\1\uffff\1\1\14\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\17\1\2\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "()* loopback of 3038:9: ( ( '+' | '-' ) t2= multiplicativeExpression )*";
        }
    }
    static final String DFA149_eotS =
        "\41\uffff";
    static final String DFA149_eofS =
        "\1\1\40\uffff";
    static final String DFA149_minS =
        "\1\32\40\uffff";
    static final String DFA149_maxS =
        "\1\154\40\uffff";
    static final String DFA149_acceptS =
        "\1\uffff\1\2\34\uffff\1\1\2\uffff";
    static final String DFA149_specialS =
        "\41\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\1\3\uffff\1\36\11\uffff\4\1\1\uffff\1\1\3\uffff\1\1\1\uffff"+
            "\1\1\14\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\21\1\2\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "()* loopback of 3056:9: ( ( '*' | '/' | '%' ) t2= unaryExpression )*";
        }
    }
    static final String DFA150_eotS =
        "\36\uffff";
    static final String DFA150_eofS =
        "\36\uffff";
    static final String DFA150_minS =
        "\1\4\35\uffff";
    static final String DFA150_maxS =
        "\1\161\35\uffff";
    static final String DFA150_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\30\uffff";
    static final String DFA150_specialS =
        "\36\uffff}>";
    static final String[] DFA150_transitionS = {
            "\1\5\1\uffff\6\5\43\uffff\1\5\10\uffff\10\5\1\uffff\2\5\2\uffff"+
            "\4\5\40\uffff\1\1\1\2\2\uffff\1\3\1\4\3\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "3066:1: unaryExpression returns [Declaration ret] : ( '+' t1= unaryExpression | '-' t2= unaryExpression | '++' t3= unaryExpression | '--' t4= unaryExpression | t5= unaryExpressionNotPlusMinus );";
        }
    }
    static final String DFA153_eotS =
        "\70\uffff";
    static final String DFA153_eofS =
        "\70\uffff";
    static final String DFA153_minS =
        "\1\4\2\uffff\1\4\26\uffff\35\0\1\uffff";
    static final String DFA153_maxS =
        "\1\161\2\uffff\1\161\26\uffff\35\0\1\uffff";
    static final String DFA153_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\62\uffff\1\3";
    static final String DFA153_specialS =
        "\32\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\uffff}>";
    static final String[] DFA153_transitionS = {
            "\1\4\1\uffff\6\4\43\uffff\1\4\10\uffff\10\4\1\uffff\1\4\1\3"+
            "\2\uffff\4\4\46\uffff\1\1\1\2\1\4",
            "",
            "",
            "\1\55\1\uffff\1\46\1\47\1\50\1\43\1\44\1\45\43\uffff\1\66\10"+
            "\uffff\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\uffff\1\42"+
            "\1\40\2\uffff\1\41\1\53\1\51\1\52\40\uffff\1\32\1\33\2\uffff"+
            "\1\34\1\35\1\36\1\37\1\54",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "3100:1: unaryExpressionNotPlusMinus returns [Declaration ret] : ( '~' t1= unaryExpression | '!' t2= unaryExpression | t3= castExpression | t4= primary (t5= selector )* ( '++' | '--' )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA153_26 = input.LA(1);

                         
                        int index153_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_26);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA153_27 = input.LA(1);

                         
                        int index153_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_27);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA153_28 = input.LA(1);

                         
                        int index153_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_28);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA153_29 = input.LA(1);

                         
                        int index153_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_29);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA153_30 = input.LA(1);

                         
                        int index153_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_30);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA153_31 = input.LA(1);

                         
                        int index153_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_31);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA153_32 = input.LA(1);

                         
                        int index153_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_32);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA153_33 = input.LA(1);

                         
                        int index153_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_33);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA153_34 = input.LA(1);

                         
                        int index153_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_34);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA153_35 = input.LA(1);

                         
                        int index153_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_35);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA153_36 = input.LA(1);

                         
                        int index153_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_36);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA153_37 = input.LA(1);

                         
                        int index153_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_37);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA153_38 = input.LA(1);

                         
                        int index153_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_38);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA153_39 = input.LA(1);

                         
                        int index153_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_39);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA153_40 = input.LA(1);

                         
                        int index153_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_40);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA153_41 = input.LA(1);

                         
                        int index153_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_41);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA153_42 = input.LA(1);

                         
                        int index153_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_42);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA153_43 = input.LA(1);

                         
                        int index153_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_43);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA153_44 = input.LA(1);

                         
                        int index153_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_44);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA153_45 = input.LA(1);

                         
                        int index153_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_45);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA153_46 = input.LA(1);

                         
                        int index153_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_46);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA153_47 = input.LA(1);

                         
                        int index153_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_47);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA153_48 = input.LA(1);

                         
                        int index153_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_48);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA153_49 = input.LA(1);

                         
                        int index153_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_49);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA153_50 = input.LA(1);

                         
                        int index153_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_50);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA153_51 = input.LA(1);

                         
                        int index153_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_51);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA153_52 = input.LA(1);

                         
                        int index153_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_52);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA153_53 = input.LA(1);

                         
                        int index153_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_53);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA153_54 = input.LA(1);

                         
                        int index153_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_Java()) ) {s = 55;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index153_54);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA151_eotS =
        "\45\uffff";
    static final String DFA151_eofS =
        "\1\1\44\uffff";
    static final String DFA151_minS =
        "\1\32\44\uffff";
    static final String DFA151_maxS =
        "\1\156\44\uffff";
    static final String DFA151_acceptS =
        "\1\uffff\1\2\41\uffff\1\1\1\uffff";
    static final String DFA151_specialS =
        "\45\uffff}>";
    static final String[] DFA151_transitionS = {
            "\1\1\2\uffff\1\43\1\1\11\uffff\4\1\1\uffff\1\1\2\uffff\1\43"+
            "\1\1\1\uffff\1\1\14\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff"+
            "\25\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "()* loopback of 3127:9: (t5= selector )*";
        }
    }
    static final String DFA152_eotS =
        "\43\uffff";
    static final String DFA152_eofS =
        "\1\3\42\uffff";
    static final String DFA152_minS =
        "\1\32\42\uffff";
    static final String DFA152_maxS =
        "\1\156\42\uffff";
    static final String DFA152_acceptS =
        "\1\uffff\1\1\1\2\1\3\37\uffff";
    static final String DFA152_specialS =
        "\43\uffff}>";
    static final String[] DFA152_transitionS = {
            "\1\3\3\uffff\1\3\11\uffff\4\3\1\uffff\1\3\3\uffff\1\3\1\uffff"+
            "\1\3\14\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\23\3\1\1"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "3131:12: ( '++' | '--' )?";
        }
    }
    static final String DFA155_eotS =
        "\40\uffff";
    static final String DFA155_eofS =
        "\40\uffff";
    static final String DFA155_minS =
        "\1\102\1\4\1\uffff\10\0\25\uffff";
    static final String DFA155_maxS =
        "\1\102\1\161\1\uffff\10\0\25\uffff";
    static final String DFA155_acceptS =
        "\2\uffff\1\2\34\uffff\1\1";
    static final String DFA155_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\25\uffff}>";
    static final String[] DFA155_transitionS = {
            "\1\1",
            "\1\2\1\uffff\6\2\43\uffff\1\2\10\uffff\1\3\1\4\1\5\1\6\1\7"+
            "\1\10\1\11\1\12\1\uffff\2\2\2\uffff\4\2\40\uffff\2\2\2\uffff"+
            "\5\2",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "3140:1: castExpression returns [Declaration ret] : ( '(' t1= primitiveType ')' t2= unaryExpression | '(' (t3= type | t4= expression ) ')' t5= unaryExpressionNotPlusMinus );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_3 = input.LA(1);

                         
                        int index155_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA155_4 = input.LA(1);

                         
                        int index155_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA155_5 = input.LA(1);

                         
                        int index155_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA155_6 = input.LA(1);

                         
                        int index155_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA155_7 = input.LA(1);

                         
                        int index155_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA155_8 = input.LA(1);

                         
                        int index155_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA155_9 = input.LA(1);

                         
                        int index155_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA155_10 = input.LA(1);

                         
                        int index155_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 31;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index155_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA154_eotS =
        "\126\uffff";
    static final String DFA154_eofS =
        "\126\uffff";
    static final String DFA154_minS =
        "\1\4\1\0\10\35\64\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0"+
        "\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff";
    static final String DFA154_maxS =
        "\1\161\1\0\10\103\64\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1"+
        "\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff";
    static final String DFA154_acceptS =
        "\12\uffff\1\2\62\uffff\1\1\30\uffff";
    static final String DFA154_specialS =
        "\1\uffff\1\0\74\uffff\1\1\2\uffff\1\2\2\uffff\1\3\2\uffff\1\4\2"+
        "\uffff\1\5\2\uffff\1\6\2\uffff\1\7\2\uffff\1\10\2\uffff}>";
    static final String[] DFA154_transitionS = {
            "\1\1\1\uffff\6\12\43\uffff\1\12\10\uffff\1\2\1\3\1\4\1\5\1\6"+
            "\1\7\1\10\1\11\1\uffff\2\12\2\uffff\4\12\40\uffff\2\12\2\uffff"+
            "\5\12",
            "\1\uffff",
            "\1\12\22\uffff\1\76\22\uffff\1\75",
            "\1\12\22\uffff\1\101\22\uffff\1\75",
            "\1\12\22\uffff\1\104\22\uffff\1\75",
            "\1\12\22\uffff\1\107\22\uffff\1\75",
            "\1\12\22\uffff\1\112\22\uffff\1\75",
            "\1\12\22\uffff\1\115\22\uffff\1\75",
            "\1\12\22\uffff\1\120\22\uffff\1\75",
            "\1\12\22\uffff\1\123\22\uffff\1\75",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "3149:38: (t3= type | t4= expression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA154_1 = input.LA(1);

                         
                        int index154_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index154_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA154_62 = input.LA(1);

                         
                        int index154_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index154_62);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA154_65 = input.LA(1);

                         
                        int index154_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index154_65);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA154_68 = input.LA(1);

                         
                        int index154_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index154_68);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA154_71 = input.LA(1);

                         
                        int index154_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index154_71);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA154_74 = input.LA(1);

                         
                        int index154_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index154_74);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA154_77 = input.LA(1);

                         
                        int index154_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index154_77);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA154_80 = input.LA(1);

                         
                        int index154_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index154_80);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA154_83 = input.LA(1);

                         
                        int index154_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_Java()) ) {s = 61;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index154_83);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA161_eotS =
        "\30\uffff";
    static final String DFA161_eofS =
        "\30\uffff";
    static final String DFA161_minS =
        "\1\4\27\uffff";
    static final String DFA161_maxS =
        "\1\161\27\uffff";
    static final String DFA161_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\10\uffff\1\5\1\6\1\7\7\uffff\1\10";
    static final String DFA161_specialS =
        "\30\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\16\1\uffff\6\4\43\uffff\1\27\10\uffff\10\17\1\uffff\1\3\1"+
            "\1\2\uffff\1\2\3\4\50\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "3162:1: primary returns [Declaration ret] : (t1= parExpression | 'this' ( '.' t2= Identifier )* (t3= identifierSuffix )? | 'super' t4= superSuffix | t5= literal | 'new' t6= creator | t7= Identifier ( '.' t8= Identifier )* (t9= identifierSuffix )? | t10= primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );";
        }
    }
    static final String DFA156_eotS =
        "\55\uffff";
    static final String DFA156_eofS =
        "\1\1\54\uffff";
    static final String DFA156_minS =
        "\1\32\2\uffff\1\4\46\uffff\1\0\2\uffff";
    static final String DFA156_maxS =
        "\1\156\2\uffff\1\161\46\uffff\1\0\2\uffff";
    static final String DFA156_acceptS =
        "\1\uffff\1\2\52\uffff\1\1";
    static final String DFA156_specialS =
        "\52\uffff\1\0\2\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\1\2\uffff\1\3\1\1\11\uffff\4\1\1\uffff\1\1\2\uffff\2\1\1"+
            "\uffff\1\1\14\uffff\1\1\1\uffff\2\1\7\uffff\1\1\16\uffff\25"+
            "\1",
            "",
            "",
            "\1\52\40\uffff\1\1\2\uffff\1\1\30\uffff\1\1\3\uffff\1\1\53"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "()* loopback of 3175:9: ( '.' t2= Identifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_42 = input.LA(1);

                         
                        int index156_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index156_42);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA157_eotS =
        "\112\uffff";
    static final String DFA157_eofS =
        "\1\4\111\uffff";
    static final String DFA157_minS =
        "\1\32\1\4\1\uffff\1\4\43\uffff\35\0\1\uffff\3\0\1\uffff\1\0";
    static final String DFA157_maxS =
        "\1\156\1\161\1\uffff\1\161\43\uffff\35\0\1\uffff\3\0\1\uffff\1\0";
    static final String DFA157_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\105\uffff";
    static final String DFA157_specialS =
        "\47\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\uffff\1\35\1\36\1\37\1\uffff\1\40}>";
    static final String[] DFA157_transitionS = {
            "\1\4\2\uffff\1\3\1\4\11\uffff\4\4\1\uffff\1\4\2\uffff\1\1\1"+
            "\4\1\uffff\1\4\14\uffff\1\4\1\uffff\1\2\1\4\7\uffff\1\4\16\uffff"+
            "\25\4",
            "\1\72\1\uffff\1\63\1\64\1\65\1\60\1\61\1\62\43\uffff\1\103"+
            "\1\uffff\1\2\6\uffff\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1"+
            "\102\1\uffff\1\57\1\55\2\uffff\1\56\1\70\1\66\1\67\40\uffff"+
            "\1\47\1\50\2\uffff\1\51\1\52\1\53\1\54\1\71",
            "",
            "\1\4\40\uffff\1\2\2\uffff\1\111\30\uffff\1\106\3\uffff\1\105"+
            "\53\uffff\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff"
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "3182:9: (t3= identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_39 = input.LA(1);

                         
                        int index157_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_39);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA157_40 = input.LA(1);

                         
                        int index157_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_40);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA157_41 = input.LA(1);

                         
                        int index157_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA157_42 = input.LA(1);

                         
                        int index157_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA157_43 = input.LA(1);

                         
                        int index157_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_43);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA157_44 = input.LA(1);

                         
                        int index157_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA157_45 = input.LA(1);

                         
                        int index157_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_45);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA157_46 = input.LA(1);

                         
                        int index157_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA157_47 = input.LA(1);

                         
                        int index157_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_47);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA157_48 = input.LA(1);

                         
                        int index157_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_48);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA157_49 = input.LA(1);

                         
                        int index157_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_49);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA157_50 = input.LA(1);

                         
                        int index157_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_50);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA157_51 = input.LA(1);

                         
                        int index157_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_51);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA157_52 = input.LA(1);

                         
                        int index157_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_52);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA157_53 = input.LA(1);

                         
                        int index157_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_53);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA157_54 = input.LA(1);

                         
                        int index157_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_54);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA157_55 = input.LA(1);

                         
                        int index157_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_55);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA157_56 = input.LA(1);

                         
                        int index157_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_56);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA157_57 = input.LA(1);

                         
                        int index157_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_57);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA157_58 = input.LA(1);

                         
                        int index157_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_58);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA157_59 = input.LA(1);

                         
                        int index157_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_59);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA157_60 = input.LA(1);

                         
                        int index157_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_60);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA157_61 = input.LA(1);

                         
                        int index157_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_61);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA157_62 = input.LA(1);

                         
                        int index157_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_62);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA157_63 = input.LA(1);

                         
                        int index157_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_63);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA157_64 = input.LA(1);

                         
                        int index157_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_64);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA157_65 = input.LA(1);

                         
                        int index157_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_65);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA157_66 = input.LA(1);

                         
                        int index157_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_66);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA157_67 = input.LA(1);

                         
                        int index157_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_67);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA157_69 = input.LA(1);

                         
                        int index157_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_69);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA157_70 = input.LA(1);

                         
                        int index157_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_70);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA157_71 = input.LA(1);

                         
                        int index157_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_71);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA157_73 = input.LA(1);

                         
                        int index157_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_73);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA158_eotS =
        "\55\uffff";
    static final String DFA158_eofS =
        "\1\1\54\uffff";
    static final String DFA158_minS =
        "\1\32\2\uffff\1\4\46\uffff\1\0\2\uffff";
    static final String DFA158_maxS =
        "\1\156\2\uffff\1\161\46\uffff\1\0\2\uffff";
    static final String DFA158_acceptS =
        "\1\uffff\1\2\52\uffff\1\1";
    static final String DFA158_specialS =
        "\52\uffff\1\0\2\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\1\2\uffff\1\3\1\1\11\uffff\4\1\1\uffff\1\1\2\uffff\2\1\1"+
            "\uffff\1\1\14\uffff\1\1\1\uffff\2\1\7\uffff\1\1\16\uffff\25"+
            "\1",
            "",
            "",
            "\1\52\40\uffff\1\1\2\uffff\1\1\30\uffff\1\1\3\uffff\1\1\53"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "()* loopback of 3210:9: ( '.' t8= Identifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA158_42 = input.LA(1);

                         
                        int index158_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_42);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA159_eotS =
        "\112\uffff";
    static final String DFA159_eofS =
        "\1\4\111\uffff";
    static final String DFA159_minS =
        "\1\32\1\4\1\uffff\1\4\43\uffff\35\0\1\uffff\3\0\1\uffff\1\0";
    static final String DFA159_maxS =
        "\1\156\1\161\1\uffff\1\161\43\uffff\35\0\1\uffff\3\0\1\uffff\1\0";
    static final String DFA159_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\105\uffff";
    static final String DFA159_specialS =
        "\47\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\uffff\1\35\1\36\1\37\1\uffff\1\40}>";
    static final String[] DFA159_transitionS = {
            "\1\4\2\uffff\1\3\1\4\11\uffff\4\4\1\uffff\1\4\2\uffff\1\1\1"+
            "\4\1\uffff\1\4\14\uffff\1\4\1\uffff\1\2\1\4\7\uffff\1\4\16\uffff"+
            "\25\4",
            "\1\72\1\uffff\1\63\1\64\1\65\1\60\1\61\1\62\43\uffff\1\103"+
            "\1\uffff\1\2\6\uffff\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1"+
            "\102\1\uffff\1\57\1\55\2\uffff\1\56\1\70\1\66\1\67\40\uffff"+
            "\1\47\1\50\2\uffff\1\51\1\52\1\53\1\54\1\71",
            "",
            "\1\4\40\uffff\1\2\2\uffff\1\111\30\uffff\1\106\3\uffff\1\105"+
            "\53\uffff\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff"
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "3217:9: (t9= identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_39 = input.LA(1);

                         
                        int index159_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_39);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA159_40 = input.LA(1);

                         
                        int index159_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_40);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA159_41 = input.LA(1);

                         
                        int index159_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA159_42 = input.LA(1);

                         
                        int index159_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA159_43 = input.LA(1);

                         
                        int index159_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_43);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA159_44 = input.LA(1);

                         
                        int index159_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA159_45 = input.LA(1);

                         
                        int index159_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_45);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA159_46 = input.LA(1);

                         
                        int index159_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA159_47 = input.LA(1);

                         
                        int index159_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_47);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA159_48 = input.LA(1);

                         
                        int index159_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_48);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA159_49 = input.LA(1);

                         
                        int index159_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_49);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA159_50 = input.LA(1);

                         
                        int index159_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_50);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA159_51 = input.LA(1);

                         
                        int index159_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_51);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA159_52 = input.LA(1);

                         
                        int index159_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_52);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA159_53 = input.LA(1);

                         
                        int index159_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_53);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA159_54 = input.LA(1);

                         
                        int index159_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_54);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA159_55 = input.LA(1);

                         
                        int index159_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_55);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA159_56 = input.LA(1);

                         
                        int index159_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_56);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA159_57 = input.LA(1);

                         
                        int index159_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_57);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA159_58 = input.LA(1);

                         
                        int index159_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_58);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA159_59 = input.LA(1);

                         
                        int index159_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_59);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA159_60 = input.LA(1);

                         
                        int index159_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_60);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA159_61 = input.LA(1);

                         
                        int index159_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_61);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA159_62 = input.LA(1);

                         
                        int index159_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_62);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA159_63 = input.LA(1);

                         
                        int index159_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_63);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA159_64 = input.LA(1);

                         
                        int index159_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_64);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA159_65 = input.LA(1);

                         
                        int index159_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_65);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA159_66 = input.LA(1);

                         
                        int index159_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_66);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA159_67 = input.LA(1);

                         
                        int index159_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_67);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA159_69 = input.LA(1);

                         
                        int index159_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_69);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA159_70 = input.LA(1);

                         
                        int index159_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_70);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA159_71 = input.LA(1);

                         
                        int index159_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_71);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA159_73 = input.LA(1);

                         
                        int index159_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_73);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA164_eotS =
        "\47\uffff";
    static final String DFA164_eofS =
        "\47\uffff";
    static final String DFA164_minS =
        "\1\35\1\4\1\uffff\1\45\43\uffff";
    static final String DFA164_maxS =
        "\1\102\1\161\1\uffff\1\161\43\uffff";
    static final String DFA164_acceptS =
        "\2\uffff\1\3\1\uffff\1\1\1\2\34\uffff\1\4\1\6\1\7\1\10\1\5";
    static final String DFA164_specialS =
        "\47\uffff}>";
    static final String[] DFA164_transitionS = {
            "\1\3\22\uffff\1\1\21\uffff\1\2",
            "\1\5\1\uffff\6\5\43\uffff\1\5\1\uffff\1\4\6\uffff\10\5\1\uffff"+
            "\2\5\2\uffff\4\5\40\uffff\2\5\2\uffff\5\5",
            "",
            "\1\42\2\uffff\1\46\30\uffff\1\44\3\uffff\1\43\53\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "3246:1: identifierSuffix returns [Declaration ret] : ( ( '[' ']' )+ '.' 'class' | ( '[' t1= expression ']' )+ | t2= arguments | '.' 'class' | '.' t3= explicitGenericInvocation | '.' 'this' | '.' 'super' t4= arguments | '.' 'new' t5= innerCreator );";
        }
    }
    static final String DFA163_eotS =
        "\103\uffff";
    static final String DFA163_eofS =
        "\1\1\102\uffff";
    static final String DFA163_minS =
        "\1\32\1\uffff\1\4\42\uffff\35\0\1\uffff";
    static final String DFA163_maxS =
        "\1\156\1\uffff\1\161\42\uffff\35\0\1\uffff";
    static final String DFA163_acceptS =
        "\1\uffff\1\2\100\uffff\1\1";
    static final String DFA163_specialS =
        "\45\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\uffff}>";
    static final String[] DFA163_transitionS = {
            "\1\1\2\uffff\2\1\11\uffff\4\1\1\uffff\1\1\2\uffff\1\2\1\1\1"+
            "\uffff\1\1\14\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\25"+
            "\1",
            "",
            "\1\70\1\uffff\1\61\1\62\1\63\1\56\1\57\1\60\43\uffff\1\101"+
            "\10\uffff\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\uffff\1"+
            "\55\1\53\2\uffff\1\54\1\66\1\64\1\65\40\uffff\1\45\1\46\2\uffff"+
            "\1\47\1\50\1\51\1\52\1\67",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }
        public String getDescription() {
            return "()+ loopback of 3261:9: ( '[' t1= expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA163_37 = input.LA(1);

                         
                        int index163_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_37);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA163_38 = input.LA(1);

                         
                        int index163_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_38);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA163_39 = input.LA(1);

                         
                        int index163_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_39);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA163_40 = input.LA(1);

                         
                        int index163_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_40);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA163_41 = input.LA(1);

                         
                        int index163_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_41);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA163_42 = input.LA(1);

                         
                        int index163_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_42);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA163_43 = input.LA(1);

                         
                        int index163_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_43);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA163_44 = input.LA(1);

                         
                        int index163_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_44);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA163_45 = input.LA(1);

                         
                        int index163_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_45);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA163_46 = input.LA(1);

                         
                        int index163_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_46);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA163_47 = input.LA(1);

                         
                        int index163_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_47);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA163_48 = input.LA(1);

                         
                        int index163_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_48);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA163_49 = input.LA(1);

                         
                        int index163_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_49);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA163_50 = input.LA(1);

                         
                        int index163_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_50);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA163_51 = input.LA(1);

                         
                        int index163_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_51);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA163_52 = input.LA(1);

                         
                        int index163_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_52);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA163_53 = input.LA(1);

                         
                        int index163_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_53);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA163_54 = input.LA(1);

                         
                        int index163_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_54);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA163_55 = input.LA(1);

                         
                        int index163_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_55);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA163_56 = input.LA(1);

                         
                        int index163_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_56);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA163_57 = input.LA(1);

                         
                        int index163_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_57);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA163_58 = input.LA(1);

                         
                        int index163_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_58);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA163_59 = input.LA(1);

                         
                        int index163_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_59);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA163_60 = input.LA(1);

                         
                        int index163_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_60);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA163_61 = input.LA(1);

                         
                        int index163_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_61);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA163_62 = input.LA(1);

                         
                        int index163_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_62);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA163_63 = input.LA(1);

                         
                        int index163_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_63);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA163_64 = input.LA(1);

                         
                        int index163_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_64);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA163_65 = input.LA(1);

                         
                        int index163_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_65);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA166_eotS =
        "\13\uffff";
    static final String DFA166_eofS =
        "\13\uffff";
    static final String DFA166_minS =
        "\1\4\12\uffff";
    static final String DFA166_maxS =
        "\1\77\12\uffff";
    static final String DFA166_acceptS =
        "\1\uffff\1\1\1\2\10\uffff";
    static final String DFA166_specialS =
        "\13\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\2\43\uffff\1\1\17\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "3314:1: creator returns [Declaration ret] : (t1= nonWildcardTypeArguments t2= createdName t3= classCreatorRest | t3= createdName (t4= arrayCreatorRest | t5= classCreatorRest ) );";
        }
    }
    static final String DFA167_eotS =
        "\12\uffff";
    static final String DFA167_eofS =
        "\12\uffff";
    static final String DFA167_minS =
        "\1\4\11\uffff";
    static final String DFA167_maxS =
        "\1\77\11\uffff";
    static final String DFA167_acceptS =
        "\1\uffff\1\1\1\2\7\uffff";
    static final String DFA167_specialS =
        "\12\uffff}>";
    static final String[] DFA167_transitionS = {
            "\1\1\63\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "3371:1: createdName returns [Declaration ret] : (t1= classOrInterfaceType | t2= primitiveType );";
        }
    }
    static final String DFA172_eotS =
        "\37\uffff";
    static final String DFA172_eofS =
        "\37\uffff";
    static final String DFA172_minS =
        "\1\4\36\uffff";
    static final String DFA172_maxS =
        "\1\161\36\uffff";
    static final String DFA172_acceptS =
        "\1\uffff\1\1\1\2\34\uffff";
    static final String DFA172_specialS =
        "\37\uffff}>";
    static final String[] DFA172_transitionS = {
            "\1\2\1\uffff\6\2\43\uffff\1\2\1\uffff\1\1\6\uffff\10\2\1\uffff"+
            "\2\2\2\uffff\4\2\40\uffff\2\2\2\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA172_eot = DFA.unpackEncodedString(DFA172_eotS);
    static final short[] DFA172_eof = DFA.unpackEncodedString(DFA172_eofS);
    static final char[] DFA172_min = DFA.unpackEncodedStringToUnsignedChars(DFA172_minS);
    static final char[] DFA172_max = DFA.unpackEncodedStringToUnsignedChars(DFA172_maxS);
    static final short[] DFA172_accept = DFA.unpackEncodedString(DFA172_acceptS);
    static final short[] DFA172_special = DFA.unpackEncodedString(DFA172_specialS);
    static final short[][] DFA172_transition;

    static {
        int numStates = DFA172_transitionS.length;
        DFA172_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA172_transition[i] = DFA.unpackEncodedString(DFA172_transitionS[i]);
        }
    }

    class DFA172 extends DFA {

        public DFA172(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 172;
            this.eot = DFA172_eot;
            this.eof = DFA172_eof;
            this.min = DFA172_min;
            this.max = DFA172_max;
            this.accept = DFA172_accept;
            this.special = DFA172_special;
            this.transition = DFA172_transition;
        }
        public String getDescription() {
            return "3404:9: ( ']' ( '[' ']' )* t1= arrayInitializer | t2= expression ']' ( '[' t3= expression ']' )* ( '[' ']' )* )";
        }
    }
    static final String DFA170_eotS =
        "\104\uffff";
    static final String DFA170_eofS =
        "\1\2\103\uffff";
    static final String DFA170_minS =
        "\1\32\1\4\44\uffff\35\0\1\uffff";
    static final String DFA170_maxS =
        "\1\156\1\161\44\uffff\35\0\1\uffff";
    static final String DFA170_acceptS =
        "\2\uffff\1\2\100\uffff\1\1";
    static final String DFA170_specialS =
        "\46\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\4\2\1\uffff\1\2\2\uffff\1\1\1\2\1"+
            "\uffff\1\2\14\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\25"+
            "\2",
            "\1\71\1\uffff\1\62\1\63\1\64\1\57\1\60\1\61\43\uffff\1\102"+
            "\1\uffff\1\2\6\uffff\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
            "\1\uffff\1\56\1\54\2\uffff\1\55\1\67\1\65\1\66\40\uffff\1\46"+
            "\1\47\2\uffff\1\50\1\51\1\52\1\53\1\70",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "()* loopback of 3422:13: ( '[' t3= expression ']' )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_38 = input.LA(1);

                         
                        int index170_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_38);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA170_39 = input.LA(1);

                         
                        int index170_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_39);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA170_40 = input.LA(1);

                         
                        int index170_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_40);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA170_41 = input.LA(1);

                         
                        int index170_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_41);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA170_42 = input.LA(1);

                         
                        int index170_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_42);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA170_43 = input.LA(1);

                         
                        int index170_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_43);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA170_44 = input.LA(1);

                         
                        int index170_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_44);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA170_45 = input.LA(1);

                         
                        int index170_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_45);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA170_46 = input.LA(1);

                         
                        int index170_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_46);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA170_47 = input.LA(1);

                         
                        int index170_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_47);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA170_48 = input.LA(1);

                         
                        int index170_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_48);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA170_49 = input.LA(1);

                         
                        int index170_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_49);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA170_50 = input.LA(1);

                         
                        int index170_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_50);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA170_51 = input.LA(1);

                         
                        int index170_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_51);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA170_52 = input.LA(1);

                         
                        int index170_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_52);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA170_53 = input.LA(1);

                         
                        int index170_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_53);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA170_54 = input.LA(1);

                         
                        int index170_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_54);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA170_55 = input.LA(1);

                         
                        int index170_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_55);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA170_56 = input.LA(1);

                         
                        int index170_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_56);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA170_57 = input.LA(1);

                         
                        int index170_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_57);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA170_58 = input.LA(1);

                         
                        int index170_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_58);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA170_59 = input.LA(1);

                         
                        int index170_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_59);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA170_60 = input.LA(1);

                         
                        int index170_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_60);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA170_61 = input.LA(1);

                         
                        int index170_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_61);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA170_62 = input.LA(1);

                         
                        int index170_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_62);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA170_63 = input.LA(1);

                         
                        int index170_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_63);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA170_64 = input.LA(1);

                         
                        int index170_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_64);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA170_65 = input.LA(1);

                         
                        int index170_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_65);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA170_66 = input.LA(1);

                         
                        int index170_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA171_eotS =
        "\103\uffff";
    static final String DFA171_eofS =
        "\1\1\102\uffff";
    static final String DFA171_minS =
        "\1\32\1\uffff\1\4\100\uffff";
    static final String DFA171_maxS =
        "\1\156\1\uffff\1\161\100\uffff";
    static final String DFA171_acceptS =
        "\1\uffff\1\2\43\uffff\1\1\35\uffff";
    static final String DFA171_specialS =
        "\103\uffff}>";
    static final String[] DFA171_transitionS = {
            "\1\1\2\uffff\2\1\11\uffff\4\1\1\uffff\1\1\2\uffff\1\2\1\1\1"+
            "\uffff\1\1\14\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\25"+
            "\1",
            "",
            "\1\1\1\uffff\6\1\43\uffff\1\1\1\uffff\1\45\6\uffff\10\1\1\uffff"+
            "\2\1\2\uffff\4\1\40\uffff\2\1\2\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA171_eot = DFA.unpackEncodedString(DFA171_eotS);
    static final short[] DFA171_eof = DFA.unpackEncodedString(DFA171_eofS);
    static final char[] DFA171_min = DFA.unpackEncodedStringToUnsignedChars(DFA171_minS);
    static final char[] DFA171_max = DFA.unpackEncodedStringToUnsignedChars(DFA171_maxS);
    static final short[] DFA171_accept = DFA.unpackEncodedString(DFA171_acceptS);
    static final short[] DFA171_special = DFA.unpackEncodedString(DFA171_specialS);
    static final short[][] DFA171_transition;

    static {
        int numStates = DFA171_transitionS.length;
        DFA171_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA171_transition[i] = DFA.unpackEncodedString(DFA171_transitionS[i]);
        }
    }

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = DFA171_eot;
            this.eof = DFA171_eof;
            this.min = DFA171_min;
            this.max = DFA171_max;
            this.accept = DFA171_accept;
            this.special = DFA171_special;
            this.transition = DFA171_transition;
        }
        public String getDescription() {
            return "()* loopback of 3428:16: ( '[' ']' )*";
        }
    }
    static final String DFA173_eotS =
        "\46\uffff";
    static final String DFA173_eofS =
        "\1\2\45\uffff";
    static final String DFA173_minS =
        "\1\32\45\uffff";
    static final String DFA173_maxS =
        "\1\156\45\uffff";
    static final String DFA173_acceptS =
        "\1\uffff\1\1\1\2\43\uffff";
    static final String DFA173_specialS =
        "\46\uffff}>";
    static final String[] DFA173_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\4\2\1\1\1\2\2\uffff\2\2\1\uffff\1"+
            "\2\14\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\25\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA173_eot = DFA.unpackEncodedString(DFA173_eotS);
    static final short[] DFA173_eof = DFA.unpackEncodedString(DFA173_eofS);
    static final char[] DFA173_min = DFA.unpackEncodedStringToUnsignedChars(DFA173_minS);
    static final char[] DFA173_max = DFA.unpackEncodedStringToUnsignedChars(DFA173_maxS);
    static final short[] DFA173_accept = DFA.unpackEncodedString(DFA173_acceptS);
    static final short[] DFA173_special = DFA.unpackEncodedString(DFA173_specialS);
    static final short[][] DFA173_transition;

    static {
        int numStates = DFA173_transitionS.length;
        DFA173_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA173_transition[i] = DFA.unpackEncodedString(DFA173_transitionS[i]);
        }
    }

    class DFA173 extends DFA {

        public DFA173(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = DFA173_eot;
            this.eof = DFA173_eof;
            this.min = DFA173_min;
            this.max = DFA173_max;
            this.accept = DFA173_accept;
            this.special = DFA173_special;
            this.transition = DFA173_transition;
        }
        public String getDescription() {
            return "3447:9: (t2= classBody )?";
        }
    }
    static final String DFA174_eotS =
        "\46\uffff";
    static final String DFA174_eofS =
        "\1\2\45\uffff";
    static final String DFA174_minS =
        "\1\32\45\uffff";
    static final String DFA174_maxS =
        "\1\156\45\uffff";
    static final String DFA174_acceptS =
        "\1\uffff\1\1\1\2\43\uffff";
    static final String DFA174_specialS =
        "\46\uffff}>";
    static final String[] DFA174_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\4\2\1\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\1\2\14\uffff\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\25\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA174_eot = DFA.unpackEncodedString(DFA174_eotS);
    static final short[] DFA174_eof = DFA.unpackEncodedString(DFA174_eofS);
    static final char[] DFA174_min = DFA.unpackEncodedStringToUnsignedChars(DFA174_minS);
    static final char[] DFA174_max = DFA.unpackEncodedStringToUnsignedChars(DFA174_maxS);
    static final short[] DFA174_accept = DFA.unpackEncodedString(DFA174_acceptS);
    static final short[] DFA174_special = DFA.unpackEncodedString(DFA174_specialS);
    static final short[][] DFA174_transition;

    static {
        int numStates = DFA174_transitionS.length;
        DFA174_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA174_transition[i] = DFA.unpackEncodedString(DFA174_transitionS[i]);
        }
    }

    class DFA174 extends DFA {

        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = DFA174_eot;
            this.eof = DFA174_eof;
            this.min = DFA174_min;
            this.max = DFA174_max;
            this.accept = DFA174_accept;
            this.special = DFA174_special;
            this.transition = DFA174_transition;
        }
        public String getDescription() {
            return "3491:9: (t2= arguments )?";
        }
    }
    static final String DFA176_eotS =
        "\46\uffff";
    static final String DFA176_eofS =
        "\1\2\45\uffff";
    static final String DFA176_minS =
        "\1\32\45\uffff";
    static final String DFA176_maxS =
        "\1\156\45\uffff";
    static final String DFA176_acceptS =
        "\1\uffff\1\1\1\2\43\uffff";
    static final String DFA176_specialS =
        "\46\uffff}>";
    static final String[] DFA176_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\4\2\1\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\1\2\14\uffff\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\25\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
    static final short[][] DFA176_transition;

    static {
        int numStates = DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
        }
    }

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "3537:29: (t3= arguments )?";
        }
    }
    static final String DFA178_eotS =
        "\37\uffff";
    static final String DFA178_eofS =
        "\37\uffff";
    static final String DFA178_minS =
        "\1\4\36\uffff";
    static final String DFA178_maxS =
        "\1\161\36\uffff";
    static final String DFA178_acceptS =
        "\1\uffff\1\1\34\uffff\1\2";
    static final String DFA178_specialS =
        "\37\uffff}>";
    static final String[] DFA178_transitionS = {
            "\1\1\1\uffff\6\1\43\uffff\1\1\10\uffff\10\1\1\uffff\2\1\1\36"+
            "\1\uffff\4\1\40\uffff\2\1\2\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_specialS);
    static final short[][] DFA178_transition;

    static {
        int numStates = DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_transitionS[i]);
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "3555:9: (t1= expressionList )?";
        }
    }
    static final String DFA184_eotS =
        "\15\uffff";
    static final String DFA184_eofS =
        "\15\uffff";
    static final String DFA184_minS =
        "\1\5\14\uffff";
    static final String DFA184_maxS =
        "\1\111\14\uffff";
    static final String DFA184_acceptS =
        "\1\uffff\1\1\1\2\12\uffff";
    static final String DFA184_specialS =
        "\15\uffff}>";
    static final String[] DFA184_transitionS = {
            "\1\2\23\uffff\1\1\2\uffff\1\2\2\uffff\7\2\10\uffff\1\2\32\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "534:9: (t2= packageDeclaration (t3= importDeclaration )* (t4= typeDeclaration )* | t5= classOrInterfaceDeclaration (t6= typeDeclaration )* )";
        }
    }
    static final String DFA181_eotS =
        "\17\uffff";
    static final String DFA181_eofS =
        "\1\1\16\uffff";
    static final String DFA181_minS =
        "\1\5\16\uffff";
    static final String DFA181_maxS =
        "\1\111\16\uffff";
    static final String DFA181_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA181_specialS =
        "\17\uffff}>";
    static final String[] DFA181_transitionS = {
            "\1\1\24\uffff\1\1\1\16\1\1\2\uffff\7\1\10\uffff\1\1\32\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_eotS);
    static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_eofS);
    static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_minS);
    static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_maxS);
    static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_acceptS);
    static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_specialS);
    static final short[][] DFA181_transition;

    static {
        int numStates = DFA181_transitionS.length;
        DFA181_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA181_transition[i] = DFA.unpackEncodedString(DFA181_transitionS[i]);
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = DFA181_eot;
            this.eof = DFA181_eof;
            this.min = DFA181_min;
            this.max = DFA181_max;
            this.accept = DFA181_accept;
            this.special = DFA181_special;
            this.transition = DFA181_transition;
        }
        public String getDescription() {
            return "()* loopback of 538:13: (t3= importDeclaration )*";
        }
    }
    static final String DFA182_eotS =
        "\16\uffff";
    static final String DFA182_eofS =
        "\1\1\15\uffff";
    static final String DFA182_minS =
        "\1\5\15\uffff";
    static final String DFA182_maxS =
        "\1\111\15\uffff";
    static final String DFA182_acceptS =
        "\1\uffff\1\2\1\1\13\uffff";
    static final String DFA182_specialS =
        "\16\uffff}>";
    static final String[] DFA182_transitionS = {
            "\1\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\10\uffff\1\2\32\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_eotS);
    static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_eofS);
    static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS);
    static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS);
    static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS);
    static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_specialS);
    static final short[][] DFA182_transition;

    static {
        int numStates = DFA182_transitionS.length;
        DFA182_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA182_transition[i] = DFA.unpackEncodedString(DFA182_transitionS[i]);
        }
    }

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = DFA182_eot;
            this.eof = DFA182_eof;
            this.min = DFA182_min;
            this.max = DFA182_max;
            this.accept = DFA182_accept;
            this.special = DFA182_special;
            this.transition = DFA182_transition;
        }
        public String getDescription() {
            return "()* loopback of 543:13: (t4= typeDeclaration )*";
        }
    }
    static final String DFA183_eotS =
        "\16\uffff";
    static final String DFA183_eofS =
        "\1\1\15\uffff";
    static final String DFA183_minS =
        "\1\5\15\uffff";
    static final String DFA183_maxS =
        "\1\111\15\uffff";
    static final String DFA183_acceptS =
        "\1\uffff\1\2\1\1\13\uffff";
    static final String DFA183_specialS =
        "\16\uffff}>";
    static final String[] DFA183_transitionS = {
            "\1\2\24\uffff\1\2\1\uffff\1\2\2\uffff\7\2\10\uffff\1\2\32\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA183_eot = DFA.unpackEncodedString(DFA183_eotS);
    static final short[] DFA183_eof = DFA.unpackEncodedString(DFA183_eofS);
    static final char[] DFA183_min = DFA.unpackEncodedStringToUnsignedChars(DFA183_minS);
    static final char[] DFA183_max = DFA.unpackEncodedStringToUnsignedChars(DFA183_maxS);
    static final short[] DFA183_accept = DFA.unpackEncodedString(DFA183_acceptS);
    static final short[] DFA183_special = DFA.unpackEncodedString(DFA183_specialS);
    static final short[][] DFA183_transition;

    static {
        int numStates = DFA183_transitionS.length;
        DFA183_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA183_transition[i] = DFA.unpackEncodedString(DFA183_transitionS[i]);
        }
    }

    class DFA183 extends DFA {

        public DFA183(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 183;
            this.eot = DFA183_eot;
            this.eof = DFA183_eof;
            this.min = DFA183_min;
            this.max = DFA183_max;
            this.accept = DFA183_accept;
            this.special = DFA183_special;
            this.transition = DFA183_transition;
        }
        public String getDescription() {
            return "()* loopback of 552:13: (t6= typeDeclaration )*";
        }
    }
 

    public static final BitSet FOLLOW_annotations_in_translationUnit119 = new BitSet(new long[]{0x0000403F92000020L,0x0000000000000200L});
    public static final BitSet FOLLOW_packageDeclaration_in_translationUnit153 = new BitSet(new long[]{0x0000403F9E000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_importDeclaration_in_translationUnit188 = new BitSet(new long[]{0x0000403F9E000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_typeDeclaration_in_translationUnit238 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_translationUnit287 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_typeDeclaration_in_translationUnit322 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_packageDeclaration_in_translationUnit378 = new BitSet(new long[]{0x0000403F9E000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_importDeclaration_in_translationUnit420 = new BitSet(new long[]{0x0000403F9E000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_typeDeclaration_in_translationUnit462 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_25_in_packageDeclaration525 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration527 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_packageDeclaration529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_importDeclaration577 = new BitSet(new long[]{0x0000000010000010L});
    public static final BitSet FOLLOW_28_in_importDeclaration603 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_importDeclaration640 = new BitSet(new long[]{0x0000000024000000L});
    public static final BitSet FOLLOW_29_in_importDeclaration665 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_importDeclaration667 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_importDeclaration694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_typeDeclaration768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceModifiers_in_classOrInterfaceDeclaration818 = new BitSet(new long[]{0x0000403F92000020L,0x0000000000000200L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceModifier_in_classOrInterfaceModifiers921 = new BitSet(new long[]{0x0000001F90000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_annotation_in_classOrInterfaceModifier997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_classOrInterfaceModifier1024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_classOrInterfaceModifier1053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_classOrInterfaceModifier1079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_classOrInterfaceModifier1107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_classOrInterfaceModifier1134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_classOrInterfaceModifier1163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_classOrInterfaceModifier1193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifiers1248 = new BitSet(new long[]{0x00F0001F90000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_classDeclaration1310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classDeclaration1336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_normalClassDeclaration1385 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_normalClassDeclaration1387 = new BitSet(new long[]{0x000011C000000000L});
    public static final BitSet FOLLOW_typeParameters_in_normalClassDeclaration1415 = new BitSet(new long[]{0x000011C000000000L});
    public static final BitSet FOLLOW_38_in_normalClassDeclaration1451 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_type_in_normalClassDeclaration1455 = new BitSet(new long[]{0x000011C000000000L});
    public static final BitSet FOLLOW_39_in_normalClassDeclaration1491 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_typeList_in_normalClassDeclaration1495 = new BitSet(new long[]{0x000011C000000000L});
    public static final BitSet FOLLOW_classBody_in_normalClassDeclaration1532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_typeParameters1579 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters1583 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_41_in_typeParameters1608 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters1612 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_42_in_typeParameters1639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeParameter1686 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_38_in_typeParameter1712 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_typeBound_in_typeParameter1716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeBound1776 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_typeBound1801 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_type_in_typeBound1805 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration1865 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_enumDeclaration1867 = new BitSet(new long[]{0x0000108000000000L});
    public static final BitSet FOLLOW_39_in_enumDeclaration1892 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration1896 = new BitSet(new long[]{0x0000108000000000L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration1925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_enumBody1972 = new BitSet(new long[]{0x0000220004000010L,0x0000000000000200L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody1999 = new BitSet(new long[]{0x0000220004000000L});
    public static final BitSet FOLLOW_41_in_enumBody2036 = new BitSet(new long[]{0x0000200004000000L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody2074 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_45_in_enumBody2109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants2158 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_enumConstants2183 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000200L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants2187 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_annotations_in_enumConstant2248 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_enumConstant2275 = new BitSet(new long[]{0x000011C000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_enumConstant2279 = new BitSet(new long[]{0x000011C000000002L});
    public static final BitSet FOLLOW_classBody_in_enumConstant2284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_enumBodyDeclarations2332 = new BitSet(new long[]{0x00F0101F94000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations2360 = new BitSet(new long[]{0x00F0101F94000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration2420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration2446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_normalInterfaceDeclaration2493 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_normalInterfaceDeclaration2495 = new BitSet(new long[]{0x0000114000000000L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration2499 = new BitSet(new long[]{0x0000114000000000L});
    public static final BitSet FOLLOW_38_in_normalInterfaceDeclaration2503 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration2507 = new BitSet(new long[]{0x0000114000000000L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration2513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList2562 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_typeList2587 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_type_in_typeList2591 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_44_in_classBody2649 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody2655 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_45_in_classBody2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_interfaceBody2738 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody2743 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_45_in_interfaceBody2774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_classBodyDeclaration2825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_classBodyDeclaration2852 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration2860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_classBodyDeclaration2886 = new BitSet(new long[]{0xFF00C13F92000030L,0x0000000000000200L});
    public static final BitSet FOLLOW_memberDecl_in_classBodyDeclaration2890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_memberDecl2939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberDeclaration_in_memberDecl2965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_memberDecl2989 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_memberDecl2991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_memberDecl2995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_memberDecl3019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_memberDecl3023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_memberDecl3049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_memberDecl3075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_memberDeclaration3124 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_methodDeclaration_in_memberDeclaration3129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_memberDeclaration3135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl3190 = new BitSet(new long[]{0xFF00800000000010L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl3194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest3244 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_47_in_genericMethodOrConstructorRest3248 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest3253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest3257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest3283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest3287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_methodDeclaration3334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration3338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration3387 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_fieldDeclaration3389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_interfaceBodyDeclaration3438 = new BitSet(new long[]{0xFF00C13F92000030L,0x0000000000000200L});
    public static final BitSet FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration3442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_interfaceBodyDeclaration3466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl3515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl3541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_interfaceMemberDecl3565 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceMemberDecl3567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl3571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceMemberDecl3597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceMemberDecl3623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceMethodOrFieldDecl3672 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceMethodOrFieldDecl3674 = new BitSet(new long[]{0x0009000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl3678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest3727 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_interfaceMethodOrFieldRest3729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest3755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest3804 = new BitSet(new long[]{0x0005100014000000L});
    public static final BitSet FOLLOW_48_in_methodDeclaratorRest3829 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_methodDeclaratorRest3831 = new BitSet(new long[]{0x0005100014000000L});
    public static final BitSet FOLLOW_50_in_methodDeclaratorRest3867 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_methodDeclaratorRest3871 = new BitSet(new long[]{0x0000100014000000L});
    public static final BitSet FOLLOW_methodBody_in_methodDeclaratorRest3912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_methodDeclaratorRest3940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest3999 = new BitSet(new long[]{0x0004100014000000L});
    public static final BitSet FOLLOW_50_in_voidMethodDeclaratorRest4024 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest4028 = new BitSet(new long[]{0x0000100014000000L});
    public static final BitSet FOLLOW_methodBody_in_voidMethodDeclaratorRest4069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_voidMethodDeclaratorRest4097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest4142 = new BitSet(new long[]{0x0005000004000000L});
    public static final BitSet FOLLOW_48_in_interfaceMethodDeclaratorRest4167 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_interfaceMethodDeclaratorRest4169 = new BitSet(new long[]{0x0005000004000000L});
    public static final BitSet FOLLOW_50_in_interfaceMethodDeclaratorRest4205 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest4209 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_interfaceMethodDeclaratorRest4236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl4286 = new BitSet(new long[]{0xFF00800000000010L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl4291 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_47_in_interfaceGenericMethodDecl4295 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl4298 = new BitSet(new long[]{0x0009000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl4302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest4351 = new BitSet(new long[]{0x0004000004000000L});
    public static final BitSet FOLLOW_50_in_voidInterfaceMethodDeclaratorRest4354 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest4358 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_voidInterfaceMethodDeclaratorRest4362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest4412 = new BitSet(new long[]{0x0004100000000000L});
    public static final BitSet FOLLOW_50_in_constructorDeclaratorRest4415 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_constructorDeclaratorRest4419 = new BitSet(new long[]{0x0004100000000000L});
    public static final BitSet FOLLOW_constructorBody_in_constructorDeclaratorRest4425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator4472 = new BitSet(new long[]{0x0009000000000000L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclarator4476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators4525 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_variableDeclarators4536 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators4540 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_variableDeclarator4625 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_51_in_variableDeclarator4650 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclarator4654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest4716 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_constantDeclaratorsRest4719 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclaratorsRest4723 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_48_in_constantDeclaratorRest4798 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_constantDeclaratorRest4800 = new BitSet(new long[]{0x0009000000000000L});
    public static final BitSet FOLLOW_51_in_constantDeclaratorRest4827 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclaratorRest4831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaratorId4880 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_variableDeclaratorId4891 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_variableDeclaratorId4893 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer4970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer4996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_arrayInitializer5045 = new BitSet(new long[]{0xFF00B00000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer5050 = new BitSet(new long[]{0x0000220000000000L});
    public static final BitSet FOLLOW_41_in_arrayInitializer5062 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer5066 = new BitSet(new long[]{0x0000220000000000L});
    public static final BitSet FOLLOW_41_in_arrayInitializer5098 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_45_in_arrayInitializer5132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_modifier5185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_modifier5209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_modifier5233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_modifier5257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_modifier5281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_modifier5305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_modifier5329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_modifier5353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_modifier5377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_modifier5401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_modifier5425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_modifier5449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_packageOrTypeName5498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_enumConstantName5546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_typeName5595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_type5647 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_type5666 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_type5668 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_type5701 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_type5725 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_type5727 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_Identifier_in_classOrInterfaceType5793 = new BitSet(new long[]{0x0000010020000002L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType5798 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_29_in_classOrInterfaceType5819 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_classOrInterfaceType5823 = new BitSet(new long[]{0x0000010020000002L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType5827 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_56_in_primitiveType5884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_primitiveType5908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_primitiveType5932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_primitiveType5956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_primitiveType5980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_primitiveType6004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_primitiveType6028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_primitiveType6052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_variableModifier6099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_variableModifier6125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_typeArguments6172 = new BitSet(new long[]{0xFF00000000000010L,0x0000000000000001L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments6176 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_41_in_typeArguments6187 = new BitSet(new long[]{0xFF00000000000010L,0x0000000000000001L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments6191 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_42_in_typeArguments6218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument6278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_typeArgument6302 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_typeArgument6332 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_65_in_typeArgument6366 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_type_in_typeArgument6402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList6475 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_qualifiedNameList6500 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList6504 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_66_in_formalParameters6571 = new BitSet(new long[]{0xFF00000800000010L,0x0000000000000208L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters6576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_formalParameters6619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameterDecls6677 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls6681 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000010L});
    public static final BitSet FOLLOW_formalParameterDeclsRest_in_formalParameterDecls6685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest6743 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_formalParameterDeclsRest6768 = new BitSet(new long[]{0xFF00000800000010L,0x0000000000000200L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDeclsRest6772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_formalParameterDeclsRest6807 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest6811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody6860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_constructorBody6916 = new BitSet(new long[]{0xFF20F13F96001FF0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_constructorBody6921 = new BitSet(new long[]{0xFF20F03F96001FF0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_blockStatement_in_constructorBody6936 = new BitSet(new long[]{0xFF20F03F96001FF0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_45_in_constructorBody6963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation7021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_69_in_explicitConstructorInvocation7026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_65_in_explicitConstructorInvocation7032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation7039 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_explicitConstructorInvocation7041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_explicitConstructorInvocation7067 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_explicitConstructorInvocation7069 = new BitSet(new long[]{0x0000010000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation7074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_explicitConstructorInvocation7078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation7082 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_explicitConstructorInvocation7084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName7141 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_29_in_qualifiedName7166 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName7170 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_integerLiteral_in_literal7230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_literal7256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharacterLiteral_in_literal7282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal7308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal7334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_literal7358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HexLiteral_in_integerLiteral7406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OctalLiteral_in_integerLiteral7432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DecimalLiteral_in_integerLiteral7458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_booleanLiteral7505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_booleanLiteral7529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations7590 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_annotation7659 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_annotationName_in_annotation7663 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_annotation7689 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000003EEL});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation7730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_elementValue_in_annotation7772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_annotation7809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationName7867 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_29_in_annotationName7870 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_annotationName7872 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs7920 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_elementValuePairs7945 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs7949 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair8020 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_elementValuePair8022 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000003E6L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair8026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue8086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue8112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue8138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_elementValueArrayInitializer8196 = new BitSet(new long[]{0xFF00B20000000FD0L,0x0003E600000003E6L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer8201 = new BitSet(new long[]{0x0000220000000000L});
    public static final BitSet FOLLOW_41_in_elementValueArrayInitializer8226 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000003E6L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer8230 = new BitSet(new long[]{0x0000220000000000L});
    public static final BitSet FOLLOW_41_in_elementValueArrayInitializer8260 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_45_in_elementValueArrayInitializer8287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_annotationTypeDeclaration8342 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_46_in_annotationTypeDeclaration8344 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_annotationTypeDeclaration8348 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration8352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_annotationTypeBody8408 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody8436 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_45_in_annotationTypeBody8463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_annotationTypeElementDeclaration8511 = new BitSet(new long[]{0xFF00403F92000030L,0x0000000000000200L});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration8515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest8563 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest8567 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest8569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_annotationTypeElementRest8595 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest8597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementRest8624 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest8626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementRest8653 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest8655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest8682 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest8684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest8734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest8760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationMethodRest8809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_annotationMethodRest8811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_annotationMethodRest8813 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest8817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest8867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_defaultValue8914 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000003E6L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue8918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_block8976 = new BitSet(new long[]{0xFF20F03F96001FF0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_blockStatement_in_block8981 = new BitSet(new long[]{0xFF20F03F96001FF0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_45_in_block9008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_blockStatement9043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement9069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement9095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement9154 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_localVariableDeclarationStatement9156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_localVariableDeclaration9216 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration9220 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration9224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_variableModifiers9283 = new BitSet(new long[]{0x0000000800000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_block_in_statement9350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement9376 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_statement9380 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_statement9383 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_statement9387 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement9391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_statement9415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_parExpression_in_statement9419 = new BitSet(new long[]{0xFF20D03F96001FF0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_statement9423 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_statement9455 = new BitSet(new long[]{0xFF20D03F96001FF0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_statement9459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_statement9494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_statement9496 = new BitSet(new long[]{0xFF00900804000FD0L,0x0003E600000003E6L});
    public static final BitSet FOLLOW_forControl_in_statement9500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_statement9502 = new BitSet(new long[]{0xFF20D03F96001FF0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_statement9506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_statement9530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_parExpression_in_statement9534 = new BitSet(new long[]{0xFF20D03F96001FF0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_statement9538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_statement9562 = new BitSet(new long[]{0xFF20D03F96001FF0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_statement9566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_statement9568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_parExpression_in_statement9572 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement9574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_statement9598 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_statement9602 = new BitSet(new long[]{0x0000000000000000L,0x0000000001040000L});
    public static final BitSet FOLLOW_catches_in_statement9630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_statement9632 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_statement9636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_statement9664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_statement9690 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_statement9696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_statement9730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_parExpression_in_statement9734 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_statement9736 = new BitSet(new long[]{0x0000200000000000L,0x0000000002000400L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement9740 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_45_in_statement9742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_statement9766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_parExpression_in_statement9770 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_statement9772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_statement9797 = new BitSet(new long[]{0xFF00900004000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_statement9802 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement9808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_statement9832 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_statement9836 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement9838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_statement9862 = new BitSet(new long[]{0x0000000004000010L});
    public static final BitSet FOLLOW_Identifier_in_statement9866 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement9869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_statement9893 = new BitSet(new long[]{0x0000000004000010L});
    public static final BitSet FOLLOW_Identifier_in_statement9897 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement9900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_statement9924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementExpression_in_statement9950 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement9952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_statement9978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_statement9980 = new BitSet(new long[]{0xFF20D03F96001FF0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_statement9984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches10042 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_catchClause_in_catches10070 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_catchClause10137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_catchClause10139 = new BitSet(new long[]{0xFF00000800000010L,0x0000000000000200L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause10143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_catchClause10145 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_catchClause10149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameter10207 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_type_in_formalParameter10211 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter10215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups10276 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000400L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup10347 = new BitSet(new long[]{0xFF20D03F96001FF2L,0x0003E60002FBD7E6L});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup10386 = new BitSet(new long[]{0xFF20D03F96001FF2L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_89_in_switchLabel10455 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_constantExpression_in_switchLabel10459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_switchLabel10461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_switchLabel10485 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_enumConstantName_in_switchLabel10489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_switchLabel10491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_switchLabel10515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_switchLabel10517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enhancedForControl_in_forControl10580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl10606 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_forControl10609 = new BitSet(new long[]{0xFF00900004000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_forControl10613 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_forControl10616 = new BitSet(new long[]{0xFF00900800000FD2L,0x0003E600000003E6L});
    public static final BitSet FOLLOW_forUpdate_in_forControl10620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit10670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit10696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_enhancedForControl10756 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_type_in_enhancedForControl10760 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_enhancedForControl10764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_enhancedForControl10766 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_enhancedForControl10770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate10821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_parExpression10871 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_parExpression10875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_parExpression10899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList10945 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_expressionList10970 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_expressionList10974 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_expression_in_statementExpression11036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constantExpression11087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression11147 = new BitSet(new long[]{0x0008050000000002L,0x00000003FC000000L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression11174 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_expression11178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_assignmentOperator11238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_assignmentOperator11262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_assignmentOperator11286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_assignmentOperator11310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_assignmentOperator11334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_assignmentOperator11358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_assignmentOperator11382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_assignmentOperator11406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_assignmentOperator11430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_assignmentOperator11465 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_assignmentOperator11469 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_assignmentOperator11473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_assignmentOperator11523 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_assignmentOperator11527 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_assignmentOperator11531 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_assignmentOperator11535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_assignmentOperator11580 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_assignmentOperator11584 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_assignmentOperator11588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression11658 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_conditionalExpression11684 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression11688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_conditionalExpression11690 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression11694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression11767 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_conditionalOrExpression11793 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression11797 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression11870 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_conditionalAndExpression11896 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression11900 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression11973 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_100_in_inclusiveOrExpression11999 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression12005 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression12078 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_101_in_exclusiveOrExpression12104 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression12110 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression12183 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_andExpression12209 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression12213 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression12284 = new BitSet(new long[]{0x0000000000000002L,0x000000C000000000L});
    public static final BitSet FOLLOW_102_in_equalityExpression12311 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_103_in_equalityExpression12316 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression12324 = new BitSet(new long[]{0x0000000000000002L,0x000000C000000000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression12395 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_104_in_instanceOfExpression12420 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression12424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression12495 = new BitSet(new long[]{0x0000050000000002L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression12523 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression12527 = new BitSet(new long[]{0x0000050000000002L});
    public static final BitSet FOLLOW_40_in_relationalOp12596 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_relationalOp12600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_relationalOp12643 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_relationalOp12647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_relationalOp12681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_relationalOp12705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression12765 = new BitSet(new long[]{0x0000050000000002L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression12793 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression12797 = new BitSet(new long[]{0x0000050000000002L});
    public static final BitSet FOLLOW_40_in_shiftOp12866 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_shiftOp12870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_shiftOp12915 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_shiftOp12919 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_shiftOp12923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_shiftOp12966 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_shiftOp12970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression13040 = new BitSet(new long[]{0x0000000000000002L,0x0000060000000000L});
    public static final BitSet FOLLOW_105_in_additiveExpression13067 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_106_in_additiveExpression13072 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression13079 = new BitSet(new long[]{0x0000000000000002L,0x0000060000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression13150 = new BitSet(new long[]{0x0000000040000002L,0x0000180000000000L});
    public static final BitSet FOLLOW_30_in_multiplicativeExpression13178 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_107_in_multiplicativeExpression13184 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_108_in_multiplicativeExpression13190 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression13198 = new BitSet(new long[]{0x0000000040000002L,0x0000180000000000L});
    public static final BitSet FOLLOW_105_in_unaryExpression13267 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression13271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_unaryExpression13295 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression13299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_unaryExpression13323 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression13327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_unaryExpression13351 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression13355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression13381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_unaryExpressionNotPlusMinus13437 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus13441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_unaryExpressionNotPlusMinus13465 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus13469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus13495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus13523 = new BitSet(new long[]{0x0001000020000002L,0x0000600000000000L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus13550 = new BitSet(new long[]{0x0001000020000002L,0x0000600000000000L});
    public static final BitSet FOLLOW_109_in_unaryExpressionNotPlusMinus13578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_unaryExpressionNotPlusMinus13583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_castExpression13627 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression13631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_castExpression13633 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression13637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_castExpression13666 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_type_in_castExpression13671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_castExpression13678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_castExpression13683 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression13687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary13745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_primary13769 = new BitSet(new long[]{0x0001000020000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_29_in_primary13794 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_primary13798 = new BitSet(new long[]{0x0001000020000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary13836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_primary13888 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_superSuffix_in_primary13892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary13918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_primary13942 = new BitSet(new long[]{0xFF00010000000010L});
    public static final BitSet FOLLOW_creator_in_primary13946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_primary13972 = new BitSet(new long[]{0x0001000020000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_29_in_primary13997 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_primary14001 = new BitSet(new long[]{0x0001000020000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary14040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primary14094 = new BitSet(new long[]{0x0001000020000000L});
    public static final BitSet FOLLOW_48_in_primary14120 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_primary14122 = new BitSet(new long[]{0x0001000020000000L});
    public static final BitSet FOLLOW_29_in_primary14149 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_primary14151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_primary14175 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_primary14177 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_primary14179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_identifierSuffix14236 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_identifierSuffix14238 = new BitSet(new long[]{0x0001000020000000L});
    public static final BitSet FOLLOW_29_in_identifierSuffix14265 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_identifierSuffix14267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_identifierSuffix14292 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_identifierSuffix14319 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_identifierSuffix14343 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix14372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffix14396 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_identifierSuffix14398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffix14422 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_identifierSuffix14426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffix14450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_identifierSuffix14452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffix14476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_identifierSuffix14478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix14482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffix14506 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_identifierSuffix14508 = new BitSet(new long[]{0x0000010000000010L});
    public static final BitSet FOLLOW_innerCreator_in_identifierSuffix14512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator14570 = new BitSet(new long[]{0xFF00010000000010L});
    public static final BitSet FOLLOW_createdName_in_creator14574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator14578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_creator14604 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_arrayCreatorRest_in_creator14609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator14638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_createdName14697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_createdName14723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_innerCreator14781 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_innerCreator14786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator14790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_arrayCreatorRest14846 = new BitSet(new long[]{0xFF02900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_49_in_arrayCreatorRest14878 = new BitSet(new long[]{0x0001100000000000L});
    public static final BitSet FOLLOW_48_in_arrayCreatorRest14912 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_arrayCreatorRest14914 = new BitSet(new long[]{0x0001100000000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_arrayCreatorRest14951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest14985 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_arrayCreatorRest14987 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_arrayCreatorRest15020 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest15024 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_arrayCreatorRest15026 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_arrayCreatorRest15062 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_arrayCreatorRest15064 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest15151 = new BitSet(new long[]{0x000011C000000002L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest15178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation15247 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_explicitGenericInvocation15251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocation15255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nonWildcardTypeArguments15311 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments15315 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_nonWildcardTypeArguments15317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_selector15369 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_selector15373 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_selector15401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_selector15436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_selector15438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_selector15458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_selector15460 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_superSuffix_in_selector15464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_selector15484 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_selector15486 = new BitSet(new long[]{0x0000010000000010L});
    public static final BitSet FOLLOW_innerCreator_in_selector15490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_selector15510 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_selector15514 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_selector15516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix15570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_superSuffix15594 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_superSuffix15598 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_superSuffix15602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_arguments15661 = new BitSet(new long[]{0xFF00900800000FD0L,0x0003E600000003EEL});
    public static final BitSet FOLLOW_expressionList_in_arguments15693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_arguments15724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred5_Java119 = new BitSet(new long[]{0x0000403F92000020L,0x0000000000000200L});
    public static final BitSet FOLLOW_packageDeclaration_in_synpred5_Java153 = new BitSet(new long[]{0x0000403F9E000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_importDeclaration_in_synpred5_Java188 = new BitSet(new long[]{0x0000403F9E000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred5_Java238 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred5_Java287 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred5_Java322 = new BitSet(new long[]{0x0000403F96000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_synpred113_Java6921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred117_Java7021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_set_in_synpred117_Java7025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_synpred117_Java7039 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_synpred117_Java7041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred128_Java7590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_synpred151_Java9043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred152_Java9069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_synpred157_Java9455 = new BitSet(new long[]{0xFF20D03F96001FF0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_synpred157_Java9459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred162_Java9630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_synpred162_Java9632 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_synpred162_Java9636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred163_Java9664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchLabel_in_synpred178_Java10347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_synpred180_Java10455 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_constantExpression_in_synpred180_Java10459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_synpred180_Java10461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_synpred181_Java10485 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_enumConstantName_in_synpred181_Java10489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_synpred181_Java10491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enhancedForControl_in_synpred182_Java10580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred186_Java10670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred188_Java11174 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_synpred188_Java11178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_synpred198_Java11455 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_synpred198_Java11457 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred198_Java11459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_synpred199_Java11511 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_synpred199_Java11513 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_synpred199_Java11515 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred199_Java11517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred200_Java11570 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred200_Java11572 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred200_Java11574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_synpred211_Java12588 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred211_Java12590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred212_Java12635 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred212_Java12637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftOp_in_synpred214_Java12793 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred214_Java12797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_synpred215_Java12858 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_synpred215_Java12860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred216_Java12905 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred216_Java12907 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred216_Java12909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred217_Java12958 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred217_Java12960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred229_Java13495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_synpred233_Java13627 = new BitSet(new long[]{0xFF00000000000010L});
    public static final BitSet FOLLOW_primitiveType_in_synpred233_Java13631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_synpred233_Java13633 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred233_Java13637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred234_Java13671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred236_Java13794 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred236_Java13798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred237_Java13836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred242_Java13997 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred242_Java14001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred243_Java14040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_synpred249_Java14292 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_synpred249_Java14319 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_synpred249_Java14343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_synpred262_Java15020 = new BitSet(new long[]{0xFF00900000000FD0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_synpred262_Java15024 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_synpred262_Java15026 = new BitSet(new long[]{0x0000000000000002L});

}