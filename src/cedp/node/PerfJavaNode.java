/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PerfJavaNode.java
 *
 * Created on Apr 12, 2010, 6:56:47 PM
 */

package cedp.node;

import cetus.exec.Driver;
import cedp.util.extlib.AStyleWrapper;
import cedp.util.extlib.JcraftWrapper;
import cedp.util.extlib.JythonWrapper;
import cedp.util.extlib.LoboWrapper;
import cedp.util.UtilClipboard;
import cedp.util.UtilFile;
import cedp.util.UtilString;
import cedp.util.UtilTable;
import cedp.util.UtilThread;
import cedp.util.gui.ToolTipTreeNode;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.Transferable;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import vpa.interpreter.VpaProgram;
import vpa.runtime.VpaAPI;

/**
 *
 * @author yim6
 */
public class PerfJavaNode extends JFrame implements ClipboardOwner
{
    protected String pjtPath;
    protected JcraftWrapper net;
    protected VpaProgram vpaProgram;

    protected Thread    thread;
    protected String    address;
    protected int       port;
    protected String    id;
    protected String    pwd;

    /** Creates new form PerfJavaNode */
    public PerfJavaNode() {
        initComponents();
    }

    public PerfJavaNode(String base, String addrport, VpaProgram vpa, String cfg)
    {
        pjtPath = base;
        setTitle("[CEDP] Performance Java - " + addrport);
        initComponents();
        LoadConfig(pjtPath, cfg);
        vpaProgram = vpa;
        vpa.LoadPath(homeField);
        vpa.LoadBenchmarkInfo(programTable);
        vpa.BuildCommandTree(cmdTree);
        VpaAPI.SetNode(this);
        show();
    }

    public String GetCurrentDir()
    {
        return homeField.getText() + currDir.getText();
    }

    public String GetHomeDir()
    {
        return homeField.getText() + currDir.getText();
    }

    public String GetSelectedFile()
    {
        if(fileTable.getSelectedRowCount() != 1)
            return "";

        return fileTable.getModel().getValueAt(fileTable.getSelectedRow(), 1).toString();
    }

    public void SetSource(String data)
    {
        srcArea.setText(data);
    }
    
    public void Launch(String pAddr, int pPort, String pId, String pPwd)
    {
        net = new JcraftWrapper(pAddr, pPort, pId, pPwd, consoleArea);
        connButtonActionPerformed(null);
    }
    
    protected void SaveConfig()
    {
        String buffer;

        buffer = "benchmark:" + benchmarkField.getText() + "\n";
        buffer += "home:" + homeField.getText() + "\n";
        buffer += "filefilter:" + fileFilterField.getText() + "\n";
        buffer += "currdir:" + currDir.getText() + "\n";
        System.out.println(pjtPath + configFileField.getText());
        UtilFile.Write(pjtPath + configFileField.getText(), buffer);
    }

    protected void LoadConfig(String path, String fname)
    {
        String buffer = UtilFile.Read(path + fname);

        configFileField.setText(fname);
        StringTokenizer token = new StringTokenizer(buffer + "\n", "\n");
        while (token.hasMoreTokens()) {
            String ln = token.nextToken();

            if(ln.startsWith("#")) // skip comments
                continue;

            StringTokenizer ln_token = new StringTokenizer(ln, ":");

            String first = ln_token.nextToken();
            String last;
            if(ln_token.hasMoreTokens())
                last = ln_token.nextToken();
            else
                last = "";
            
            if(first.equals("benchmark"))
                benchmarkField.setText(last);
            else if(first.equals("home")){
                if(!last.endsWith("/"))
                    last += "/";
                homeField.setText(last);
            }
            else if(first.equals("filefilter")){
                fileFilterField.setText(last);
            }
            else if(first.equals("currdir")){
                currDir.setText(last);
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jSplitPane4 = new javax.swing.JSplitPane();
    jToolBar1 = new javax.swing.JToolBar();
    connButton = new javax.swing.JButton();
    jButton3 = new javax.swing.JButton();
    execButton = new javax.swing.JButton();
    jButton1 = new javax.swing.JButton();
    jSplitPane1 = new javax.swing.JSplitPane();
    jPanel2 = new javax.swing.JPanel();
    jSplitPane3 = new javax.swing.JSplitPane();
    messagePanel = new javax.swing.JTabbedPane();
    jPanel8 = new javax.swing.JPanel();
    jScrollPane3 = new javax.swing.JScrollPane();
    consoleArea = new javax.swing.JTextArea();
    jLabel4 = new javax.swing.JLabel();
    cmdField = new javax.swing.JTextField();
    progBar = new cedp.util.gui.ProgBar();
    jButton5 = new javax.swing.JButton();
    jButton2 = new javax.swing.JButton();
    jPanel1 = new javax.swing.JPanel();
    jScrollPane8 = new javax.swing.JScrollPane();
    messageArea = new javax.swing.JTextArea();
    jSplitPane5 = new javax.swing.JSplitPane();
    jTabbedPane4 = new javax.swing.JTabbedPane();
    jPanel12 = new javax.swing.JPanel();
    jScrollPane7 = new javax.swing.JScrollPane();
    srcArea = new javax.swing.JTextArea();
    jPanel13 = new javax.swing.JPanel();
    jPanel4 = new javax.swing.JPanel();
    jScrollPane10 = new javax.swing.JScrollPane();
    fiTable = new javax.swing.JTable();
    jTabbedPane5 = new javax.swing.JTabbedPane();
    jPanel10 = new javax.swing.JPanel();
    jScrollPane6 = new javax.swing.JScrollPane();
    progTree = new javax.swing.JTree();
    jSplitPane2 = new javax.swing.JSplitPane();
    jTabbedPane1 = new javax.swing.JTabbedPane();
    jPanel6 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    benchmarkField = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    homeField = new javax.swing.JTextField();
    jLabel3 = new javax.swing.JLabel();
    fileFilterField = new javax.swing.JTextField();
    jLabel5 = new javax.swing.JLabel();
    configFileField = new javax.swing.JTextField();
    jButton4 = new javax.swing.JButton();
    jButton6 = new javax.swing.JButton();
    jScrollPane9 = new javax.swing.JScrollPane();
    programTable = new javax.swing.JTable();
    jTabbedPane2 = new javax.swing.JTabbedPane();
    jPanel5 = new javax.swing.JPanel();
    jScrollPane2 = new javax.swing.JScrollPane();
    cmdTree = new javax.swing.JTree();
    jScrollPane4 = new javax.swing.JScrollPane();
    cmdArea = new javax.swing.JTextArea();
    jPanel3 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    fileTable = new javax.swing.JTable();
    jScrollPane5 = new javax.swing.JScrollPane();
    currDir = new javax.swing.JTextArea();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenuItem1 = new javax.swing.JMenuItem();
    saveMenuItem = new javax.swing.JMenuItem();
    jMenuItem3 = new javax.swing.JMenuItem();
    jSeparator2 = new javax.swing.JPopupMenu.Separator();
    attachMenuItem = new javax.swing.JMenuItem();
    installMenuItem = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JPopupMenu.Separator();
    jMenu3 = new javax.swing.JMenu();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("[CEDP] Main Controller");
    setResizable(false);
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowOpened(java.awt.event.WindowEvent evt) {
        formWindowOpened(evt);
      }
    });

    jToolBar1.setRollover(true);

    connButton.setText("Connect");
    connButton.setFocusable(false);
    connButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    connButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    connButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        connButtonActionPerformed(evt);
      }
    });
    jToolBar1.add(connButton);

    jButton3.setText("Configuration");
    jButton3.setFocusable(false);
    jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jButton3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton3ActionPerformed(evt);
      }
    });
    jToolBar1.add(jButton3);

    execButton.setText("Exec Command");
    execButton.setFocusable(false);
    execButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    execButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    execButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        execButtonActionPerformed(evt);
      }
    });
    jToolBar1.add(execButton);

    jButton1.setText("Web Browser");
    jButton1.setFocusable(false);
    jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });
    jToolBar1.add(jButton1);

    jSplitPane1.setDividerLocation(260);
    jSplitPane1.setDividerSize(10);

    jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    jSplitPane3.setDividerLocation(300);
    jSplitPane3.setDividerSize(10);
    jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    messagePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

    consoleArea.setBackground(new java.awt.Color(0, 102, 153));
    consoleArea.setColumns(20);
    consoleArea.setEditable(false);
    consoleArea.setFont(new java.awt.Font("Arial", 1, 10));
    consoleArea.setForeground(new java.awt.Color(255, 255, 255));
    consoleArea.setLineWrap(true);
    consoleArea.setRows(5);
    consoleArea.setTabSize(4);
    consoleArea.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        consoleAreaKeyTyped(evt);
      }
    });
    jScrollPane3.setViewportView(consoleArea);

    jLabel4.setText("CMD:");

    cmdField.setEditable(false);

    jButton5.setLabel("^Break");
    jButton5.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton5ActionPerformed(evt);
      }
    });

    jButton2.setText("Clear");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton2ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
    jPanel8.setLayout(jPanel8Layout);
    jPanel8Layout.setHorizontalGroup(
      jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel8Layout.createSequentialGroup()
        .addComponent(jLabel4)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(cmdField, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
        .addComponent(progBar, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jButton5)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
      .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 934, Short.MAX_VALUE)
    );
    jPanel8Layout.setVerticalGroup(
      jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel8Layout.createSequentialGroup()
        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(progBar, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
          .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, Short.MAX_VALUE)
            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(cmdField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel4))))
    );

    messagePanel.addTab("Console", jPanel8);

    messageArea.setColumns(20);
    messageArea.setEditable(false);
    messageArea.setRows(5);
    jScrollPane8.setViewportView(messageArea);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 934, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
    );

    messagePanel.addTab("Messages", jPanel1);

    jSplitPane3.setBottomComponent(messagePanel);
    messagePanel.getAccessibleContext().setAccessibleName("Console");

    jSplitPane5.setDividerLocation(650);
    jSplitPane5.setDividerSize(10);

    jTabbedPane4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

    srcArea.setColumns(20);
    srcArea.setEditable(false);
    srcArea.setFont(new java.awt.Font("Courier 10 Pitch", 0, 12));
    srcArea.setRows(5);
    jScrollPane7.setViewportView(srcArea);

    javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
    jPanel12.setLayout(jPanel12Layout);
    jPanel12Layout.setHorizontalGroup(
      jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)
    );
    jPanel12Layout.setVerticalGroup(
      jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
    );

    jTabbedPane4.addTab("Source", jPanel12);

    javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
    jPanel13.setLayout(jPanel13Layout);
    jPanel13Layout.setHorizontalGroup(
      jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 642, Short.MAX_VALUE)
    );
    jPanel13Layout.setVerticalGroup(
      jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 294, Short.MAX_VALUE)
    );

    jTabbedPane4.addTab("Http", jPanel13);

    fiTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "ID", "Fault", "Failure", "Type"
      }
    ));
    jScrollPane10.setViewportView(fiTable);

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
      jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel4Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
        .addContainerGap())
    );
    jPanel4Layout.setVerticalGroup(
      jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel4Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(157, Short.MAX_VALUE))
    );

    jTabbedPane4.addTab("FI Campaign", jPanel4);

    jSplitPane5.setLeftComponent(jTabbedPane4);

    jTabbedPane5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

    javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Program");
    javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Attributes");
    treeNode1.add(treeNode2);
    treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Methods");
    treeNode1.add(treeNode2);
    progTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
    progTree.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        progTreeMousePressed(evt);
      }
    });
    jScrollPane6.setViewportView(progTree);

    javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
    jPanel10.setLayout(jPanel10Layout);
    jPanel10Layout.setHorizontalGroup(
      jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
    );
    jPanel10Layout.setVerticalGroup(
      jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
    );

    jTabbedPane5.addTab("Layout", jPanel10);

    jSplitPane5.setRightComponent(jTabbedPane5);

    jSplitPane3.setLeftComponent(jSplitPane5);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 943, Short.MAX_VALUE)
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
    );

    jSplitPane1.setRightComponent(jPanel2);

    jSplitPane2.setDividerLocation(270);
    jSplitPane2.setDividerSize(10);
    jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

    jLabel1.setText("Benchmark:");

    jLabel2.setText("Home:");

    jLabel3.setText("File Filter:");

    jLabel5.setText("Config Name:");

    jButton4.setText("Save");
    jButton4.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton4ActionPerformed(evt);
      }
    });

    jButton6.setText("Load");
    jButton6.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton6ActionPerformed(evt);
      }
    });

    programTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "Program", "Data"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.String.class, java.lang.String.class
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }
    });
    jScrollPane9.setViewportView(programTable);

    javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
    jPanel6.setLayout(jPanel6Layout);
    jPanel6Layout.setHorizontalGroup(
      jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel6Layout.createSequentialGroup()
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel6Layout.createSequentialGroup()
            .addGap(70, 70, 70)
            .addComponent(jButton4)
            .addGap(18, 18, 18)
            .addComponent(jButton6))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
              .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jLabel1)
                  .addComponent(jLabel2))
                .addGap(22, 22, 22)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(configFileField, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                  .addComponent(homeField, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                  .addComponent(benchmarkField, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)))
              .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileFilterField, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)))
            .addGap(20, 20, 20)))
        .addContainerGap())
    );
    jPanel6Layout.setVerticalGroup(
      jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel6Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel5)
          .addComponent(configFileField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(homeField, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(benchmarkField, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(fileFilterField, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jButton4)
          .addComponent(jButton6))
        .addContainerGap(14, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab("Config", jPanel6);

    jSplitPane2.setTopComponent(jTabbedPane1);
    jTabbedPane1.getAccessibleContext().setAccessibleName("VPA Program");

    jTabbedPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

    jPanel5.setBackground(java.awt.Color.white);

    treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("vpa");
    cmdTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
    cmdTree.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        cmdTreeMousePressed(evt);
      }
    });
    jScrollPane2.setViewportView(cmdTree);

    cmdArea.setColumns(10);
    cmdArea.setRows(5);
    cmdArea.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        cmdAreaFocusLost(evt);
      }
    });
    jScrollPane4.setViewportView(cmdArea);

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
      .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
    );
    jPanel5Layout.setVerticalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel5Layout.createSequentialGroup()
        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
    );

    jTabbedPane2.addTab("VPA", jPanel5);

    jPanel3.setBackground(java.awt.Color.white);

    fileTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null}
      },
      new String [] {
        "Type", "File"
      }
    ) {
      boolean[] canEdit = new boolean [] {
        false, false
      };

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    fileTable.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        fileTableMousePressed(evt);
      }
    });
    jScrollPane1.setViewportView(fileTable);

    currDir.setColumns(10);
    currDir.setRows(5);
    currDir.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        currDirFocusLost(evt);
      }
    });
    jScrollPane5.setViewportView(currDir);

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))
    );

    jTabbedPane2.addTab("Files", jPanel3);

    jSplitPane2.setRightComponent(jTabbedPane2);

    jSplitPane1.setLeftComponent(jSplitPane2);

    jMenu1.setText("Configuration");

    jMenuItem1.setText("Load a VPA program");
    jMenu1.add(jMenuItem1);

    saveMenuItem.setText("Save");
    saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveMenuItemActionPerformed(evt);
      }
    });
    jMenu1.add(saveMenuItem);

    jMenuItem3.setText("Save as ...");
    jMenu1.add(jMenuItem3);
    jMenu1.add(jSeparator2);

    attachMenuItem.setText("Connect to a client");
    attachMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        attachMenuItemActionPerformed(evt);
      }
    });
    jMenu1.add(attachMenuItem);

    installMenuItem.setText("Install client programs");
    installMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        installMenuItemActionPerformed(evt);
      }
    });
    jMenu1.add(installMenuItem);
    jMenu1.add(jSeparator1);

    jMenuBar1.add(jMenu1);

    jMenu3.setText("Operation");
    jMenuBar1.add(jMenu3);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1218, Short.MAX_VALUE)
      .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1218, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    public JTable GetBenchmarkTable()
    {
      return programTable;
    }

    protected void UpdateFileList()
    {
        String folder = homeField.getText() + currDir.getText();

        TableModel model = fileTable.getModel();
        UtilTable.DeleteAll(fileTable);

        net.RunCommandBlocked("ls -al " + folder +  " > /tmp/cedp");
        net.FtpBlocked("/tmp/cedp", "cedp", net.FtpGet);
        String buffer = UtilFile.Read("cedp");

        // Build srcTree
        StringTokenizer token = new StringTokenizer(buffer + "\n", "\n");
        while (token.hasMoreTokens()) {
            String ln = token.nextToken();

            StringTokenizer ln_token = new StringTokenizer(ln, " ");
            if(ln_token.countTokens() < 4)
                continue;

            Object obj[] = new Object[2];

            String first = ln_token.nextToken();
            String last = first;
            if(first.startsWith("d"))
                obj[0] = "Folder";
            else
                obj[0] = "File";

            String temp;
            while(ln_token.hasMoreTokens()){
                temp = ln_token.nextToken();
                if(temp.equals("->")){
                    obj[0] = (String)obj[0] + "-Symlink";
                    break; /* symlink */
                }
                last = temp;
            }

            obj[1] = last;
            UtilTable.AddToTable(fileTable, obj, false);
        }
    }

    /*
    protected void UpdateFileList()
    {
        UtilTree.RemoveAll(srcTree);

        net.RunCommandBlocked("find . > /tmp/ceval");
        net.FtpBlocked("/tmp/ceval", "ceval", net.FtpGet);

        String buffer = UtilFile.Read("ceval");

        // Build srcTree
        StringTokenizer token = new StringTokenizer(buffer + "\n", "\n");
        DefaultMutableTreeNode parent;
        boolean check;
        
        while (token.hasMoreTokens()) {
            String ln = token.nextToken();

            if(ln.length()<=2)
                continue;
            
            StringTokenizer ln_token = new StringTokenizer(ln.substring(2), "/");

            parent = (DefaultMutableTreeNode) srcTree.getModel().getRoot();
            while(ln_token.countTokens() > 0){
                String name = ln_token.nextToken();

                check = false;
                
                for(int j=0; j<parent.getChildCount(); j++){
                    if(parent.getChildAt(j).toString().equals(name)){
                        parent = (DefaultMutableTreeNode)parent.getChildAt(j);
                        check = true;
                        break;
                    }
                }

                if(!check){
                    DefaultMutableTreeNode child = new DefaultMutableTreeNode(name);
                    parent.add(child);
                    parent = child;
                }
            }
        }
        UtilTree.ApplyFilter((DefaultMutableTreeNode)srcTree.getModel().getRoot(), fileFilterField.getText());
        
        UtilTree.ExpandAll(srcTree);
    }
     */

    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        int i;
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension window = getSize();

        setLocation(screen.width/2 - window.width/2, screen.height/2 - window.height/2);

        //jButton4ActionPerformed(null);

        //for(i=0; i<cmdTree.getRowCount(); i++)
        //    cmdTree.expandRow(i);
        // TODO add your handling code here:
        //programTable.getSelectionModel().se
    }//GEN-LAST:event_formWindowOpened

    protected Vector GetFileList(String path)
    {
        Vector  vec = new Vector();
        String  buffer;
        int i;

//        cmdOutputStream.StartMonitor();
        //Thread thread = RunCommand();
        //thread.wait(FtpGet)
/*
        cmdInputStream.AddCommand("ls " + path + " > /tmp/hifi");
        Wait(1000);
        FtpIO("/tmp/hifi", "tmp/filelist", FtpGet);
        buffer = UtilFile.Read("tmp/filelist");*/
//        buffer = cmdOutputStream.StopMonitor();

        /*
        i = 1;
        while (i < buffer.length()) {
            while (buffer.charAt(i) == buffer.)
        }
        */

        StringTokenizer token = new StringTokenizer(buffer, "\n");
        while (token.hasMoreTokens()) {
            String file = token.nextToken();
            vec.addElement(file);
        }

        //cmdInputStream.AddCommand("./parboil run " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + " cuda default");
        return vec;
    }

    protected Vector InstrGetFiles(String dst)
    {
        // TODO add your handling code here:
        /* 1: get file list */
        String path = baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/src/" + dst + "/";
        Vector fileList = GetFileList(path);
        int i;

        String fileName;
        String path_dst = baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/src/" + dst + "/";
        
        FtpIO(".." + File.separator + "instr" + File.separator + "before" + File.separator + "gpufi.h", path_dst + "gpufi.h", FtpPut);
        UtilFile.Copy(".." + File.separator + "instr" + File.separator + "before" + File.separator + "gpufi.h", "gpufi.h");
//        FtpIO(".." + File.separator + "instr" + File.separator + "before" + File.separator + "gpufi_kernel.cu", path_dst + "gpufi_kernel.cu", FtpPut);

        /* 2: copy the source code from injector to control server */
        for(i=0; i<fileList.size(); i++){
            //fileName = "tmp" + File.separatorChar + fileList.elementAt(i);
            fileName = "" + fileList.elementAt(i);
            if(fileName.equals("gpufi.h") || fileName.equals("gpufi_kernel.cu"))
                continue;
            if(fileName.endsWith(".cu") || fileName.endsWith(".h") || fileName.endsWith(".cpp")){
                FtpIO(path + fileList.elementAt(i), fileName, FtpGet);
            }
        }

        Wait(1000);

        return fileList;
    }

    public class Worker implements Runnable
    {
        Thread  thread;
        protected Vector fileList;

        public Worker(Vector v)
        {
            fileList = v;
            thread = new Thread(this);
            thread.start();
        }

        public void run()
        {
        }
    }

    protected void InstrRunCetus(String folder, Vector fileList)
    {
//        new Worker(fileList);
        int i;
        String fileName;
        String currentPath = "";

        if(fileList == null){
            String path = baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/src/cuda_cetus/";
            fileList = GetFileList(path);
        }

        try{
            currentPath = new java.io.File(".").getCanonicalPath();
            //currentPath = currentPath.substring(0, currentPath.length()-1) + File.pathSeparator;
        } catch(Exception e){
            e.printStackTrace();
        }

        //System.getProperty("user.dir");

        /* 3: run CETUS for FI instr. */
        //String userDir = System.getProperty("user.dir");
        //System.setProperty("user.dir", userDir + File.separatorChar + "tmp");

        for(i=0; i<fileList.size(); i++){
        //for(i=fileList.size()-1; i>=0; i--){
            fileName = "" + fileList.elementAt(i);
            if(fileName.equals("gpufi_kernel.cu"))
                continue;
            if(fileName.endsWith(".cu")){
                String args[] = null;
                System.out.println("Instrment: " + fileName);
                //args[0] = "-cuda-inj";
                if(folder.equals("cuda_fi")){
                    args = new String[2];
                    args[0] = "-fault-injector";
                    args[1] = fileName;
                }
                else if(folder.equals("cuda_ed")){
                    args = new String[2];
                    args[0] = "-error-detector1pt";
                    args[1] = fileName;
                }
                else if(folder.equals("cuda_fied")){
                    args = new String[3];
                    args[0] = "-fault-injector";
                    args[1] = "-error-detector";
                    args[2] = fileName;
                }
                else{
                    args = new String[2];
                    args[0] = "-fault-injector";
                    args[1] = fileName;
                }
                //args[1] = "-expand-all-header";
                //args[4] = "-verbosity";
                //args[2] = "-outdir";

                Driver cetusDriver = new Driver();
                cetusDriver.run(args);
                /* C beautifier for instrumented code */
                AStyleWrapper.Buautifier(fileName, fileName + ".beauty");
                AStyleWrapper.Buautifier("cetus_output" + File.separator + fileName, "cetus_output" + File.separator + fileName + ".beauty");
            }
        }
        //System.setProperty("user.dir", userDir);
    }

    protected void InstrPutFiles(String folder, Vector fileList)
    {
        int i;
        String fileName;
        String path = baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/src/cuda_cetus/";

        if(fileList == null)
            fileList = GetFileList(path);

        /* 4: store the instrumented file back to the injector */
        /* copy all files from cuda_cetus to cuda_fi */
        String path_dst = baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/src/" + folder + "/";
        cmdInputStream.AddCommand("mkdir " + path_dst + " -p");
        cmdInputStream.AddCommand("cp " + path + "/* " + path_dst + " -rf");
        Wait(1000);

        /* overwrite instrumented files */
        for(i=0; i<fileList.size(); i++){
            fileName = "" + fileList.elementAt(i);
            if(fileName.equals("gpufi.h") || fileName.equals("gpufi_kernel.cu"))
                continue;
            //fileName = "tmp" + File.separatorChar + fileList.elementAt(i);
            if(fileName.endsWith(".cu")){
                FtpIO("cetus_output" + File.separator + fileName + ".beauty", path_dst + fileName, FtpPut);
            }
        }
        Wait(1000);

        /* store FI library files */
        //cmdInputStream.AddCommand("rm " + path_dst + File.separator + "/gpufi.h -f");
        FtpIO(".." + File.separator + "instr" + File.separator + folder + File.separator + "gpufi.h", path_dst + "gpufi.h", FtpPut);
        FtpIO(".." + File.separator + "instr" + File.separator + folder + File.separator + "gpufi_kernel.cu", path_dst + "gpufi_kernel.cu", FtpPut);
        //cmdInputStream.AddCommand("touch " + path_dst + File.separator + "/gpufi.h");
    }

    protected void Compile(String folder)
    {
        cmdInputStream.AddCommand("./parboil clean " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0));
        cmdInputStream.AddCommand("./parboil compile " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + " " + folder);
    }

    protected void Profile(String folder, String options)
    {
        String path_dst = baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/src/" + folder + "/";

        FtpIO(".." + File.separator + "instr" + File.separator + folder + File.separator + "gpufi.h", path_dst + "gpufi.h", FtpPut);
        FtpIO(".." + File.separator + "instr" + File.separator + folder + File.separator + "gpufi_kernel.cu", path_dst + "gpufi_kernel.cu", FtpPut);

        Wait(1000);

        cmdInputStream.AddCommand("rm " + baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/fi_profile.txt -f");
        cmdInputStream.AddCommand("echo profile " + options + " > " + baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/fi_cmd.txt");
        cmdInputStream.AddCommand("./parboil run " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + " " + folder + " " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 1));
        cmdInputStream.AddCommand("cat " + baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/fi_profile.txt");
    }

    protected void Exec(String folder)
    {
        cmdInputStream.AddCommand("./parboil run " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + " " + folder + " " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 1));
    }

    protected void GenerateGolden(String folder)
    {
        Exec(folder);
        cmdInputStream.AddCommand("cp " + baseFolderText.getText() + "benchmarks/" +  programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/run/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 1) + "/* " +
                                          baseFolderText.getText() + "benchmarks/" +  programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/output/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 1) + "/* -f");
    }

    protected int fiIndex;
    
    protected void AddFaultCmd(BufferedWriter fout, String cmd)
    {
        try{
            fout.write(cmd + "\n");
        } catch(Exception e){
            e.printStackTrace();
        }

        Object obj[] = new Object[3];

        obj[0] = (Object) (String)("" + fiIndex++);
        obj[1] = (Object) (String)(cmd);
        obj[2] = (Object) (String)("");
        
        UtilTable.AddToTable(fiTable, obj, false);
    }

    protected void ReadCmds()
    {
        String str = "";
        String buf;
        int i;
        fiIndex = 0;

//        fiTable.removeAll();
        UtilTable.DeleteAll(fiTable);
        try{
            BufferedWriter fout = new BufferedWriter(new FileWriter("fi_cmd.txt"));
            String fin = campaignTextArea.getText();
            i = 0;
            while(i<fin.length()){
                str = "";
                while(true){
                    if(i>=fin.length())
                        break;
                    buf = fin.substring(i, i+1);
                    i++;
                    if(buf.equals("\n"))
                        break;
                    str += buf;
                }
                System.out.println("READ CMDS: " + str);
                
                StringTokenizer st = new StringTokenizer(str, " ");
                System.out.println("" + str);
                System.out.println("" + st.countTokens());
                if(st.countTokens() == 10){
                    if(st.nextToken().equals("fi")){
                        int kern_id = UtilString.String2Int(st.nextToken());
                        int instance = UtilString.String2Int(st.nextToken());
                        int var_id = UtilString.String2Int(st.nextToken());
                        int call = UtilString.String2Int(st.nextToken());
                        String mask = st.nextToken();
                        int blk = UtilString.String2Int(st.nextToken());
                        int thread = UtilString.String2Int(st.nextToken());
                        String var_type = st.nextToken();
                        String var_name = st.nextToken();

                        AddFaultCmd(fout, "fi " + kern_id + " " + instance + " " + var_id + " " + (call) + " " + mask + " " + blk + " " + thread + " " + var_type + " " + var_name + "\n");
                    }
                }
            }
            fout.close();
        } catch(Exception e){
            e.printStackTrace();
        }
    }

    protected void Generate(String folder)
    {
        FtpIO(baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/fi_profile.txt", "fi_profile.txt", FtpGet);
        Wait(1000);
        String str = "";
        int i;
        int kern_id = -1;
        String kern_name;
        int instance = -1;
        fiIndex = 0;

        fiTable.removeAll()
        try{
            BufferedWriter fout = new BufferedWriter(new FileWriter("fi_cmd.txt"));
            BufferedReader fin = new BufferedReader(new FileReader("fi_profile.txt"));
            while(fin.ready()){
                str = fin.readLine();
                StringTokenizer st = new StringTokenizer(str, "\t");
                if(st.countTokens() == 4){
                    if(st.nextToken().equals("kernel")){
                        kern_id = UtilString.String2Int(st.nextToken());
                        kern_name = st.nextToken();
                        instance = UtilString.String2Int(st.nextToken());
                        System.out.println("fi " + kern_id + " " + instance + " " + kern_name);
                    }
                }
                if(st.countTokens() == 6){
                    if(st.nextToken().equals("variable")){
                        int var_id = UtilString.String2Int(st.nextToken());
                        String var_name = st.nextToken();
                        int call = UtilString.String2Int(st.nextToken());
                        int loop_id = UtilString.String2Int(st.nextToken());
                        String var_type = st.nextToken();

                        AddFaultCmd(fout, "fi " + kern_id + " " + instance + " " + var_id + " " + (call-1) + " 0x80000000 " + var_type + " " + var_name + "\n");
                        AddFaultCmd(fout, "fi " + kern_id + " " + instance + " " + var_id + " " + (call-1) + " 0x40000000 " + var_type + " " + var_name + "\n");
                        AddFaultCmd(fout, "fi " + kern_id + " " + instance + " " + var_id + " " + (call-1) + " 0x08000000 " + var_type + " " + var_name + "\n");
                        AddFaultCmd(fout, "fi " + kern_id + " " + instance + " " + var_id + " " + (call-1) + " 0x00800000 " + var_type + " " + var_name + "\n");
                        AddFaultCmd(fout, "fi " + kern_id + " " + instance + " " + var_id + " " + (call-1) + " 0x00400000 " + var_type + " " + var_name + "\n");
                        AddFaultCmd(fout, "fi " + kern_id + " " + instance + " " + var_id + " " + (call-1) + " 0x00001000 " + var_type + " " + var_name + "\n");
                        AddFaultCmd(fout, "fi " + kern_id + " " + instance + " " + var_id + " " + (call-1) + " 0x00000001 " + var_type + " " + var_name + "\n");
                        //fiTable.getModel().setValueAt(call, fiIndex, fiIndex);
                    }
                }
            }
            fout.close();
        } catch(Exception e){
            e.printStackTrace();
        }
    }

    public class FiThread implements Runnable
    {
        protected String folder;
        
        public FiThread()
        {
        }

        public void FI_Exec(String f)
        {
            folder = f;
            Thread thread = new Thread(this);
            thread.start();
        }

        public void run()
        {
            String dst = "fi.sh";
            String str = "";
            String id;
            int i;

            try{
                File f = new File(dst);

                if(f.exists())
                    f.delete();

                BufferedWriter fout = new BufferedWriter(new FileWriter(dst));

                String path_dst = baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/src/" + folder + "/";

                //Compile(folder);
                //
                for(i=0; i<fiTable.getRowCount(); i++){
                    id = "result-" + (String)fiTable.getValueAt(i, 0) + ".txt";
                    str = (String) fiTable.getValueAt(i, 1);
                    if(str.endsWith("\n"))
                        str = str.substring(0, str.length()-1);
                    //BufferedReader file = new BufferedReader(new FileReader("fi_cmd.txt"));

                    fout.write("rm -f " + id + "\n");
                    fout.write("echo \"" + str + "\" > benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/fi_cmd.txt" + "\n");
                    fout.write("cat benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/fi_cmd.txt" + "\n");
                    fout.write("./parboil run " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + " " + folder + " " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 1) + " > " + id + "\n");
                    //fout.write("cat " + id + "\n");
                        //cmdInputStream.AddCommand("cat " + baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/fi_profile.txt");
                }
                fout.close();
            } catch(Exception e){
                e.printStackTrace();
            }

            cmdInputStream.AddCommand("rm -f " + dst);
            Wait(1000);
            FtpIO(dst, baseFolderText.getText() + dst, FtpPut);
            Wait(2000);
            cmdInputStream.AddCommand("chmod 755 " + dst);
            cmdInputStream.AddCommand("./" + dst);
        }
    }

    protected void FI_ExecTest(String folder)
    {
        String dst = "fi.sh";
        String str = "";
        String id = "";
        int i;

        try{
            File f = new File(dst);

            if(f.exists())
                f.delete();

            BufferedWriter fout = new BufferedWriter(new FileWriter(dst));

            String path_dst = baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/src/" + folder + "/";

            //Compile(folder);
            //
            id = "result-test.txt";
            str = "fi 0 0 0 0 0x0";

            fout.write("rm -f " + id + "\n");
            fout.write("echo \"" + str + "\" > benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/fi_cmd.txt" + "\n");
            fout.write("cat benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/fi_cmd.txt" + "\n");
            fout.write("./parboil run " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + " " + folder + " " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 1) + " > " + id + "\n");
            fout.close();
        } catch(Exception e){
            e.printStackTrace();
        }

        cmdInputStream.AddCommand("rm -f " + dst);
        Wait(1000);
        FtpIO(dst, baseFolderText.getText() + dst, FtpPut);
        Wait(2000);
        cmdInputStream.AddCommand("chmod 755 " + dst);
        cmdInputStream.AddCommand("./" + dst);
        cmdInputStream.AddCommand("cat " + id);
    }

    protected void ED_Exec(String folder)
    {
        cmdInputStream.AddCommand("./parboil run " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + " cuda " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 1));
        cmdInputStream.AddCommand("./parboil run " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + " " + folder + " " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 1));
    }

    protected void FI_GetFiles(String folder)
    {
        String str = "";
        String id;
        int i;

        for(i=0; i<fiTable.getRowCount(); i++){
            id = "result-" + (String)fiTable.getValueAt(i, 0) + ".txt";
            FtpIO(baseFolderText.getText() + id, id, FtpGet);
        }

        Wait(1000);
    }

    protected void FI_Analysis(String folder)
    {
        String str = "";
        String id;
        int i;
        
        for(i=0; i<fiTable.getRowCount(); i++){
            id = "result-" + (String)fiTable.getValueAt(i, 0) + ".txt";
            str = FileRead(id);
            fiTable.setValueAt((Object)str, i, 3);
            if(str.contains("SDC Detected: 1")){
                fiTable.setValueAt((Object)"Detect-Ctrl", i, 2);
            }
            else if(str.contains("SDC Detected: 2")){
                fiTable.setValueAt((Object)"Detect-Data", i, 2);
            }
            else if(str.contains("Pass")){
                if(str.contains("Injected: 0") || str.contains("injected: 0"))
                    fiTable.setValueAt((Object)"NA", i, 2);
                else
                    fiTable.setValueAt((Object)"Pass", i, 2);
            }
            else if(str.contains("Mismatch")){
                fiTable.setValueAt((Object)"SDC", i, 2);
            }
            else if(str.contains("Run failed")){
                fiTable.setValueAt((Object)"Crash", i, 2);
            }
        }
        
        /*
        try{
            //BufferedReader file = new BufferedReader(new FileReader("fi_cmd.txt"));
            while(file.ready()){
                str = file.readLine();
                cmdInputStream.AddCommand("echo " + str + " > benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/fi_cmd.txt");
                cmdInputStream.AddCommand("./parboil run " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + " " + folder + " " + programTable.getModel().getValueAt(programTable.getSelectedRow(), 1));
                //cmdInputStream.AddCommand("cat " + baseFolderText.getText() + "benchmarks/" + programTable.getModel().getValueAt(programTable.getSelectedRow(), 0) + "/fi_profile.txt");
            }
        } catch(Exception e){
            e.printStackTrace();
        }
        */
    }

    public JTable GetFITable()
    {
      return fiTable;
    }
    
    public void lostOwnership(Clipboard clipboard, Transferable contents) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    private void cmdTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdTreeMousePressed
        // TODO add your handling code here:
        int selRow = cmdTree.getRowForLocation(evt.getX(), evt.getY());
        TreePath selPath = cmdTree.getPathForLocation(evt.getX(), evt.getY());

        cmdAreaFocusLost(null); /* save the current context of cmdArea as a tooltip */
        
        if(selRow != -1) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) selPath.getLastPathComponent();
            
            if(evt.getClickCount() == 1) {
                if(node instanceof ToolTipTreeNode){
                    ToolTipTreeNode tnode = (ToolTipTreeNode) node;
                    cmdArea.setText(tnode.GetToolTipText());
                }
                else
                    cmdArea.setText("");
            }
            else if(evt.getClickCount() == 2) {
                if(node instanceof ToolTipTreeNode && node.getChildCount() == 0){
                    ToolTipTreeNode tnode = (ToolTipTreeNode) node;
                    //System.out.println("Jython : " + cmdArea.getText());
                    JythonWrapper.Exec(vpaProgram.GetScript() + "\n" + cmdArea.getText());
                }
            }
        }
    }//GEN-LAST:event_cmdTreeMousePressed

    private void fileTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileTableMousePressed
        // TODO add your handling code here:
        if(fileTable.getSelectedRowCount() != 1)
            return;

        if(evt.getClickCount() == 1) {
        }
        else if(evt.getClickCount() == 2) {
            if(fileTable.getModel().getValueAt(fileTable.getSelectedRow(), 0).toString().startsWith("Folder")){
                String dir = currDir.getText();
                String fname = fileTable.getModel().getValueAt(fileTable.getSelectedRow(), 1).toString();
                if(fname.equals(".")){
                    /* do nothing */
                }
                else if(fname.equals("..")){
                    /* find the second last '/' */
                    StringTokenizer token = new StringTokenizer(dir, "/");
                    if(token.countTokens() == 0){
                        /* do nothing */
                        System.out.println("browsing parent directory of home folder is not supported.");
                    }
                    else if(token.countTokens() == 1){
                        currDir.setText("");
                        UpdateFileList();
                    }
                    else{
                        dir = "";
                        int cnt = token.countTokens();
                        for(int i=0; i<cnt-1; i++){
                            dir += token.nextToken() + "/";
                        }
                        currDir.setText(dir);
                        UpdateFileList();
                    }
                }
                else{
                    dir += fname + "/";
                    currDir.setText(dir);
                    UpdateFileList();
                }
            }
        }
    }//GEN-LAST:event_fileTableMousePressed

    private void cmdAreaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdAreaFocusLost
        // TODO add your handling code here:
        if(cmdTree == null || cmdTree.getSelectionPath() == null)
            return;

        DefaultMutableTreeNode node = (DefaultMutableTreeNode)cmdTree.getSelectionPath().getLastPathComponent();

        if(node instanceof ToolTipTreeNode && node.getChildCount() == 0){
            ToolTipTreeNode tnode = (ToolTipTreeNode)node;
            tnode.SetToolTipText(cmdArea.getText());
        }
    }//GEN-LAST:event_cmdAreaFocusLost

    private void connButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connButtonActionPerformed
        // TODO add your handling code here:
        attachMenuItemActionPerformed(null);
    }//GEN-LAST:event_connButtonActionPerformed

    private void progTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_progTreeMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_progTreeMousePressed

    private void installMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installMenuItemActionPerformed
        // TODO add your handling code here:
        /* install host side compiler */
        // we use CPP installed by cygwin (change the PATH to /cygwin/bin and
        // copy /cygwin/bin/cpp-3.exe /cygwin/bin/cpp.exe
        // replace the header files (usr/include) by one from Linux (mahler)
}//GEN-LAST:event_installMenuItemActionPerformed

    private void attachMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachMenuItemActionPerformed
        // TODO add your handling code here:
        new UtilThread(null){public void run(){
            progBar.Process();

            net.RunCommandBlocked("cd " + homeField.getText());
            net.RunCommandBlocked("source path");
            UpdateFileList();

            progBar.Done();
        }};
        //        cmdInputStream.AddCommand("source path");
}//GEN-LAST:event_attachMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        vpaProgram.Save(cmdTree, null);
}//GEN-LAST:event_saveMenuItemActionPerformed

    private void currDirFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_currDirFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_currDirFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
            (new LoboWrapper()).Launch3();
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        consoleArea.setText("");
}//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        byte a[] = new byte[1];

        a[0] = 0x3; //;0x18; //0x1b
        cmdInputStream.AddCommand("" + new String(a, 0, 1));
}//GEN-LAST:event_jButton5ActionPerformed

    private void consoleAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_consoleAreaKeyTyped
        // TODO add your handling code here:
        if(evt.getKeyChar() == 3){ // Ctrl+C
            UtilClipboard.Set(consoleArea.getSelectedText());
        } else if(evt.getKeyChar() == 24){ // Ctrl+X
            System.out.println("Ctrl+X is not supported. Please use Ctrl+C");
        } else if(evt.getKeyChar() == 22){ // Ctrl+V
            consoleArea.append(UtilClipboard.Get());
        } else if(evt.getKeyChar() == 16){ // Ctrl+P
            System.out.println("Ctrl+P is not recognized.");
        } else{
            System.out.println("" + (int)(evt.getKeyChar()));
            if(evt.getKeyChar() == 10){ // Enter (CR)
                if(cmdField.getText().length()>0)
                    net.RunCommandBlocked(cmdField.getText());
                cmdField.setText("");
            } else if(evt.getKeyChar() == 8){ // Backspace
                cmdField.setText(cmdField.getText().substring(0, cmdField.getText().length()-1));
            } else{
                cmdField.setText(cmdField.getText() + evt.getKeyChar());
            }
        }
}//GEN-LAST:event_consoleAreaKeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton3ActionPerformed



    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        SaveConfig();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        LoadConfig(pjtPath, configFileField.getText());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void execButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_execButtonActionPerformed
        // TODO add your handling code here:
      JythonWrapper.Exec(vpaProgram.GetScript() + "\n" + cmdArea.getText());
    }//GEN-LAST:event_execButtonActionPerformed

    private void installButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        
        // TODO add your handling code here:
                                                 
        // TODO add your handling code here:

    
    }                                             


    /*
    public class CmdInputStream extends InputStream
    {
        Vector vec;
        int pos;
        int count;

        public CmdInputStream()
        {
            vec = new Vector();
            pos = 0;
            count = 0;
        }

        public void AddCommand(String cmd)
        {
            vec.addElement(cmd + "\n");
            count += cmd.length();
        }

        public int available() throws IOException
        {
            return count;
        }

        public int read() throws IOException
        {
            int result = -1;

            if(vec == null)
                return -1;

            while(true){
                if(vec.isEmpty())
                    return -1;

                String cmd = (String)vec.elementAt(0);
                if(pos >= cmd.length()){
                    vec.removeElementAt(0);
                    pos = 0;
                    continue;
                }
                result = cmd.charAt(pos);
                pos++;
                count--;
                break;
            }
            //throw IOException
            return result;
        }

        // an over rided function which does not return -1.
        public int read(byte b[], int off, int len) throws IOException
        {
            if (b == null) {
                throw new NullPointerException();
            } else if (off < 0 || len < 0 || len > b.length - off) {
                throw new IndexOutOfBoundsException();
            } else if (len == 0) {
                return 0;
            }

            int c = read();
            if (c == -1) {
                return 0;
            }
            b[off] = (byte)c;

            int i = 1;
            try {
                for (; i < len ; i++) {
                    c = read();
                    if (c == -1) {
                        break;
                    }
                    b[off + i] = (byte)c;
                }
            } catch (IOException ee) {
            }
            return i;
        }
    }

    public InputStream GetInputStream(final String cmd)
    {
        return new InputStream(){
            String s = cmd;
            int inPtr=0;
            public int read()  //minimum implementation of an InputStream
            {
                if( inPtr >= s.length() )
                    return -1;
                else {
                    inPtr++;
                    return s.charAt(inPtr-1);
                }
            }//read
        };//InputStream
    }//textArea2InputStream

    public class CmdOutputStream extends OutputStream
    {
        String      monitor_buffer;
        boolean     monitor_enable;
        JTextArea   textArea;

        public CmdOutputStream(JTextArea t)
        {
            textArea = t;
            monitor_buffer = "";
            monitor_enable = false;
        }

        public void StartMonitor()
        {
            monitor_enable = true;
            monitor_buffer = "";
        }

        public String StopMonitor()
        {
            monitor_enable = false;
            return monitor_buffer;
        }

        public void write(int b) //minimum implementation of an OutputStream
        {
            String bstr;
            byte[] bs = new byte[1];
            bs[0] = (byte) b;

            bstr = new String(bs);
            textArea.append(bstr);
            textArea.setCaretPosition(textArea.getText().length()-1);
            //AsyncUpdate(bstr);
            if(monitor_enable)
                monitor_buffer += bstr;
        }

        private void AsyncUpdate(final String text)
        {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    textArea.append(text);
                    textArea.setCaretPosition(textArea.getText().length()-1);
                }
            });
        }
    }
    */

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PerfJavaNode().setVisible(true);
            }
        });
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem attachMenuItem;
  private javax.swing.JTextField benchmarkField;
  private javax.swing.JTextArea cmdArea;
  private javax.swing.JTextField cmdField;
  private javax.swing.JTree cmdTree;
  private javax.swing.JTextField configFileField;
  private javax.swing.JButton connButton;
  private javax.swing.JTextArea consoleArea;
  private javax.swing.JTextArea currDir;
  private javax.swing.JButton execButton;
  private javax.swing.JTable fiTable;
  private javax.swing.JTextField fileFilterField;
  private javax.swing.JTable fileTable;
  private javax.swing.JTextField homeField;
  private javax.swing.JMenuItem installMenuItem;
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JButton jButton3;
  private javax.swing.JButton jButton4;
  private javax.swing.JButton jButton5;
  private javax.swing.JButton jButton6;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu3;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem3;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel10;
  private javax.swing.JPanel jPanel12;
  private javax.swing.JPanel jPanel13;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JPanel jPanel6;
  private javax.swing.JPanel jPanel8;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane10;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JScrollPane jScrollPane5;
  private javax.swing.JScrollPane jScrollPane6;
  private javax.swing.JScrollPane jScrollPane7;
  private javax.swing.JScrollPane jScrollPane8;
  private javax.swing.JScrollPane jScrollPane9;
  private javax.swing.JPopupMenu.Separator jSeparator1;
  private javax.swing.JPopupMenu.Separator jSeparator2;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JSplitPane jSplitPane2;
  private javax.swing.JSplitPane jSplitPane3;
  private javax.swing.JSplitPane jSplitPane4;
  private javax.swing.JSplitPane jSplitPane5;
  private javax.swing.JTabbedPane jTabbedPane1;
  private javax.swing.JTabbedPane jTabbedPane2;
  private javax.swing.JTabbedPane jTabbedPane4;
  private javax.swing.JTabbedPane jTabbedPane5;
  private javax.swing.JToolBar jToolBar1;
  private javax.swing.JTextArea messageArea;
  private javax.swing.JTabbedPane messagePanel;
  private cedp.util.gui.ProgBar progBar;
  private javax.swing.JTree progTree;
  private javax.swing.JTable programTable;
  private javax.swing.JMenuItem saveMenuItem;
  private javax.swing.JTextArea srcArea;
  // End of variables declaration//GEN-END:variables

}