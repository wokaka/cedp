#summary Fault, error, failure

 A basic concept in fault-tolerance computing is the definitions of fault, error, and failure. Fault is a root cause of a problem. Error is a state of system changed or corrupted by the fault. Failure is an exposed symptom or behavior of the system to who defines and/or uses these terms. Depending on the perspective of user, the actual phenomenon that represents fault, error, or failure varies. This fault, error, and failure forms a chain, i.e., a failure in a definition can be a fault in another definition.

 Let's look at an example. A man wants to propose to a beautiful lady and prepared a ring for this propose. If his friend steals this ring from the ring box, this stealing event is a fault. The empty state of the box is an error. Failure occurs when the man opens the ring box infront of the beautiful lady. Again, this fauilure could be another fault in higher-level concept. Error could be the state of the lady's mind after she realized that he gave an empty ring box (maybe just to fool her). Failure for this another fault occurs if the lady declines his proposal. 

 Let's look at some other concepts using this example. Inspite of this fault and error, if the lady accepts the man's proposal, we call this fault has been tolerated or the system is not highly sensitive to error (i.e, this low error sensivity is an important concept in building modern fault tolerance techniques for commodity systems). If the man shacked the ring box before he leaves his house and notices the ring is stolen, it is an error detection. Error recovery would be seeking a potential theft (very likely his roomate if these two are the only people in his house) and taking the ring back to the box.