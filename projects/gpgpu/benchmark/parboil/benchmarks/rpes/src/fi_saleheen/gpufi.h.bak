
#ifndef __GPU_FI_H__
#define __GPU_FI_H__

#define MAX_VARIABLE_NAME 256


struct _gpufi_fault_ {
    int kernel;         // invocation index
                        // if it is 0, it means 'ready to inject'
    int instance;
    int loop;
    int iteration;

    int kernel_type;
    int kernel_count;
    int instance_count;
    int loop_count;
    int iteration_count;
    char variable_name[MAX_VARIABLE_NAME];
        
    int mask_type;
#define MASK_XOR    0    
//    int mask_length;    // 4 Bytes
    unsigned int mask;  
    
    int injected;                        
    int disable;
    int mode;
};


//__device__ extern int gpufi_mode;

#define GPUFI_PROFILE 1
#define GPUFI_FI 0

#define MAX_KERNEL	5
#define MAX_INSTANCE	10
#define MAX_LOOP	10
#define MAX_ITERATION	1000
#define MAX_VARIABLE	10


struct _gpufi_profile_ {
	int	kernels;
	int	instance[MAX_KERNEL];
	int	loop[MAX_KERNEL][MAX_INSTANCE];
	int	iteration[MAX_KERNEL][MAX_INSTANCE][MAX_LOOP];
	char	*variable[MAX_KERNEL][MAX_INSTANCE][MAX_LOOP][MAX_VARIABLE];
	int     output_size;
	void	*output[MAX_KERNEL][MAX_INSTANCE];
};

//__device__ extern  struct _gpufi_profile_ gpufi_profile;


struct _gpufi_current_ {
    int mode;    
    int kernel;
    int instance;
    int loop;
};

//__device__ extern struct _gpufi_current_ gpufi_current;


struct _gpufi_data_ {
    struct _gpufi_fault_ fault;
	struct _gpufi_current_ current;
	struct _gpufi_profile_ profile;
};

__device__
void GPUFI_KERNEL_DEC(int *count);
__device__
void GPUFI_KERNEL_SET(int *count, int value);
__device__
void GPUFI_KERNEL_KERNEL(int type);
__device__
void GPUFI_KERNEL_LOOP();
__device__
void GPUFI_KERNEL_ITERATION();
__device__
void GPUFI_KERNEL_VARIABLE(char *name, int *variable);

int GPUFI_FETCH_COMMAND();

extern struct _gpufi_data_ gpufi_host;

__device__ extern struct _gpufi_data_ *gpufi_dev;


#endif

