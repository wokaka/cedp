#ifndef __GPUFI_KERNEL__
#define __GPUFI_KERNEL__

#include <stdio.h>

#define MAX2(x,y) ((x>y)?x:y)
#define MAX3(x,y,z) ((x>y)?MAX2(x,z):MAX2(y,z))

struct _gpufi_data_ gpufi_host = {0, };
__device__ struct _gpufi_data_ *gpufi_dev;


int gpufi_table_int[GPUFI_TABLE_SIZE] = {
					-2147483648,
					-1000000000,
					-100000000, 
					-10000000, 
					-1000000, 
					-100000, 
					-10000,
					-1000, 
					-100, 
					-10, 
					-1, 
					0,
					1, 
					10, 
					100, 
					1000, 
					10000,
					100000, 
					1000000, 
					10000000, 
					100000000, 
					1000000000,
					2147483647, 
					0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0};
					
    // INT
   	// -2147483648 ~ 2147483648-1

float gpufi_table_float[GPUFI_TABLE_SIZE] = {
//#ifndef GPU_ABSOLUTE
					-1e21,-1e20,-1e19,-1e18,-1e17, 
					-1e16,-1e15,-1e14,-1e13,-1e12, 
					-1e11,-1e10,-1e9,-1e8,-1e7, 
					-1e6,-1e5,-1e4,-1e3,-1e2, 
					-1e1,-1,-1e-1,-1e-2,-1e-3, 
					-1e-4,-1e-5,-1e-6, -1e-7, -1e-8, 
					-1e-9, -1e-10, -1e-11, -1e-12, -1e-13, 
					-1e-14, -1e-15, -1e-16, -1e-17, -1e-18, 
//#endif
					0,
					1e-18, 1e-17, 1e-16, 1e-15, 1e-14, 
					1e-13, 1e-12, 1e-11, 1e-10, 1e-9,
					1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 
					1e-3, 1e-2, 1e-1, 1, 1e1,
					1e2, 1e3, 1e4, 1e5, 1e6, 
					1e7, 1e8, 1e9, 1e10, 1e11,
					1e12, 1e13, 1e14, 1e15, 1e16, 
					1e17, 1e18, 1e19, 1e20, 1e21
#if 0 //GPU_ABSOLUTE
					,0,0,0,0,0, 
					0,0,0,0,0, 
					0,0,0,0,0, 
					0,0,0,0,0, 
					0,0,0,0,0, 
					0,0,0,0,0, 
					0,0,0,0,0, 
					0,0,0,0,0 
#endif
					};
					
    // FP
    // 1¡¿10^-101 and the largest is 9999999¡¿10^90 (9.999999¡¿10^96)

////////////////////////////////////////////////////
// CPU PART
////////////////////////////////////////////////////

/*
 * @about   Fetch a fault injection command (including fault type and time)
 *          from a file, namely fi_cmd.txt
 */
int GPUFI_INIT(int kernel_cnt, int variable_cnt)
{
    FILE    *fp;
    char    cmd[32];
		int i;
	
    memset(&gpufi_host, 0, sizeof(struct _gpufi_data_));

    fp = fopen("fi_cmd.txt", "rt");

    if(!fp){
        printf("file open error\n");
        system("pwd");
        return -1;
    }

		for(i=0; i<GPUFI_TABLE_SIZE; i++){
			gpufi_host.table_int[i] = gpufi_table_int[i];
			gpufi_host.table_float[i] = gpufi_table_float[i];
		}

    fscanf(fp, "%s", cmd);
    printf("%s\n", cmd);
    if(!strcmp(cmd, "profile")){
    }
    else{
    	printf("only for profiling\n");
    	exit(-1);
    }

    fclose(fp);

    return 0;
}

int GPUFI_HALT(char *fname)
{
    FILE    *fp;
    int i, j, k, m;

        fp = fopen(fname, "wt");
        if(!fp){
        	  printf("can't write to an output file, %s\n", fname);
            return -1;
        }

            for(j=0; j<MAX_VARIABLE; j++){
                if(gpufi_host.profile.variable_bitmap[j] != 0){
                  fprintf(fp, "variable\t%d\t%s\t%d\t%s\n",
                          j,
             							gpufi_host.profile.variable_bitmap[j]?gpufi_host.profile.variable_name[j]:"",
                          gpufi_host.profile.variable_bitmap[j],
                          (gpufi_host.profile.variable[j].type == GPUFI_DATATYPE_INTEGER)?"int":
                          ((gpufi_host.profile.variable[j].type == GPUFI_DATATYPE_FLOAT)?"fp":"others"));

                  fprintf(fp, "min:max\t%d\t%d\t%f\t%f\n",
                          gpufi_host.profile.variable[j].int_min,
                          gpufi_host.profile.variable[j].int_max,
                          gpufi_host.profile.variable[j].int_min,
                          gpufi_host.profile.variable[j].int_min);

				        		int max = 0, maxsum[5];
				        		
				        		if(gpufi_host.profile.variable[j].type == GPUFI_DATATYPE_INTEGER ||
				        		   gpufi_host.profile.variable[j].type == GPUFI_DATATYPE_FLOAT){
											for(k=0; k<GPUFI_TABLE_SIZE; k++){
												fprintf(fp, "%d\t", gpufi_host.profile.variable[j].dist[k]);
												if(gpufi_host.profile.variable[j].dist[k] > max){
													max = gpufi_host.profile.variable[j].dist[k];
													// -1,0       0,1        -1,0,1     -2,-1,0     0,1,2
													maxsum[0] = maxsum[1] = maxsum[2] = maxsum[3] = maxsum[4] = max;
													
												  if(k-2>=0){
												  	maxsum[3] += gpufi_host.profile.variable[j].dist[k-2];
												  }
												  if(k-1>=0){
												  	maxsum[0] += gpufi_host.profile.variable[j].dist[k-1];
												  	maxsum[2] += gpufi_host.profile.variable[j].dist[k-1];
												  	maxsum[3] += gpufi_host.profile.variable[j].dist[k-1];
												  }
	 									  		if(k+1<GPUFI_TABLE_SIZE){
												  	maxsum[1] += gpufi_host.profile.variable[j].dist[k+1];
												  	maxsum[2] += gpufi_host.profile.variable[j].dist[k+1];
												  	maxsum[4] += gpufi_host.profile.variable[j].dist[k+1];
	 									  		}
	 									  		if(k+2<GPUFI_TABLE_SIZE){
												  	maxsum[4] += gpufi_host.profile.variable[j].dist[k-2];
	 									  		}
												}
											}
										
										fprintf(fp, "%f%%\t%f%%\t%f%%\n", (double)max * 100.0 / (double)gpufi_host.profile.variable_bitmap[j],
																											MAX2((double)maxsum[0] * 100.0 / (double)gpufi_host.profile.variable_bitmap[j],
																								  		(double)maxsum[1] * 100.0 / (double)gpufi_host.profile.variable_bitmap[j]),
																											MAX3((double)maxsum[2] * 100.0 / (double)gpufi_host.profile.variable_bitmap[j],
																									 	  (double)maxsum[3] * 100.0 / (double)gpufi_host.profile.variable_bitmap[j],
																											(double)maxsum[4] * 100.0 / (double)gpufi_host.profile.variable_bitmap[j]));
									}
								}
            }
            fprintf(fp, "\n");

					fprintf(fp, "\nINT\t");
	     		for(k=0; k<GPUFI_TABLE_SIZE; k++)
						fprintf(fp, "%d\t", gpufi_host.table_int[k]);
					fprintf(fp, "\nFP\t");
	     		for(k=0; k<GPUFI_TABLE_SIZE; k++)
						fprintf(fp, "%f\t", gpufi_host.table_float[k]);
				
        fclose(fp);

    return 0;
}


////////////////////////////////////////////////////
// DEVICE PART
////////////////////////////////////////////////////

__device__
void CudaStrcpy(char *dst, char *src, int max)
{
    int i;
	
    for(i=0; src[i]!=0 && i<max-1; i++)
        dst[i] = src[i];
    dst[i] = 0;
}

__device__
int GPUFI_STRCMP(char *src, char *dst)
{
	int	i;

	for(i=0; src[i] && dst[i]; i++){
		if(src[i] != dst[i])
			return 1;
	}
	
	if(src[i] == dst[i])
		return 0;

	return 1;
}

__device__ 
int GPUFI_EXIT(struct _gpufi_data_ *gpufi_dev, int errno)
{
	gpufi_dev->sdc = 1;
	//int *addr = (int *)0x0;
	//*addr = (int)0x80;
	//return 100 / errno;
	return 0;
}

__device__
void GPUFI_KERNEL(struct _gpufi_data_ *gpufi_dev, int begin, int type, char *name)
{
}

__device__
void GPUFI_KERNEL_LOOP(struct _gpufi_data_ *gpufi_dev, int begin)
{
}

__device__
void GPUFI_KERNEL_ITERATION(struct _gpufi_data_ *gpufi_dev)
{
}

__device__
void GPUFI_KERNEL_VARIABLE(struct _gpufi_data_ *gpufi_dev, int varid, char *name, int *variable, int var_type)
{
		int i;
    //if(blockIdx.x != 0)
    //    return;

//    		if(varid < MAX_VARIABLE){
	        	
	        	if(gpufi_dev->profile.variable_bitmap[varid] == 0){
		        	atomicAdd(&gpufi_dev->profile.variable_bitmap[varid], 1);
	        		CudaStrcpy(gpufi_dev->profile.variable_name[varid], name, MAX_NAME);
	        		gpufi_dev->profile.variable[varid].int_min = 3000000;
	        		gpufi_dev->profile.variable[varid].int_max = -3000000;
	        		gpufi_dev->profile.variable[varid].fp_min = 1e30;
	        		gpufi_dev->profile.variable[varid].fp_max = 0;
	        	}
	        	else{
		        	atomicAdd(&gpufi_dev->profile.variable_bitmap[varid], 1);
		       	}
	        	
	        	if(var_type == GPUFI_DATATYPE_INTEGER){
	        		struct _gpufi_profile_variable_ *var = &gpufi_dev->profile.variable[varid];

	        		var->type = GPUFI_DATATYPE_INTEGER;
							for(i=0; i<GPUFI_TABLE_SIZE; i++){
								if(gpufi_dev->table_int[i] > *variable){
									atomicAdd(&var->dist[i], 1);
									break;
								}
							}	        		
							if(i == GPUFI_TABLE_SIZE){
								atomicAdd(&var->dist[i-1], 1);
							}
	          }
	        	else if(var_type == GPUFI_DATATYPE_FLOAT){
	        	  float v = *((float *)variable);
	        		struct _gpufi_profile_variable_ *var = &gpufi_dev->profile.variable[varid];

	        		if(v < var->fp_min)
	        			var->fp_min = v;
	        		if(v > var->fp_max)
	        			var->fp_max = v;

#if 0 // GPU_ABSOLUTE
						  if(v<0)
						  		v *= -1;
#endif

	        		var->type = GPUFI_DATATYPE_FLOAT;
							for(i=0; i<GPUFI_TABLE_SIZE; i++){
								if(gpufi_dev->table_float[i] > v){
									atomicAdd(&var->dist[i], 1);
									break;
								}
							}
							if(i == GPUFI_TABLE_SIZE){
								atomicAdd(&var->dist[i-1], 1);
							}
	          }
//      	}
}

#endif